<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.9.0">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2021-07-23T11:14:51+00:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Learnote-Dev</title><subtitle>대학생 예비 개발자 블로그</subtitle><author><name>이민재</name><email>lmj938@naver.com</email></author><entry><title type="html">[Java] 참조 자료형, 정보은닉</title><link href="http://localhost:4000/java/Java-%EC%B0%B8%EC%A1%B0%EC%9E%90%EB%A3%8C%ED%98%95,-%EC%A0%95%EB%B3%B4%EC%9D%80%EB%8B%89/" rel="alternate" type="text/html" title="[Java] 참조 자료형, 정보은닉" /><published>2021-07-23T00:00:00+00:00</published><updated>2021-07-23T00:00:00+00:00</updated><id>http://localhost:4000/java/%5BJava%5D%EC%B0%B8%EC%A1%B0%EC%9E%90%EB%A3%8C%ED%98%95,%20%EC%A0%95%EB%B3%B4%EC%9D%80%EB%8B%89</id><content type="html" xml:base="http://localhost:4000/java/Java-%EC%B0%B8%EC%A1%B0%EC%9E%90%EB%A3%8C%ED%98%95,-%EC%A0%95%EB%B3%B4%EC%9D%80%EB%8B%89/">&lt;h2 id=&quot;참조-자료형&quot;&gt;참조 자료형&lt;/h2&gt;
&lt;p&gt;크기가 정해진 기본 자료형 ( int, char, float, double등)으로 선언하는 변수가 있고, 클래스 자료형으로 선언하는 참조 자료형 변수가 있다. 참조 자료형 변수의 특징에 대해 좀 더 자세히 살펴보고, 클래스를 선언하여 참조형을 이용한 프로그램을 구현해보자.&lt;/p&gt;

&lt;p&gt;어떤 학생이 있다고 가정하자. 이 학생이 국어와 수학 과목을 수강하는데, 이 시험의 수학과 국어 점수를 저장하는 프로그램을 만든다고 생각해보면,&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;package reference;

public class Student1 {
    int studendID;
    String studentName;
    int koreaScore;
    int mathScore;
}
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;이렇게 Student1이라는 클래스를 만들어보았다. 근데 만약 이 클래스에 성적뿐만 아니라 이 학생이 수강하고 있는 과목의 이름도 함께 저장하고 싶다면 어떻게 해야할까? 아주 간단한 방법으로는 
String을 사용해서 클래스 안에 과목이름 변수를 추가해주는 것이다. &lt;br /&gt;
Student2라는 과목이름 변수도 함께있는 클래스를 만들어보자&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;package reference;

public class Student1 {
    int studentID;
    String studentName;
    int koreaScore;
    int mathScore;

}
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;이렇게 구현하고보니, 이 클래스는 학생에 관한 클래스인데 과목에 대한 변수가 늘어나 Student라는 이름의 클래스하나로 구현하게 되면 나중에 참조 할때 헷갈리거나 문제가 생길 수 있다.&lt;/p&gt;

&lt;p&gt;따라서 과목에 대한 변수는 Subject라는 클래스를 따로 만들어 분리해보도록 하자.&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;package reference;

public class Subject {
    String SubjectName;
    int scorePoint;
}
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;이렇게 Subject로 따로 클래스를 만들어 주면, 우리는 기본 자료형이 아닌 우리가 만들어준 참조 자료형으로 변수를 선언 할 수 있게된다. Subject에 과목의 이름과 과목의 점수를 저장할 수 있는 변수가 있으니, 우리는 다른 클래스에서 이 참조 자료형을 사용하여 변수를 선언 할 수가 있게 된다.&lt;/p&gt;

&lt;p&gt;Student3 클래스를 만들어 참조자료형 선언을 해보자.&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;package reference;

public class Student3 {
    int studentID;
    String studentName;
    Subject korean;
    Subject math;
}
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;이렇게 구현하게 되면 기존에는 Student2 클래스의 경우처럼 과목이름을 koreanSubjectName, mathSubjectName 이런식으로 두개의 변수를 추가 해주어야 한다. 그러나 Subject와 같이 클래스를 분리해주면 subjectName은 Subject클래스에 선언한뒤 korean.subjectName과 같이 사용해줄 수 있어 매우 편리하다.&lt;/p&gt;

&lt;h2 id=&quot;정보-은닉&quot;&gt;정보 은닉&lt;/h2&gt;
&lt;p&gt;지금까지 클래스를 선언할때 public이라는 예약어를 사용하였다. 이제 이 예약어가 어떤 의미를 갖는지에 대해 알아보자.&lt;/p&gt;

&lt;p&gt;객체 지향 프로그램에서는 예약어를 사용하여 클래스 내부의 변수나 메서드, 생성자에 대한 접근 권한을 지정한다. 이러한 예약어들을 &lt;strong&gt;접근 제어자(acces modifier)&lt;/strong&gt; 라고 하는데, 우리가 사용하던 public이라고 선언했던 예약어는 외부클래스에서 접근이 가능하게 설정되었다는 뜻이다. 반대로 외부클래스에서 사용하게 하고 싶지 않은 클래스는 private으로 선언해주면 된다.&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;package hiding;

public class Student {
    int studentID;
    private String studentName;
    int grade;
    String address;
}
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;위 코드는 Student라는 클래스를 만들어주어 안에 변수를 만들어주었는데, studentName 변수를 private를 사용하여 선언해주었다.  이렇게 private 예약어를 사용한 변수를 한번 다른 클래스에서 접근해보면,&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;package hiding;

public class StudentTest {
    public static void main(String[] args){
        Student studentLee = new Student();
        studentLee.studentName = &quot;이민재&quot;;

        System.out.println(studentLee.getStudentName());
    }
}
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;위의 코드는 private로 선언한 studentName 변수에 접근했으므로, 프로그램에서 오류를 출력한다.&lt;/p&gt;

&lt;p&gt;그렇다면 private으로 선언한 studentName에 접근하고 싶다면 어떻게 해야 할까? 이 때 사용 할 수 있는것이 바로 내부클래스에서 접근을 할수 있도록 해주는 메서드를 만들어 주는 것이다. &lt;br /&gt;
다시 Student 파일을 열어 메서드 두개를 추가해주도록 하자.&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;package hiding;

public class Student {
    int studentID;
    private String studentName;
    int grade;
    String address;
    
    public String getStudentName(){
        return studentName
    }
    
    public void setStudentName(String studentName){
        this.studentName = studentName;
    }
}
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;getStudentName() 클래스는 public으로 선언되어 있으며, 이 메서드는 studentName과 같은 클래스에 있으므로 접근도 가능하다. 그럼 직접 저 변수에 접근하는게 아니라 우리가 만들어준 메서드를 사용하여 우리가 private로 선언한 studentName에 접근해보자.&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;package hiding;

public class StudentTest {
    public static void main(String[] args){
        Student studentLee = new Student();
        studentLee.setStudentName(&quot;이민재&quot;);

        System.out.println(studentLee.getStudentName());
    }
}
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;이렇게 우리가 만들어준 메서드로 접근을 할 수 있도록 코드를 작성해주니, 올바르게 프로그램에 동작하는 것을 볼 수 있다.&lt;/p&gt;

&lt;p&gt;굳이 이렇게 직접 변수에대한 접근을 막는 private 예약어를 제공해주는 이유는 무엇일까??
만약 우리가 날짜를 받는 기능을 구현한다고 생각해보자.&lt;/p&gt;

&lt;p&gt;각 달은 30일, 31일을 가지며, 2월의 경우에는 28일의 날짜를 갖는데, 만약 public으로 변수를 선언하고 변수를 직접 대입해주면 2월에도 30일이 들어갈 수 있는 오류가 생길 것이다.
따라서 이럴때는 변수를 private로 선언해 준뒤, set() 메서드를 만들어주어, 직접 set() 메서드가 이 월에 따른 일수가 맞는지를 판별하여 일수가 일치하는 경우에만 해당 변수에 날짜를 대입하도록 만들 수 가 있다.&lt;/p&gt;

&lt;p&gt;이처럼 클래스 내부에서 사용할 변수는 private로 선언해주어 외부의 접근을 막아주면, 우리가 예상치 못한 오류들을 막아내는데 유용하게 사용할 수 있다.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;접근 제어자&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;설명&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;public&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;외부클래스 어디에서나 접근 가능&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;protected&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;같은 패키지 내부와 상속관계의 클래스에서만 접근가능&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;아무것도 없는 경우&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;default이며, 같은 패키지 내부에서만 접근 가능&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;private&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;같은 클래스 내부에서만 접근가능&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;</content><author><name>이민재</name><email>lmj938@naver.com</email></author><category term="java" /><summary type="html">참조 자료형 크기가 정해진 기본 자료형 ( int, char, float, double등)으로 선언하는 변수가 있고, 클래스 자료형으로 선언하는 참조 자료형 변수가 있다. 참조 자료형 변수의 특징에 대해 좀 더 자세히 살펴보고, 클래스를 선언하여 참조형을 이용한 프로그램을 구현해보자.</summary></entry><entry><title type="html">[Java] 객체 간 협력</title><link href="http://localhost:4000/java/Java-%EA%B0%9D%EC%B2%B4-%EA%B0%84-%ED%98%91%EB%A0%A5/" rel="alternate" type="text/html" title="[Java] 객체 간 협력" /><published>2021-07-23T00:00:00+00:00</published><updated>2021-07-23T00:00:00+00:00</updated><id>http://localhost:4000/java/%5BJava%5D%20%EA%B0%9D%EC%B2%B4%20%EA%B0%84%20%ED%98%91%EB%A0%A5</id><content type="html" xml:base="http://localhost:4000/java/Java-%EA%B0%9D%EC%B2%B4-%EA%B0%84-%ED%98%91%EB%A0%A5/">&lt;p&gt;객체 지향 프로그램은 객체를 정의하고 객체 간 협력으로 만들어진다.  &lt;br /&gt;
그러면 실제로 객체간의 협력이 어떻게 이루어지는지 한번 예제를 만들어 확인해보자.&lt;/p&gt;

&lt;h2 id=&quot;학생-클래스-구현하기&quot;&gt;학생 클래스 구현하기&lt;/h2&gt;
&lt;p&gt;계속 예제로 들었던 학생 클래스를 또 한번 만들어보자. 학생클래스는 ‘이름’,’ 학년’, ‘가진 돈’ 이렇게 세가지 멤버 변수를 갖는다고 가정해보겠다. 그리고 메서드로는, ‘버스 타기’, ‘지하철 타기’, ‘학생의 현재 정보 보여주기’ 세가지 행동을 갖는다고 하자.&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;package cooperation;

public class Student {
    public String studentName;
    public int grade;
    public int money;

    public Student(String studentName, int money){
        this.studentName = studentName;
        this.money = money;
    }

    public takeBus(Bus bus){
        bus.take(1000);
        this.money-= 1000;
    }

    public takeSubway(Subway subway){
        subway.take(1500);
        this.money -= 1500;
    }
    public void showInfo(){
        System.out.println(studentName+&quot;님의 남은 돈은&quot;+money+&quot;입니다.&quot;);
    }
}
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Student 클래스는 버스를 타면 1000원을 money에서 빼주고, 지하철을 타면 1500원을 money 에서 뺀다.&lt;/p&gt;

&lt;p&gt;그럼 위에서 Student에서 사용한 클래스들인 Bus와 Subway 클래스를 만들어보자.&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;package cooperation;

public class Bus {
    int money;
    int person;
    int busNumber;

    public Bus(int busNumber){
        this.busNumber = busNumber;
    }
    public void take(int money){
        this.money += money;
        person++;
    }

    public void showInfo(){
        System.out.println(busNumber+&quot;번의 승객은&quot;+person+&quot;명이고, 수입은&quot;+money+&quot;입니다&quot;);

    }
}
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;동일하게 이름만 바꿔서 Subway를 만들어준다.&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;package cooperation;

public class Subway {
    int money;
    int person;
    int subwayNumber;

    public Subway(int subwayNumber){
        this.subwayNumber = subwayNumber;
    }
    public void take(int money){
        this.money += money;
        person++;
    }

    public void showInfo(){
        System.out.println(subwayNumber+&quot;번의 승객은&quot;+person+&quot;명이고, 수입은&quot;+money+&quot;입니다&quot;);

    }

}
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;이렇게 Student, Bus, Subway 클래스를 만들어 주었으니 이들이 어떤 식으로 협력하여 main에서 작동하는지 TakeTrans 클래스를 만들어주어 객체간의 협력을 시켜보자. &lt;br /&gt;
학생은 James와 Tomas 두명으로 하고, James는 버스, Tomas는 지하철을 타도록 한뒤, 각각 탑승 후 학생의 현재 상태와 대중교통의 현재 상태가 나오도록 해주자.&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;package cooperation;

public class TakeTrans {
    public static void main(String[] args){
        Student James = new Student(&quot;James&quot;, 5000);
        Student Tomas = new Student(&quot;Tomas&quot;, 10000);

        Bus bus100 = new Bus(100);
        James.takeBus(bus100);
        James.showInfo();
        bus100.showInfo();

        Subway subway9 = new Subway(9);
        Tomas.takeSubway(subway9);
        Tomas.showInfo();
        subway9.showInfo();
    }
}
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;James와 Tomas라는 두개의 인스턴스를 만들어 준뒤, 이름과 가진돈을 추가해준다.   &lt;br /&gt;
버스와 지하철도 동일하게 각각 하나씩 bus100과 subway9이라는 인스턴스를 추가 해준다.
James는 takeBus 메서드가 호출되어 버스를 탔고, Tomas는 takeSubway 메서드가 호출되어 지하철을 탔다.&lt;/p&gt;

&lt;p&gt;이처럼 우리가 각각 만든 객체들을 인스턴스로 만들어 각 객체끼리 협력하도록 해줄 수 있다.&lt;/p&gt;</content><author><name>이민재</name><email>lmj938@naver.com</email></author><category term="java" /><summary type="html">객체 지향 프로그램은 객체를 정의하고 객체 간 협력으로 만들어진다. 그러면 실제로 객체간의 협력이 어떻게 이루어지는지 한번 예제를 만들어 확인해보자.</summary></entry><entry><title type="html">[Java] static 변수</title><link href="http://localhost:4000/java/Java-static-%EB%B3%80%EC%88%98/" rel="alternate" type="text/html" title="[Java] static 변수" /><published>2021-07-23T00:00:00+00:00</published><updated>2021-07-23T00:00:00+00:00</updated><id>http://localhost:4000/java/%5BJava%5D%20static%20%EB%B3%80%EC%88%98</id><content type="html" xml:base="http://localhost:4000/java/Java-static-%EB%B3%80%EC%88%98/">&lt;h2 id=&quot;변수를-여러-클래스에서-공통으로-사용하기&quot;&gt;변수를 여러 클래스에서 공통으로 사용하기&lt;/h2&gt;
&lt;p&gt;우리가 앞서만든 학생클래스에서, 만약 학번을 만들고 싶다면 어떻게 해야할까?  &lt;br /&gt;
이 학번은 새로운 인스턴스가 생성될때마다 자동으로 생성되어 그 인스턴스에 할당되게 하고싶다. &lt;br /&gt;
이렇게 하려면 인스턴스마다 따로 변수가 생성되는게 아니라, 클래스 전체가 함께 사용하는 기준 변수가 하나 있어야한다. 이러한 변수가 있다면, 우리는 학번을 1씩 증가시켜가며 새로운 인스턴스가 생길때마다 할당 해주면 학번이 자동으로 정해지도록 할 수 있을 것이다.&lt;/p&gt;

&lt;p&gt;이때, 클래스에서 사용하는 공통 변수를 &lt;strong&gt;static 변수&lt;/strong&gt;로 선언한다.&lt;/p&gt;

&lt;h2 id=&quot;static-변수의-정의와-사용-방법&quot;&gt;static 변수의 정의와 사용 방법&lt;/h2&gt;
&lt;p&gt;static 변수는 다른 용어로 ‘정적 변수’라고도 한다. static 변수는 자바뿐만 아니라 다른 언어에서도 비슷한 개념으로 사용하는 변수로, 다른 멤버 변수와 동일하게 내부에 선언한다. &lt;br /&gt;
자료형앞에 static 예약어를 선언해주면 사용 할 수 있다.&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;static int seralNum;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;static 변수는 클래스 내부에 선언하지만, 다른 멤버 변수처럼 인스턴스가 생성될 때마다 새로 생성되는 변수가 아니라, 프로그램이 실행되어 메모리에 올라가면 딱 한 번 메모리 공간이 할당되고, 그 값을 모든 인스턴스가 공유하는 변수이다.&lt;/p&gt;

&lt;p&gt;그럼 이러한 static변수를 갖고 학번을 가지는 학생 클래스를 만들어 보자.&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;package staticex;

public class Student {
    static int serialNum = 1000;
    String studentName;
    int studentID;
    
    public Stirng getStudentName(){
        return studentName
    }
    public void setStudentName(String name){
        studentName = name;
        
    }

}
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;학생 클래스는 serialNum이라는 static 변수를 갖는데, 이 값은 1000이다.
이제 테스트 코드에서 이 static 변수를 증가시키면, 이 값을 다른 인스턴스들이 공유하는지 한번 확인해보자.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;package staticex;

public class StudentTest {
    public static void main(String[] args){
        Student Lee = new Student();
        Lee.setStudentName(&quot;Lee&quot;);
        System.out.println(Lee.serialNum);
        Lee.serialNum++;

        Student Kim = new Student();
        Kim.setStudentName(&quot;Kim&quot;);
        System.out.println(Kim.serialNum);

        System.out.println(Lee.serialNum);
        System.out.println(Kim.serialNum);
    }
}

&amp;gt;&amp;gt;&amp;gt; 1000
&amp;gt;&amp;gt;&amp;gt; 1001
&amp;gt;&amp;gt;&amp;gt; 1001
&amp;gt;&amp;gt;&amp;gt; 1001
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Lee 학생의 serialNum을 증가시켰는데, Kim학생의 serialNum도 동일하게 증가된 것을 확인 할 수 있다. &lt;br /&gt;
이처럼 static변수의 값은 모든 인스턴스가 공유한다는 것을 알게되었다. 그럼 이제 인스턴스가 생성되면 자동으로 증가한 학번을 할당하도록 해보자.&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;package staticex;

public class Student {
    static int serialNum = 1000;
    String studentName;
    int studentID;

    public Student(){
        serialNum++;
        studentID = serialNum;
    }
    public String getStudentName(){
        return studentName;
    }
    public void setStudentName(String name){
        studentName = name;


    }

}
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;public Student를 만들어 새로운 인스턴스가 생성되면 serialNum을 1증가시키고, 그 값을 학번에다 할당하도록 했다. 그럼 다시 테스트 코드로 가서 학번이 올바르게 증가하며 할당되는지 확인 해보자.&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;package staticex;

public class StudentTest {
    public static void main(String[] args){
        Student Lee = new Student();
        Lee.setStudentName(&quot;Lee&quot;);
        System.out.println(&quot;이름: &quot;+Lee.studentName+&quot; 학번: &quot;+Lee.serialNum);

        Student Kim = new Student();
        Kim.setStudentName(&quot;Kim&quot;);
        System.out.println(&quot;이름: &quot;+Kim.studentName+&quot; 학번: &quot;+Kim.serialNum);
    }
}

&amp;gt;&amp;gt;&amp;gt; 이름: Lee 학번: 1001
&amp;gt;&amp;gt;&amp;gt; 이름: Kim 학번: 1002
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;인스턴스를 생성해줄때마다 자동으로 학번이 증가하는 것을 확인 할 수 있다.&lt;/p&gt;</content><author><name>이민재</name><email>lmj938@naver.com</email></author><category term="java" /><summary type="html">변수를 여러 클래스에서 공통으로 사용하기 우리가 앞서만든 학생클래스에서, 만약 학번을 만들고 싶다면 어떻게 해야할까? 이 학번은 새로운 인스턴스가 생성될때마다 자동으로 생성되어 그 인스턴스에 할당되게 하고싶다. 이렇게 하려면 인스턴스마다 따로 변수가 생성되는게 아니라, 클래스 전체가 함께 사용하는 기준 변수가 하나 있어야한다. 이러한 변수가 있다면, 우리는 학번을 1씩 증가시켜가며 새로운 인스턴스가 생길때마다 할당 해주면 학번이 자동으로 정해지도록 할 수 있을 것이다.</summary></entry><entry><title type="html">[Java] 싱글톤 패턴</title><link href="http://localhost:4000/java/Java-%EC%8B%B1%EA%B8%80%ED%86%A4-%ED%8C%A8%ED%84%B4/" rel="alternate" type="text/html" title="[Java] 싱글톤 패턴" /><published>2021-07-23T00:00:00+00:00</published><updated>2021-07-23T00:00:00+00:00</updated><id>http://localhost:4000/java/%5BJava%5D%20%EC%8B%B1%EA%B8%80%ED%86%A4%20%ED%8C%A8%ED%84%B4</id><content type="html" xml:base="http://localhost:4000/java/Java-%EC%8B%B1%EA%B8%80%ED%86%A4-%ED%8C%A8%ED%84%B4/">&lt;h2 id=&quot;싱글톤-패턴이란&quot;&gt;싱글톤 패턴이란?&lt;/h2&gt;
&lt;p&gt;프로그램을 구현하다 보면 여러 개의 인스턴스가 필요한 경우도 있고, 단 하나의 인스턴스만 필요한 경우도 있다. 객체 지향 프로그램에서 인스턴스를 단 하나만 생성하는 디자인 패턴을 &lt;strong&gt;싱글톤 패턴(singleton pattern)&lt;/strong&gt; 이라고 한다. 우리가 여기서 살펴볼 싱글톤 패턴은 static을 응용하여 프로그램 전반에서 사용하는 인스턴스를 하나만 구현하는 방식이다.&lt;/p&gt;

&lt;p&gt;어떤 회사의 직원들을 객체지향으로 구현한다고 가정해보자. 직원은 여러명이겠지만, 회사는 하나다.
이런 경우에 직원 인스턴스는 여러 개를 생성하는 것이 당연하지만, 회사 객체는 하나여야 할 것 이다.
그럼 싱글톤 패턴으로 company 클래스를 단계적으로 만들어 보자.&lt;/p&gt;

&lt;h2 id=&quot;싱글톤-패턴으로-회사-클래스-구현하기&quot;&gt;싱글톤 패턴으로 회사 클래스 구현하기&lt;/h2&gt;
&lt;h3 id=&quot;단계-1--생성자를-private로-만들기&quot;&gt;단계 1 : 생성자를 private로 만들기&lt;/h3&gt;
&lt;p&gt;생성자가 하나도 없는 클래스는 컴파일러가 자동으로 디폴트 생성자를 만들어 주는데, 이 생성자는 항상 public이다. 생성자가 public이면 외부에서 접근이 가능하기 때문에 인스턴스를 여러 개 생성 할 수 있다. 따라서 싱글톤 패턴에서는 생성자를 반드시 명시적으로 만들고, 그 접근 제어자를 private로 설정해야한다.&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;package singleton;

public class Company {
    private Company(){
        
    }
}
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h3 id=&quot;단계-2--클래스-내부에-static으로-유일한-인스턴스-생성하기&quot;&gt;단계 2 : 클래스 내부에 static으로 유일한 인스턴스 생성하기&lt;/h3&gt;
&lt;p&gt;단계 1에서 접근제어자를 private로 함으로써 외부 인스턴스를 생성할 수 없도록 만들었다. 하지만 우리가 프로그램에서 사용할 인스턴스 하나는 필요하기 때문에, Compony 클래스 내부에서 하나의 인스턴스를 생성한다. 이 인스턴스가 프로그램 전체에서 사용가능한 유일한 인스턴스가 된다.
이 또한 private으로 선언해야만 외부에서 이 인스턴스에 접근 할 수 없어, 인스턴스 오류가 방지된다.&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;package singleton;

public class Company {
    private static Company instance = new Company();
    private Company(){ }
}
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h3 id=&quot;단계-3--외부에서-참조-할-수-있는-public-메서드-만들기&quot;&gt;단계 3 : 외부에서 참조 할 수 있는 public 메서드 만들기&lt;/h3&gt;
&lt;p&gt;이제 private으로 선언한 유일한 인스턴스인 instance를 외부에서도 사용가능 하게 설정해야한다.
이를 위해 public 메서드를 사용해 유일한 인스턴스를 반환하게 한다. 이때 인스턴스를 반환하는 메서드는 반드시 static으로 선언해주어야 인스턴스 생성과 상관없이 호출이 가능하다.&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;package singleton;

public class Company {
    private static Company instance = new Company();
    private Company(){ }

    public static Company getInstance(){
        if(instance== null){
            instance = new Company();
        }
        return instance;
    }
}
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;단계-4--실제로-사용하는-코드-만들기&quot;&gt;단계 4 : 실제로 사용하는 코드 만들기&lt;/h3&gt;
&lt;p&gt;외부 클래스에서는 Company를 생성할 수 없으므로 getInstance() 메서드를 호출한다. &lt;br /&gt;
Company.getInstance(); 와 같이 호출하면 유일한 인스턴스를 받아온다.  &lt;br /&gt;
두 인스턴스를 만들어 주소 값이 같은지 확인해보도록 하자.&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;package singleton;

public class CompanyTest {
    public static void main(String[] args){
        Company myCompany1 = Company.getInstance();
        Company myCompany2 = Company.getInstance();
        System.out.println(myCompany1 == myCompany2);
    }
}

&amp;gt;&amp;gt;&amp;gt; true
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;두개의 인스턴스를 만들었지만, 받아온 인스턴스는 동일한 주소 값을 가지는, 아까 만들었던 유일한 인스턴스를 받아왔음을 알 수 있다.&lt;/p&gt;</content><author><name>이민재</name><email>lmj938@naver.com</email></author><category term="java" /><summary type="html">싱글톤 패턴이란? 프로그램을 구현하다 보면 여러 개의 인스턴스가 필요한 경우도 있고, 단 하나의 인스턴스만 필요한 경우도 있다. 객체 지향 프로그램에서 인스턴스를 단 하나만 생성하는 디자인 패턴을 싱글톤 패턴(singleton pattern) 이라고 한다. 우리가 여기서 살펴볼 싱글톤 패턴은 static을 응용하여 프로그램 전반에서 사용하는 인스턴스를 하나만 구현하는 방식이다.</summary></entry><entry><title type="html">[BOJ] 1325 효율적인 해킹 (Python3)</title><link href="http://localhost:4000/baekjoon/BOJ-1325-%ED%9A%A8%EC%9C%A8%EC%A0%81%EC%9D%B8-%ED%95%B4%ED%82%B9-(Python3)/" rel="alternate" type="text/html" title="[BOJ] 1325 효율적인 해킹 (Python3)" /><published>2021-07-20T00:00:00+00:00</published><updated>2021-07-20T00:00:00+00:00</updated><id>http://localhost:4000/baekjoon/%5BBOJ%5D%201325%20%ED%9A%A8%EC%9C%A8%EC%A0%81%EC%9D%B8%20%ED%95%B4%ED%82%B9%20(Python3)</id><content type="html" xml:base="http://localhost:4000/baekjoon/BOJ-1325-%ED%9A%A8%EC%9C%A8%EC%A0%81%EC%9D%B8-%ED%95%B4%ED%82%B9-(Python3)/">&lt;h2 id=&quot;문제&quot;&gt;문제&lt;/h2&gt;
&lt;p&gt;해커 김지민은 잘 알려진 어느 회사를 해킹하려고 한다. 이 회사는 N개의 컴퓨터로 이루어져 있다. 김지민은 귀찮기 때문에, 한 번의 해킹으로 여러 개의 컴퓨터를 해킹 할 수 있는 컴퓨터를 해킹하려고 한다.&lt;/p&gt;

&lt;p&gt;이 회사의 컴퓨터는 신뢰하는 관계와, 신뢰하지 않는 관계로 이루어져 있는데, A가 B를 신뢰하는 경우에는 B를 해킹하면, A도 해킹할 수 있다는 소리다.&lt;/p&gt;

&lt;p&gt;이 회사의 컴퓨터의 신뢰하는 관계가 주어졌을 때, 한 번에 가장 많은 컴퓨터를 해킹할 수 있는 컴퓨터의 번호를 출력하는 프로그램을 작성하시오.&lt;/p&gt;

&lt;h2 id=&quot;입력&quot;&gt;입력&lt;/h2&gt;
&lt;p&gt;첫째 줄에, N과 M이 들어온다. N은 10,000보다 작거나 같은 자연수, M은 100,000보다 작거나 같은 자연수이다. 둘째 줄부터 M개의 줄에 신뢰하는 관계가 A B와 같은 형식으로 들어오며, “A가 B를 신뢰한다”를 의미한다. 컴퓨터는 1번부터 N번까지 번호가 하나씩 매겨져 있다.&lt;/p&gt;

&lt;h2 id=&quot;출력&quot;&gt;출력&lt;/h2&gt;
&lt;p&gt;첫째 줄에, 김지민이 한 번에 가장 많은 컴퓨터를 해킹할 수 있는 컴퓨터의 번호를 오름차순으로 출력한다.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;예제 입력 1  
5 4
3 1
3 2
4 3
5 3

예제 출력 1  
1 
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;풀이&quot;&gt;풀이&lt;/h2&gt;
&lt;p&gt;간단한 탐색문제로 bfs로 풀 수 있는데, 컴퓨터의 신뢰관계를 노드 형식으로 리스트에 넣어주고, 노드가 많이 연결되어있는 컴퓨터순으로 출력하면 된다.&lt;/p&gt;

&lt;h2 id=&quot;코드&quot;&gt;코드&lt;/h2&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;collections&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;deque&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#컴퓨터의 개수 n, 신뢰관계의 개수 m
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;#노드의 형태 graph
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;graph&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[[]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;#자신을 신뢰하는 컴퓨터를 자신의 리스트에 넣는다
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;graph&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;#bfs를 사용하여 1-5의 컴퓨터를 순서대로 방문하며, 자신을 신뢰하는 컴퓨터에 모두 방문한다.
#방문한 횟수를 hack 변수에 넣는다.
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;bfs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;q&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;deque&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;q&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;hack&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;visited&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;visited&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;q&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;nx&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;q&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;popleft&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;graph&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;visited&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;q&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;hack&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;visited&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hack&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#자신을 신뢰하는 컴퓨터의 개수를 저장하는 리스트 answer
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;answer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#bfs함수에 넣어 얻은 result를 answer 리스트에 넣어준다.
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;answer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bfs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    
    
&lt;span class=&quot;c1&quot;&gt;#resutl 순차 출력
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;answer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;max&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;answer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;answer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;' '&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;



&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;5 4
3 1
3 2
4 3
5 3
1 2 
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;feedback&quot;&gt;Feedback&lt;/h2&gt;
&lt;p&gt;방문을 체크하는 visited 리스트를 만들지 않아서 계속 메모리 초과가 떴다.
예제는 서로 상호신뢰관계가 없어서 잘되길래 문제가 없다고 생각했는데, 테스트셋의 상호신뢰관계 때문에 반복이 끝나지를 않아서 메모리가 초과 된것 같다.
bfs, dfs를 풀때는 항상 방문을 잘 체크하자.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name>이민재</name><email>lmj938@naver.com</email></author><category term="baekjoon" /><category term="백준 알고리즘 BFS" /><summary type="html">문제 해커 김지민은 잘 알려진 어느 회사를 해킹하려고 한다. 이 회사는 N개의 컴퓨터로 이루어져 있다. 김지민은 귀찮기 때문에, 한 번의 해킹으로 여러 개의 컴퓨터를 해킹 할 수 있는 컴퓨터를 해킹하려고 한다.</summary></entry><entry><title type="html">[Java] 객체 지향 프로그래밍과 클래스</title><link href="http://localhost:4000/java/Java-%EA%B0%9D%EC%B2%B4-%EC%A7%80%ED%96%A5-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D%EA%B3%BC-%ED%81%B4%EB%9E%98%EC%8A%A4/" rel="alternate" type="text/html" title="[Java] 객체 지향 프로그래밍과 클래스" /><published>2021-07-20T00:00:00+00:00</published><updated>2021-07-20T00:00:00+00:00</updated><id>http://localhost:4000/java/%5BJava%5D%EA%B0%9D%EC%B2%B4%20%EC%A7%80%ED%96%A5%20%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D%EA%B3%BC%20%ED%81%B4%EB%9E%98%EC%8A%A4</id><content type="html" xml:base="http://localhost:4000/java/Java-%EA%B0%9D%EC%B2%B4-%EC%A7%80%ED%96%A5-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D%EA%B3%BC-%ED%81%B4%EB%9E%98%EC%8A%A4/">&lt;h2 id=&quot;클래스란&quot;&gt;클래스란?&lt;/h2&gt;
&lt;p&gt;클래스는 객체와의 속성과 기능을 코드로 구현한 것으로, 객체를 클래스로 구현하는 것을  &lt;br /&gt;
‘클래스를 정의한다’라고 한다. 클래스를 정의하려면 우선 클래스 이름과 클래스가 가지는 속성,
또는 특성이 필요하다. 객체를 코드로 구현한다는 말이 모호할 수 있으니
‘학생’이라는 객체를 클래스로 살펴보자.&lt;/p&gt;

&lt;p&gt;학생이라는 객체가 있다면, 이 객체가 가지는 일반적인 속성들이 있을것이다.
예를들어 학번, 이름, 학년, 사는곳 정도가 될 수 있는데, 이런 클래스 속성은 특성이라고도 하고
클래스 내부에 변수로 선언한다.&lt;/p&gt;

&lt;p&gt;이렇게 선언하는 클래스의 속성을 ‘멤버 변수’라고한다.&lt;/p&gt;

&lt;p&gt;클래스를 정의하는 문법을 간단히 나타내면 다음과 같다.&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;(접근 제어자) class 클래스 이름 {
    멤버 변수;
    메서드;
}
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;그럼 예를들어 학생이라는 객체의 클래스를 선언해보자.&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;package classpart;

public class Student {
    int studentID;
    String studentName;
    int grade;
    String address;
    
}
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;위의 코드를 보면, 우리는 Student라는 클래스를 선언했다. &lt;br /&gt;
또, 위에서 말한 객체의 속성을 변수로써 클래스 안쪽에 선언했는데,&lt;br /&gt;
자바프로그램은 모든 요소가 반드시 클래스 내부에 존재하여야 한다. &lt;br /&gt;
클래스 외부에는 package 선언과 import 외에는 아무것도 선언하지 않는다.&lt;/p&gt;

&lt;h2 id=&quot;클래스-기능을-구현하는-메서드&quot;&gt;클래스 기능을 구현하는 메서드&lt;/h2&gt;
&lt;p&gt;지금까지는 클래스의 속성인 멤버 변수를 선언했다면, 이번에는 클래스에 관련된 기능을 구현해볼 것이다. 예를 들어 앞서만든 학생의 클래스라면 이를 출력하는 메서드 showStudent를 만들어 보자&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;package classpart;

public class Student {
    int studentID;
    String studentName;
    int grade;
    String address;

    public void showStudent(){
        System.out.println(studentName+&quot;,&quot;+address);
    }
}
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;위처럼 클래스 내부에 학생의 이름과 주소를 출력하는 메서드를 만든 것을 알 수 있다.
아직은 기능으로만 존재하기 때문에 이 메서드를 사용하려면 다른 방법이 추가되어야 한다.
그럼 그 전에 먼저 패키지에 대해서 알아 본 후 기능을 실제로 사용해보도록하다.&lt;/p&gt;

&lt;h2 id=&quot;패키지란&quot;&gt;패키지란?&lt;/h2&gt;
&lt;p&gt;패키지는 간단히 말하면 클래스 파일의 묶음이라고 할 수 있다. &lt;br /&gt;
패키지를 말들게 되면 프로젝트 하위에 디렉토리가 하나 생기게 되는데, 이렇게 만든 패키지는
계층 구조를 가질 수 있다.  만약 학교와 관련된 프로젝트 파일이 있다면  강좌에 관련된 클래스, 학생에 관련된 패키지 등등 서로 관련이있는 클래스를 묶어주는 패키지 파일을 만들어줌으로써 계층구조를 갖도록 해주어 소스코드 관리와 유지보수를 편하게 해줄 수 있다.&lt;/p&gt;

&lt;p&gt;패키지 선언은 맨위에 해줌으로써 이 클래스가 어떤 패키지에 소속되어있는지 알려준다.
클래스 이름이 같다고 해도 패키지 이름이 다르면 클래스 전체의 이름이 다른것이므로 다른 클래스가 된다. 다시 말해서 같은 이름의 클래스라도 다른 패키지에 속해있다면 그 두 클래스는 연관이 없다.&lt;/p&gt;

&lt;h2 id=&quot;함수란&quot;&gt;함수란?&lt;/h2&gt;
&lt;p&gt;함수는 하나의 기능을 수행하는 코드를 미리 만들어 놓은것으로,
예를들어 더하기 함수가 있다면 우리는 덧셈을 할때마다 덧셈에 대한 코드를 일일히 입력할 필요가 
없이 더하기 함수를 불러옴으로써 간단하게 덧셈 연산을 수행할 수 있을 것이다.&lt;/p&gt;

&lt;h3 id=&quot;함수-정의하기&quot;&gt;함수 정의하기&lt;/h3&gt;
&lt;p&gt;더하기 함수를 실제 코드로 작성해보자.
함수의 반환형, 함수이름과 매개변수를 선언해주면, 우리는 함수를 선언할 수 있다.&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;int add(int num1, int num2){
    int result;
    result = num1+num2;
    return result
}
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h3 id=&quot;함수-호출하고-값-반환하기&quot;&gt;함수 호출하고 값 반환하기&lt;/h3&gt;
&lt;p&gt;아까 위에서 학생의 이름을 출력하는 함수를 구현만 하고 사용해보지 않았는데, 이번에는
어떻게 함수를 사용하는지에 대해 알아보도록 하자. &lt;br /&gt;
위에서 정의했던 add함수를 한번 구현하고 호출해보자.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;package classpart;

public class FunctionTest {
    public static void main(String[] args){
        int num1 = 10;
        int num2 = 20;

        int sum = add(num1, num2);
        System.out.println(sum);

    }

    public static int add(int n1, int n2){

        int result = n1 + n2;
        return result;
    }
}
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h2 id=&quot;클래스-기능을-구현하는-메서드-1&quot;&gt;클래스 기능을 구현하는 메서드&lt;/h2&gt;
&lt;p&gt;자바는 함수와 별개로 클래스 내부에서 사용하는 멤버 함수를 따로 지원하는데,  &lt;br /&gt;
이를 메서드라고 한다. 메서드는 멤버변수를 사용하여 클래스의 기능을 구현하는 것으로
함수에 객체지향이 포함된 용어로 이해하면 쉽다.&lt;/p&gt;

&lt;p&gt;아까 만들었던 Student 클래스에 학생의 이름을 가져오는 메서드를 한번 만들어보자&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;package classpart;

public class Student {
    int studentID;
    String studentName;
    int grade;
    String address;

    public void showStudent(){
        System.out.println(studentName+&quot;,&quot;+address);
    }
    public String getStudent(){
        return studentName;
}
}
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;아까 만들었던 클래스에 이처럼 getStudent() 메서드를 추가해보았다.
그럼 이번에는 학생이름을 멤버 변수에 대입해주는   &lt;br /&gt;
setStudentName()메서드를 동일하게 구현해보자.&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;package classpart;

public class Student {
    int studentID;
    String studentName;
    int grade;
    String address;

    public void showStudent(){
        System.out.println(studentName+&quot;,&quot;+address);
    }
    public String getStudent(){
        return studentName;
}
    public void setStudentName(String name){
        studentName = name;
}
}
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;그럼 이제 이 메서드를 어떻게 사용하는지에 대해 알아보자&lt;/p&gt;
&lt;h2 id=&quot;클래스와-인스턴스&quot;&gt;클래스와 인스턴스&lt;/h2&gt;
&lt;p&gt;클래스를 사용하여 프로그램을 실행하려면, 먼저 main() 함수를 알아야 한다.
main() 함수는 자바의 가상머신이 프로그램을 시작하기 위해 호출하는 함수로,
클래스 내부에 만들지만, 클래스의 메서드는 아니다.&lt;/p&gt;

&lt;p&gt;main() 함수에서 클래스를 사용하는 방법은 두가지가 있는데,&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;직접 만든 클래스 내부에 main()을 만드는 방법&lt;/li&gt;
  &lt;li&gt;외부에 테스트용 클래스를 만들어 사용하는 방법
두가지가 있다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;먼저 첫번째 방법으로 방금 만든 Student 클래스에 main() 함수를 작성해보자.&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;package classpart;

public class Student {
    int studentID;
    String studentName;
    int grade;
    String address;

    public void showStudent(){
        System.out.println(studentName+&quot;,&quot;+address);
    }
    public String getStudent(){
        return studentName;
    }
    public void setStudentName(String name){
        studentName = name;
    }

    public static void main(String[] args){
        Student studentLee = new Student();
        studentLee.studentName = &quot;이민재&quot;;

        System.out.println(studentLee.studentName);
        System.out.println(studentLee.getStudent());
    }
    
} 
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&amp;gt;&amp;gt;&amp;gt; 이민재
&amp;gt;&amp;gt;&amp;gt; 이민재
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;이렇게 클래스안에 main() 함수를 선언하여 클래스를 테스트 해보았다.
하지만 이런 방식이라면 거의 모든 클래스에 main() 함수가 존재해야 한다.&lt;/p&gt;

&lt;p&gt;따라서 위에서 설명한 두번째 방법인, 테스트용 클래스를 만들어 메서드를 실행시켜보도록 하겠다.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;package classpart;

public class StudentTest {
    public static void main(String[] args){
        Student studentLee = new Student();
        studentLee.studentName = &quot;이민재&quot;;

        System.out.println(studentLee.studentName);
        System.out.println(studentLee.getStudent());
    }
}
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&amp;gt;&amp;gt;&amp;gt; 이민재
&amp;gt;&amp;gt;&amp;gt; 이민재
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;실행결과가 동일한 것을 알 수 있다.&lt;/p&gt;

&lt;h2 id=&quot;new-예약어로-클래스-생성하기&quot;&gt;new 예약어로 클래스 생성하기&lt;/h2&gt;
&lt;p&gt;클래스를 만들고 실행하는 과정을 살펴보자. &lt;br /&gt;
클래스를 사용하려면 먼저 클래스를 생성해야 하는데, 자바에서 클래스를 생성할때는
new 예약어를 사용하고 이어서 생성자를 써준다.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;클래스형 변수 이름 = new 생성자
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;클래스 자료형 변수를 선언하고 new 예약어로 생성자를 호출하려 대입하면 새로운 클래스가 생성된다.
클래스가 생성된다는 것은 클래스를 실제 사용할 수 있도록 메모리 공간에 올린다는 뜻으로,
이렇게 실제로 사용할 수 있도록 생성된 클래스를 ‘인스턴스’라고 한다.&lt;/p&gt;

&lt;p&gt;우리가 앞에서 사용했던 코드를 다시 한번 보면,&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;Student studentLee = new Student();
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;위 코드는 Student 클래스 자료형으로 StudentLee 변수를 선언하고
new Strudent(); 로 Student 클래스를 생성하여 studentLee에 대입한다는 뜻이다.
이때 studentLee를 참조변수라고 하고, 이 변수가 생성된 인스턴스를 가르키게된다.&lt;/p&gt;

&lt;p&gt;이렇게 인스턴스를 생성하게 되면 이 인스턴스의 멤버 변수와 메서드를 참조하여 사용 할 수 있게된다.
예를들어 우리가 만든 studentLee를 이용하여 멤버변수와 메서드를 사용해보면,&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;studentLee.studentName =&quot;이민재&quot;
System.out.println(studentLee.getStudentName)
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h2 id=&quot;인스턴스와-힙-메모리&quot;&gt;인스턴스와 힙 메모리&lt;/h2&gt;
&lt;p&gt;인스턴스가 생성되는 과정을 조금 더 자세히 살펴보자. &lt;br /&gt;
new Student()를 선언하면 Student가 하나 생성되는데, 각 Student는 &lt;br /&gt;
studentID, studentName 등의 멤버 변수를 갖고있다. 그런데 이 변수들을 저장할 공간이 있어야 한다. 이때 사용되는 메모리를 힙 메모리라고 하는데 클래스 생성자를 하나 호출하면, 인스턴스가
힙메모리에 생성되게 되는 것이다.&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;Student studentLee = new Student();
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;위와 같이 생성된 클래스 (new Student())를 studentLee 변수에 대입하면,  &lt;br /&gt;
인스턴스가 저장된 메모리를 studentLee 변수가 가르키게 된다. &lt;br /&gt;
studentLee는 지역변수이므로 스택 메모리에 생성되게 되고, 인스턴스는 힙메모리에 생성된다.&lt;/p&gt;

&lt;p&gt;따라서 지역변수 studentLee에 생성된 인스턴스를 대입하는 것은 studentLee에 인스턴스가  &lt;br /&gt;
생성된 힙 메모리의 주소를 대입한다는것과 같은 의미이다.&lt;/p&gt;

&lt;h2 id=&quot;정리&quot;&gt;정리&lt;/h2&gt;
&lt;p&gt;객체 지향을 배우다 보니 새로운 용어가 많아 혼란스러울 수 있는 내용들을 정리해 표로 
정리해보았다. 개념들이 이름도 살짝 모호하고 서로 엮여있다보니 헷갈릴 수가 있어
확실하게 어떤 것을 가르키는 개념인지 잘 기억해 두어야겠다.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;용어&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;설명&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;객체&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;객체 지향 프로그램의 대상, 생성된 인스턴스&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;클래스&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;객체를 프로그래밍하기 위해 코드로 만든 상태&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;인스턴스&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;클래스가 메모리에 생성된 상태&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;멤버 변수&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;클래스이 속성, 특성&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;메서드&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;멤버 변수를 이용하여 클래스의 기능을 구현&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;참조 변수&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;메모리에 생성된 인스턴스를 가리키는 변수&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;참조 값&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;생성된 인스턴스의 메모리 주소 값&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;</content><author><name>이민재</name><email>lmj938@naver.com</email></author><category term="java" /><summary type="html">클래스란? 클래스는 객체와의 속성과 기능을 코드로 구현한 것으로, 객체를 클래스로 구현하는 것을 ‘클래스를 정의한다’라고 한다. 클래스를 정의하려면 우선 클래스 이름과 클래스가 가지는 속성, 또는 특성이 필요하다. 객체를 코드로 구현한다는 말이 모호할 수 있으니 ‘학생’이라는 객체를 클래스로 살펴보자.</summary></entry><entry><title type="html">[Java] 생성자</title><link href="http://localhost:4000/java/Java-%EC%83%9D%EC%84%B1%EC%9E%90/" rel="alternate" type="text/html" title="[Java] 생성자" /><published>2021-07-20T00:00:00+00:00</published><updated>2021-07-20T00:00:00+00:00</updated><id>http://localhost:4000/java/%5BJava%5D%20%EC%83%9D%EC%84%B1%EC%9E%90</id><content type="html" xml:base="http://localhost:4000/java/Java-%EC%83%9D%EC%84%B1%EC%9E%90/">&lt;h2 id=&quot;생성자란&quot;&gt;생성자란?&lt;/h2&gt;
&lt;p&gt;다음과 같이 Person과 PersonTest 클래스를 만들어보자&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;package constructor;

public class Person {
    String name;
    float height;
    float weight;
}
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;위와 같은 클래스를 만들었다면 PersonTest라는 클래스를 하나 더 만들어
personLee라는 인스턴스를 선언해보자&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;package constructor;

public class PersonTest {
    public static void main(String[] args){
        Person personLee = new Person()
    }
}
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;여기서 new &lt;strong&gt;Person()&lt;/strong&gt; 의 Person()같은 함수를 생성자라고 한다.
클래스의 멤버 변수는 메서드에 의해 값이 변경될 수도 있지만, 처음 클래스를 생성할 때 값을
정해야 하는 경우도 있다. 생성자가 하는 일은 클래스를 처음 만들 때 멤버 변수나 상수를 초기화하는 것이다.&lt;/p&gt;

&lt;h2 id=&quot;디폴트-생성자&quot;&gt;디폴트 생성자&lt;/h2&gt;
&lt;p&gt;생성자는 오직 클래스를 생성할때만 호출한다.  &lt;br /&gt;
생성자 이름은 클래스 이름과 동일하고, 생성자는 반환값을 갖지 않는다.
하지만 우리가 처음 Person 클래스를 만든 코드를 보면 Person() 생성자가 따로 없다.
하지만 그럼에도 new Person()을 통해 객체를 만들어 줄 수 있었는데, 이는 컴파일러가
자동으로 생성자를 만들어주기 때문이다. 이렇게 자동으로 만들어주는 생성자를 &lt;strong&gt;디폴트 생성자(default constructor)&lt;/strong&gt; 라고 하는데 이는 매개변수도 없고 구현코드가 없다.&lt;/p&gt;

&lt;h2 id=&quot;생성자-만들기&quot;&gt;생성자 만들기&lt;/h2&gt;
&lt;p&gt;필요한 경우 디폴트 생성자가 아닌 프로그래머가 임의로 만든 생성자를 사용할 수도 있는데, 이렇게 하면
인스턴스를 생성할때 반드시 특정 멤버변수의 값을 초기화하면서 하도록 할 경우에 직접 생성자를 구현하여 &lt;br /&gt;
사용하게된다.&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;package constructor;

public class Person {
    String name;
    float height;
    float weight;

    public Person(String pname){
        name = pname;
    }
}
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;이렇게 선언하게 되면 반드시 name을 매개변수로 넣어주어야만 인스턴스의 멤버 변수값을 초기화함과 동시에
인스턴스가 만들어진다. 따라서 우리가 아까 만들었던 PersonTest 클래스는 오류를 나타내게 되는데,
이는 우리가 직접 생성자를 만들어줌으로써 컴파일러가 이제는 자동으로 디폴트 생성자를 만들게 되지 않기 때문이다. 따라서 오류가 나지 않도록 하려면 아래의 코드와 같이 name을 매개변수에 지정을 해주어야 한다.&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;package constructor;

public class PersonTest {
    public static void main(String[] args){
        Person personLee = new Person(&quot;이민재&quot;);
    }
}
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;만약 매개변수를 받아도 되고 안받아도 되도록 하고 싶다면, 우리가 직접 디폴트 생성자도 함께 있도록 추가해주면 된다. 이렇게 하면 생성자 두개중에서 하나를 선택하여 사용 할 수 있게된다.&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;package constructor;

public class Person {
    String name;
    float height;
    float weight;

    public Person(String pname){
        name = pname;
    }
    public Person(){}
}
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h2 id=&quot;생성자-오버로드&quot;&gt;생성자 오버로드&lt;/h2&gt;
&lt;p&gt;이렇게 위처럼 생성자가 두 개 이상 제공되는 경우를 &lt;strong&gt;생성자 오버로드(constructor overload)&lt;/strong&gt; 라고 한다.
필요에 따라 매개변수가 다른 생성자를 여러 개 만들 수 있으며, 경우에 따라서는 아예 디폴트 생성자를 제공하지 않을 수 도 있다.&lt;/p&gt;</content><author><name>이민재</name><email>lmj938@naver.com</email></author><category term="java" /><summary type="html">생성자란? 다음과 같이 Person과 PersonTest 클래스를 만들어보자 ``` package constructor;</summary></entry><entry><title type="html">[Java] 변수와 자료형</title><link href="http://localhost:4000/java/Java-%EB%B3%80%EC%88%98%EC%99%80-%EC%9E%90%EB%A3%8C%ED%98%95/" rel="alternate" type="text/html" title="[Java] 변수와 자료형" /><published>2021-07-20T00:00:00+00:00</published><updated>2021-07-20T00:00:00+00:00</updated><id>http://localhost:4000/java/%5BJava%5D%EB%B3%80%EC%88%98%EC%99%80%20%EC%9E%90%EB%A3%8C%ED%98%95</id><content type="html" xml:base="http://localhost:4000/java/Java-%EB%B3%80%EC%88%98%EC%99%80-%EC%9E%90%EB%A3%8C%ED%98%95/">&lt;h2 id=&quot;변수-선언하여-사용하기&quot;&gt;변수 선언하여 사용하기&lt;/h2&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;int level;
level = 10;
System.out.println(level)
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h2 id=&quot;변수-초기화하기&quot;&gt;변수 초기화하기&lt;/h2&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;int level = 10;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h2 id=&quot;자료형&quot;&gt;자료형&lt;/h2&gt;
&lt;p&gt;자바는 기본자료형과 참조 자료형을 제공하는데, 기본 자료형은 자바 라이브러리에서 기본으로 제공하며, 얼마만큼의 메모리를 어떻게 사용할 것인지가 이미 정해져있다.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;바이트&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;정수형&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;문자형&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;실수형&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;논리형&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;1바이트&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;byte&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;-&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt; &lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;boolean&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;2바이트&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;short&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;char&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;-&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;-&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;4바이트&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;int&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;-&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;float&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;-&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;8바이트&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;long&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;-&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;double&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;-&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;다른 자료형은 모두 다른 언어와 동일한데,
long을 사용할때의 한가지 주의 사항이 있다.&lt;/p&gt;

&lt;p&gt;``
int num1 = 12345678900;&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;

    |   int num1 = 12345678900;

    integer number too large

    



&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;long num2 = 12345678900;&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;

    |   long num2 = 12345678900;

    integer number too large

    


num1의 경우는 int가 표현가능한 범위를 넘어서서 오류가 난다고 하지만,    
num2의 경우는 long 사용하였는데도 왜 오류가 나는 것일까?  

이는 자바가 모든 정수를 기본적으로 int를 사용하여 처리하기 때문이다.   
즉 숫자 12345678900이 들어오면 우선 int로 처리하기 때문에, 숫자뒤에 L을 붙여    long형으로 이 숫자를 처리하도록 컴파일러에게 알려주어야 한다.


&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;long num = 12345678900L;&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;
## 문자 자료형 선언하기


&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;char mychar = ‘A’&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;
문자를 변수에 대입하면 문자 그대로 저장되는 것이 아니라    
그 문자에 해당하는 정수 값(아스키코드 값)이 저장된다.   
 
따라서 아래와 같이 아스키코드를 대입하여도 문자를 대입한 것과 동일하게 인식한다.


&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;char ch1 = ‘A’;
char ch2 = 65;&lt;/p&gt;

&lt;p&gt;System.out.println(ch1);
System.out.println(ch2);&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;
    A
    A


반대로 출력할때 int를 표기해주면, 씌워주면 문자에 해당하는 아스키코드값을 출력한다.


&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;System.out.println((int)ch1)&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;
    65


## 자료형 없이 변수 선언하기
var를 사용하여 변수를 선언하면 자료형을 정확히 명시하지 않고도 변수에 대입되는
값에따라 컴파일러가 자료형을 추측한다.


&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;var num = 10;
var dNum = 10.0;
var str = “hello”&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;
## 상수와 리터럴
자바에서 상수를 선언하고 싶다면, final을 사용하여 선언한다.


&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;final double PI = 3.14;
final int MAX_NUM = 100;&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;
상수는 변하지 않기 떄문에 선언과 동시에 초기화 하는 것이 좋다.

## 형 변환
정수와 실수는 컴퓨터 내부에서 표현되는 방식이 전혀 다르다.
따라서 정수와 실수를 더한다고 할 땐 그대로 연산을 수행 할 수 없고, 하나의 자료형으로
통일 후에 연산해야 한다. 이때 형 변환(type conversion)이 필요하다.


&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;int n = 10;
double dnum = n;&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;
위 처럼 변수 n은 int형이고 dnum은 double형이다.   
형 변환이란 이렇게 변수의 자료형을 같게 해주는 것을 말한다.   

형 변환은 크게 **묵시적 형변환**(자동 형 변환)과 **명시적 형 변환**(강제 형 변환) 
두가지가 있는데, 형 변환의 기본원칙은 다음과 같다.

*  바이트 크기가 작은 자료형에서 큰 자료형으로 형 변환은 자동으로 이루어진다
*  덜 정밀한 자료형에서 더 정밀한 자료형으로 형 변환은 자동으로 이루어진다
    
따라서 이 반대로 강제적 형 변환을 하게 되면, 자료 손실이 발생 할 수가 있다.

### 묵시적 형 변환


&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;int iNum = 20;
float fNum = iNum&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;
### 명시적 형 변환
강제로 형 변환하려면 바꾸고자 하는 타입을 괄호로 명시해주어야 한다.


&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;int iNum = 20;
byte bNum = (byte)iNum
```&lt;/p&gt;</content><author><name>이민재</name><email>lmj938@naver.com</email></author><category term="java" /><summary type="html">변수 선언하여 사용하기 1 2 3 int level; level = 10; System.out.println(level) 변수 초기화하기 1 int level = 10; 자료형 자바는 기본자료형과 참조 자료형을 제공하는데, 기본 자료형은 자바 라이브러리에서 기본으로 제공하며, 얼마만큼의 메모리를 어떻게 사용할 것인지가 이미 정해져있다.</summary></entry><entry><title type="html">목표</title><link href="http://localhost:4000/diary-univ/%EB%AA%A9%ED%91%9C/" rel="alternate" type="text/html" title="목표" /><published>2021-07-18T00:00:00+00:00</published><updated>2021-07-18T00:00:00+00:00</updated><id>http://localhost:4000/diary-univ/%EB%AA%A9%ED%91%9C</id><content type="html" xml:base="http://localhost:4000/diary-univ/%EB%AA%A9%ED%91%9C/">&lt;h2 id=&quot;20210718&quot;&gt;2021.07.18&lt;/h2&gt;
&lt;p&gt;요즘 어느정도 무엇을 하고싶고 그 무엇을 하기위해 어떻게 하고싶은지에 대한 가닥이 잡혀서
목표를 뚜렷하게 정하고 시작해야겠다는 생각이 들었다.&lt;/p&gt;

&lt;p&gt;사실 요 몇달간 열심히 하기는 했지만 더 구체적인 목표와 방향성이 있어야 내가 원하는 바를 이뤄낼 수 있겠다는 생각이 들기도 해서, 아래 구체적인 내용을 연말까지 해내는 것을 우선적인 목표로 진행해보려한다.&lt;/p&gt;

&lt;h3 id=&quot;1일-1커밋&quot;&gt;1일 1커밋&lt;/h3&gt;

&lt;p&gt;사실 1일 1커밋에 대한 이야기를 많이 들어서 깃허브를 처음 시작했을때 할까 고민도 했었지만, 사실 바쁜날은
1일 1커밋을 지키기 위해서 글자하나만 바꾼다던가, 의미없는 커밋을 하는게 큰의미가 있나 싶어서 의미있는 커밋을 남기는게 더 중요하다는 생각에 시도하지 않았었다. 하지만 다른사람들의 1일 1커밋 챌린지 도전에 관한 글들을 보며 느낀건, 1일 1커밋 챌린지는 그저 잔디를 예쁘게 심는것만이 목적이 아닌, 진짜로 내 삶이 개발자의 라이프 스타일이 되어서 항상 어떤것을 오늘 커밋해야할까라는 생각을 하며 살게되는 것에 큰 의미가 있다는 걸 알게 되었다. 뿐만 아니라 채워지는 잔디를 보며 내가 하루하루 해냈다는 성취감이 내일의 나를 더 나아가게 한다는 느낌이 자칫 지치고 힘들 수 있는 공부에 큰 힘이 될 것 같았다.&lt;/p&gt;

&lt;h3 id=&quot;1일-1알고리즘-문제-풀이&quot;&gt;1일 1알고리즘 문제 풀이&lt;/h3&gt;

&lt;p&gt;사실 이 1일 1알고리즘 문제풀이는 위의 1일 1 커밋과 같은 목표라고 볼 수 있는데,
1일 1커밋을 의미없이 글자만 바꾼다거나, 의미없는 변화를 추가하여 굳이 커밋하고 싶지 않았다.
내 깃허브에 박힌 잔디들이 가진 내용은 아무리 그래도 잔디 하나당 블로그 포스트 하나 정도는 되어야 내 자존심이 상하지 않을 것 같았다. 따라서 아무리 바쁜날이 와 커밋을 할 여력이 안될지라도, 아침이나 지하철 이동 시간을 이용해서라도 하루에 한 문제를 꼭 풀어 내어 커밋하겠다는 다짐을 했다.&lt;/p&gt;

&lt;h3 id=&quot;연말까지-한개이상의-프로젝트-완성&quot;&gt;연말까지 한개이상의 프로젝트 완성&lt;/h3&gt;

&lt;p&gt;기본적인 이론들이나 스킬에 대한 공부도 중요하지만, 역시 가장 중요한건 직접 하나의 프로젝트를 시작해보며
거기서 오는 돌발 상황들이나 실무적인 요령을 얻는것도 몹시 중요하다. 따라서 연말내로 하나의 프로젝트를 완성 시킬 생각인데, 중요한것은 내가 현재 능숙한 언어인 파이썬으로 제작하는것이 아니라 오늘부터 새로 공부할 언어인 자바를 사용하여 제작하는 것이다. 사실 코딩테스트만 통과하자는 목적으로 파이썬으로 알고리즘 테스트만 공부할 요령이었는데, 진정한 의미로써의 내 개발자체의 실력을 올리려면 여러가지 언어를 틈틈히 공부해야 하며, 그 중 자바는 절대 빼놓을 수 없는 언어이다.&lt;/p&gt;

&lt;p&gt;따라서 위의 세가지 목표를 중심으로 남은 6개월을 보낼 생각이다. 물론, 휴학 반년 결산에서 한 목표도 함께!
사실 6개월에 모든것을 이루기에는 너무 어려운 일일 수 있지만, 한번쯤은 적은 목표를 쉽게 이루는 것보다 많은 목표를 힘들게 못이뤄보아야 내가 어느 정도 양의 목표를 이룰 수 있을지에 대한 감이 잡힐 것같아서, 
올해의 목표는 살짝 벅차게 잡아보도록 했다.&lt;/p&gt;

&lt;p&gt;요즘따라 의욕이 넘친다. 더 나은 삶을 위해서 더 열심히 살아야겠다는 생각이 드는 요즘이다.&lt;/p&gt;</content><author><name>이민재</name><email>lmj938@naver.com</email></author><category term="diary-univ" /><category term="일기장" /><summary type="html">2021.07.18 요즘 어느정도 무엇을 하고싶고 그 무엇을 하기위해 어떻게 하고싶은지에 대한 가닥이 잡혀서 목표를 뚜렷하게 정하고 시작해야겠다는 생각이 들었다.</summary></entry><entry><title type="html">[BOJ] 1326 폴짝폴짝 (Python3)</title><link href="http://localhost:4000/baekjoon/BOJ-1326-%ED%8F%B4%EC%A7%9D%ED%8F%B4%EC%A7%9D-(Python3)/" rel="alternate" type="text/html" title="[BOJ] 1326 폴짝폴짝 (Python3)" /><published>2021-07-18T00:00:00+00:00</published><updated>2021-07-18T00:00:00+00:00</updated><id>http://localhost:4000/baekjoon/%5BBOJ%5D%201326%20%ED%8F%B4%EC%A7%9D%ED%8F%B4%EC%A7%9D%20(Python3)</id><content type="html" xml:base="http://localhost:4000/baekjoon/BOJ-1326-%ED%8F%B4%EC%A7%9D%ED%8F%B4%EC%A7%9D-(Python3)/">&lt;h2 id=&quot;문제&quot;&gt;문제&lt;/h2&gt;
&lt;p&gt;개구리가 일렬로 놓여 있는 징검다리 사이를 폴짝폴짝 뛰어다니고 있다. 징검다리에는 숫자가 각각 쓰여 있는데, 이 개구리는 매우 특이한 개구리여서 어떤 징검다리에서 점프를 할 때는 그 징검다리에 쓰여 있는 수의 배수만큼 떨어져 있는 곳으로만 갈 수 있다.&lt;/p&gt;

&lt;p&gt;이 개구리는 a번째 징검다리에서 b번째 징검다리까지 가려고 한다. 이 개구리가 a번째 징검다리에서 시작하여 최소 몇 번 점프를 하여 b번째 징검다리까지 갈 수 있는지를 알아보는 프로그램을 작성하시오.&lt;/p&gt;

&lt;h2 id=&quot;입력&quot;&gt;입력&lt;/h2&gt;
&lt;p&gt;첫째 줄에 징검다리의 개수 N(1≤N≤10,000)이 주어지고, 이어서 각 징검다리에 쓰여 있는 N개의 정수가 주어진다. 그 다음 줄에는 N보다 작거나 같은 자연수 a, b가 주어지는 데, 이는 개구리가 a번 징검다리에서 시작하여 b번 징검다리에 가고 싶다는 뜻이다. 징검다리에 쓰여있는 정수는 10,000보다 작거나 같은 자연수이다.&lt;/p&gt;
&lt;h2 id=&quot;출력&quot;&gt;출력&lt;/h2&gt;
&lt;p&gt;첫째 줄에 개구리가 a번 징검다리에서 b번 징검다리로 최소 몇 번 점프하여 갈 수 있는 지를 출력하시오. a에서 b로 갈 수 없는 경우에는 -1을 출력한다.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;예제 입력 1  복사
5
1 2 2 1 2
1 5 
예제 출력 1  복사
1 ## 힌트 1번 징검다리에 1이 쓰여 있으므로, 1의 배수인 4만큼을 한 번에 뛰어 5번 징검다리로 갈 수 있다. ## 풀이 bfs를 이용하여 징검다리에 인덱스 + 징검다리에 적혀있는 크기의 배수들에 모두 방문하여 방문하지 않은 징검다리라면 visited에 1을 더해주는 방식으로 몇번만에 b에 도달했는지가 visited에 1보다 큰 수로 저장되도록 한다.
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;간단한 bfs문제이지만 푸는데 한참걸렸는데, 징검다리가 왼쪽으로도 이동할 수 있다는 사실을 생각을 안하고 계속 풀어서 아무리 반례를 찾으려 해도 찾을 수 가 없어 시간을 너무 많이 잡아먹었다. 문제를 잘읽고 프로그램을 어떤 상황까지 구현해야 하는지 확실하게 풀어야겠다.&lt;/p&gt;

&lt;h2 id=&quot;코드&quot;&gt;코드&lt;/h2&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;collections&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;deque&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;bfs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;q&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;deque&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;q&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;visited&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;q&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;nx&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;q&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;popleft&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;dx&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;abs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bridge&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;dx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bridge&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;abs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bridge&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;dx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bridge&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)):&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;sx&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nx&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sx&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;visited&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;visited&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;visited&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;q&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;c1&quot;&gt;#print('result:', result)
&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;bridge&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()))&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;visited&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;bfs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bridge&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;elif&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;visited&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;5
2 3 1 2 3
5 2
[0, 3, 0, -3]
[0, 3, 0, -3]
1
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name>이민재</name><email>lmj938@naver.com</email></author><category term="baekjoon" /><summary type="html">문제 개구리가 일렬로 놓여 있는 징검다리 사이를 폴짝폴짝 뛰어다니고 있다. 징검다리에는 숫자가 각각 쓰여 있는데, 이 개구리는 매우 특이한 개구리여서 어떤 징검다리에서 점프를 할 때는 그 징검다리에 쓰여 있는 수의 배수만큼 떨어져 있는 곳으로만 갈 수 있다.</summary></entry></feed>