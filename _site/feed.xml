<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.9.0">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2022-12-04T03:28:45+00:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Learnote-Dev</title><subtitle>대학생 예비 개발자 블로그</subtitle><author><name>이민재</name><email>lmj938@naver.com</email></author><entry><title type="html">스포츠에 대하여</title><link href="http://localhost:4000/diary-univ/%EC%8A%A4%ED%8F%AC%EC%B8%A0%EC%97%90-%EB%8C%80%ED%95%98%EC%97%AC/" rel="alternate" type="text/html" title="스포츠에 대하여" /><published>2022-12-03T00:00:00+00:00</published><updated>2022-12-03T00:00:00+00:00</updated><id>http://localhost:4000/diary-univ/%EC%8A%A4%ED%8F%AC%EC%B8%A0%EC%97%90%20%EB%8C%80%ED%95%98%EC%97%AC</id><content type="html" xml:base="http://localhost:4000/diary-univ/%EC%8A%A4%ED%8F%AC%EC%B8%A0%EC%97%90-%EB%8C%80%ED%95%98%EC%97%AC/">&lt;h2 id=&quot;20221203&quot;&gt;2022.12.03&lt;/h2&gt;
&lt;p&gt;어제 새벽 두시, 대한민국이 16강에 진출했다.&lt;/p&gt;

&lt;p&gt;기적같은 추가시간 골을 넣으며 어려운 상황에서 강력한 팀인 포르투갈을 잡고 16강을 갔다.&lt;/p&gt;

&lt;p&gt;올해는 정말 언더독의 해가 아닐까…&lt;/p&gt;

&lt;p&gt;나는 스포츠가 주는 감동에 대해서 인색한 편이었다. &lt;br /&gt;
결국 그들의 성공이지 나의 성공이 아니라고 생각했고, 그렇기에 우리나라가 지거나 이길때 재밌게 보기는 했지만 그래도 그들의 성공은 내 성공이 아니었고 그들의 패배는 나의 패배가 아니었다.&lt;/p&gt;

&lt;p&gt;하지만 어제만큼은 대한민국의 승리가 나의 승리였고, 대한민국의 패배가 나의 패배였다. 그만큼 진짜 너무 감동적인 승리였다.&lt;/p&gt;

&lt;p&gt;어떻게 보면 스포츠라는건 남의 성공을 진심으로 응원하고 남의 패배를 진심으로 아파해야 즐길 수 있는 거라서 공감력이 좀 떨어지는 나한테는 그렇게 재밌지는 않았는데, 뭔가 올해를 거치며 스포츠가 주는 의미에 대해서 깨닫게 되었다.&lt;/p&gt;

&lt;p&gt;사실은 그 사람들은 남의 성공을 응원하는 것이 아니라 남에게 투영한 자신을 응원하고 그렇기 때문에 간절하게 원하는 것이었다. 왜냐면 나도 어제 뭔가 우리나라가 이기면 나도 이길 것 같은 그런 기분이 들었다. ㅜ&lt;/p&gt;

&lt;p&gt;DRX가 언더독의 언더독을 넘어 월즈를 우승하고, 우리나라가 언더독의 언더독을 넘어 16강에 진출하고…&lt;/p&gt;

&lt;p&gt;그들의 꺾이지 않는 마음, 강한 적들 앞에서도 자신감있게 물러서지 않는 마음이 나도 그렇게 될 수 있다는, 그렇게 되어야겠다는 생각이 들었다. 결국 꺾이지 않는마음 뒤에는 하루하루를 지독하게 열심히 고통스럽게 보낸 그들의 노력이 있었을테니까…&lt;/p&gt;

&lt;p&gt;2022년은 어떻게 보면 나라는 사람에 있어서는 실패하고 무너지는 한해였는데, 스포츠는 그렇지 않아서 그들의 성공이 나에게 있어 너무나 큰 응원이 되고 치유가 되었다. 어떻게 보면 당연하고 예상된 성공이 아니라, 실패하고 무너짐을 여러번 반복 후 얻어낸 성공이라 더 감동적이고 와닿았다. 이게 인간과 스포츠가 오랜 역사동안 공존 했던 이유인것 같다.&lt;/p&gt;

&lt;p&gt;나도 실패하고 고통스러운 결과가 결국 값진 목표를 이뤄내기 위한 과정임을 알고, 다가오는 미래를 두려워하지 않고 해내겠다는 마음으로 또 책상에 앉아서 열심히 뭔가를 조금씩 이뤄나가야겠다.&lt;/p&gt;

&lt;p&gt;부정적인 밈과 언어들로 가득했던 2022년이었다고 생각하는데, 그 마지막을 장식하는 밈이 너무 감동적이라서 오글거려도 마지막에다 적어본다.&lt;/p&gt;

&lt;p&gt;중요한것은 꺾이지 않는 마음!&lt;/p&gt;</content><author><name>이민재</name><email>lmj938@naver.com</email></author><category term="diary-univ" /><category term="일기장" /><summary type="html">2022.12.03 어제 새벽 두시, 대한민국이 16강에 진출했다.</summary></entry><entry><title type="html">[Effective Java] 생성자 대신 팩토리 메서드 사용하기</title><link href="http://localhost:4000/effectivejava/%EC%83%9D%EC%84%B1%EC%9E%90-%EB%8C%80%EC%8B%A0-%ED%8C%A9%ED%86%A0%EB%A6%AC-%EB%A9%94%EC%84%9C%EB%93%9C-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0/" rel="alternate" type="text/html" title="[Effective Java] 생성자 대신 팩토리 메서드 사용하기" /><published>2022-12-03T00:00:00+00:00</published><updated>2022-12-03T00:00:00+00:00</updated><id>http://localhost:4000/effectivejava/%EC%83%9D%EC%84%B1%EC%9E%90%20%EB%8C%80%EC%8B%A0%20%ED%8C%A9%ED%86%A0%EB%A6%AC%20%EB%A9%94%EC%84%9C%EB%93%9C%20%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0</id><content type="html" xml:base="http://localhost:4000/effectivejava/%EC%83%9D%EC%84%B1%EC%9E%90-%EB%8C%80%EC%8B%A0-%ED%8C%A9%ED%86%A0%EB%A6%AC-%EB%A9%94%EC%84%9C%EB%93%9C-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0/">&lt;h2 id=&quot;정적-팩토리-메서드란&quot;&gt;정적 팩토리 메서드란?&lt;/h2&gt;
&lt;p&gt;우리가 새로운 인스턴스를 생성할 때, 어떤 방식을 사용하나요?&lt;/p&gt;

&lt;p&gt;보통 new를 통해 생성자를 사용하여 새 인스턴스를 만듭니다. 하지만 이러한 방식은 여러 단점들을 포함하고 있는데요. 이러한 단점들을 극복하고 더 가독성 있는 코드를 위해 &lt;strong&gt;정적 팩토리 메서드&lt;/strong&gt;를 사용하는 것이 더 좋습니다.&lt;/p&gt;

&lt;p&gt;정적 팩토리 메서드는 말그대로 Static Factory Method를 말합니다. 이 함수는 어떠한 비지니스 로직을 포함하지 않고 오직 클래스의 인스턴스만을 반환하는 함수입니다.&lt;/p&gt;

&lt;p&gt;먼저 예로, String 객체를 생성한다고 해봅시다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;str1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;test&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;str2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;valueOf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;test&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;str1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot; &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;str2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위 코드를 보면, 똑같은 test라는 값을 가진 String  객체를 만들었음에도, 다른 방식을 사용했습니다. str1의 경우가 우리에게 익숙한 생성자를 이용하여 인스턴스를 만든 방식이고, str2의 경우가 바로 이번 게시물에서 공부하게 될 &lt;strong&gt;정적 패토리 메서드&lt;/strong&gt;를 이용해서 만든 인스턴스 입니다.&lt;/p&gt;

&lt;p&gt;이 두가지는 어떤 차이가 있을까요?&lt;/p&gt;

&lt;p&gt;valuOf 라는 메서드를 타고들어가서 한번 어떻게 선언 되어 있는지 확인 해봅시다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;valueOf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[])&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위 코드를 보면, 해당 메서드는 static으로 선언되어 있으며 new String() 을 통해 우리가 넣어준 값을 매개변수로 String 객체를 생성해주고 있습니다.&lt;/p&gt;

&lt;p&gt;사실상 생성자 방식과 크게 다른점이 없는 것이죠.&lt;/p&gt;

&lt;p&gt;이렇게 하면 어떤 장점들이 생기길래, 생성자보다 정적 팩터리 메서드를 사용하는 것을 권장하는 걸까요?&lt;/p&gt;

&lt;h2 id=&quot;1-이름을-가질-수-있다&quot;&gt;1. 이름을 가질 수 있다&lt;/h2&gt;
&lt;p&gt;프로그래밍에서 변수명과 함수명을 잘 짓는 것은 매우 중요합니다.&lt;/p&gt;

&lt;p&gt;함수 이름만으로도 이 함수가 어떤일을 하는 함수인지 알 수 있다면, 그 코드가 본인이 작성한 코드가 아니더라도 알아보기가 쉬울 것 입니다.&lt;/p&gt;

&lt;p&gt;그래서 정적 팩토리 메서드를 사용해 생성자에 이름을 붙여줄 수 있는 것은 별것 아닌 것 처럼 보이지만 가독성에 있어 큰 장점이 됩니다.&lt;/p&gt;

&lt;p&gt;예를 들어 봅시다.&lt;/p&gt;

&lt;p&gt;카드라는 클래스를 만들어 본다고 가정해봅시다.&lt;/p&gt;

&lt;p&gt;카드에는 신용카드와 체크카드가 있고, 신용카드의 경우 계좌에 있는 돈을 다써도 limit 만큼의 돈을 신용으로 더 쓸 수 있으며, 체크카드는 limit이 자동으로 0이되어 신용을 사용할 수 없게 한다고 해보겠습니다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Card&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;money&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;limit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Card&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;money&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;limit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;money&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;money&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;limit&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;limit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;대략 이렇게 코드를 작성해볼 수 있겠죠?&lt;/p&gt;

&lt;p&gt;그럼 한번 신용카드와 체크카드 객체를 만들어 봅시다.&lt;/p&gt;

&lt;p&gt;각각 5000원씩의 돈이 들어있고, 신용카드의 경우는 5000의 limit이 더 있어 현금외에도 5000의 돈을 신용으로 더 쓸 수 있다고 해봅시다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nc&quot;&gt;Card&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;creditCard&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Card&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5000&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5000&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;Card&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;checkCard&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Card&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5000&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이렇게 코딩하면 우리가 원하는 기능을 구현해볼 수 있겠네요. 하지만 이렇게 하면, 체크카드의 경우는 무조건 limit이 0이 되어야 하는데, 누군가는 실수로 체크카드임에도 limit을 0으로 설정해놓지 않을 수 있습니다.&lt;/p&gt;

&lt;p&gt;또, 이름이 현재는 creditCard와 checkCard로 되어있지만, 만약 카드의 이름이 minjaeCard라면, 생성자만 보고서는 이 카드가 체크카드인지, 신용카드인지 판별하기 어려울 것 입니다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;(물론 이 경우에는 Card를 상속받는 ChcekCard와 CreditCard라는 클래스를 만들어주는게 더 효율적인 방법일 것 같지만, 예시를 들기 위해서 이렇게 한다고 가정해보겠습니다.)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;그럼 정적 팩터리 메서드를 사용하면 어떻게 될까요?&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Card&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;money&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;limit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Card&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;createCheckCard&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;money&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Card&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;money&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Card&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;createCreditCard&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;money&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;limit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Card&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;money&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;limit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Card&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;money&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;limit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;money&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;money&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;limit&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;limit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nc&quot;&gt;Card&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;creditCard&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Card&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;createCreditCard&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5000&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5000&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;Card&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;checkCard&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Card&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;createCheckCard&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5000&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이렇게 이번에는 정적 패터리 메서드를 사용해서 객체를 생성하게 해보았습니다.&lt;/p&gt;

&lt;p&gt;어떤가요? 장점이 느껴지시나요?&lt;/p&gt;

&lt;p&gt;우선 createCreditCard라는 메서드를 사용해서, 우리가 만들 객체가 “신용카드”임을 헷갈리지 않게 되었으며, 체크카드의 경우는 매개변수에 0이라고 해줄 필요없이 createCheckCard를 사용하면 알아서 매개변수를 money만 받고 limit은 0으로 설정하도록 도와줍니다.&lt;/p&gt;

&lt;p&gt;이름이 생기니 한결 가독성이 나아지고, 어떤 객체가 반환되는지를 더 직관적으로 알 수 있게 되어 실수를 더 줄일 수 있게 되었습니다.&lt;/p&gt;

&lt;h2 id=&quot;2-호출될-때마다-인스턴스를-생성하지-않아도-된다&quot;&gt;2. 호출될 때마다 인스턴스를 생성하지 않아도 된다&lt;/h2&gt;
&lt;p&gt;객체를 생성하는 것은 꽤나 비용이 드는 일입니다.&lt;/p&gt;

&lt;p&gt;객체가 많아질 수록 힙영역에 공간이 빠르게 차고, 이 공간이 빠르게 차면 찰수록 GC도 자주 일어나 성능이 저하될 우려가 큽니다. 그렇기 때문에 같은 객체라면 굳이 여러개 생성하지 말고, 이미 생성되었던 객체를 반환해주는게 더 효과적일 것입니다.&lt;/p&gt;

&lt;p&gt;이것을 디자인패턴에서는 싱글톤 (Singleton) 패턴이라고도 합니다.&lt;/p&gt;

&lt;p&gt;대표적인 예로 Boolean.valueOf 메서드가 있습니다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Boolean&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;java&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;io&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Serializable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Comparable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Boolean&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Boolean&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;TRUE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Boolean&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Boolean&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;FALSE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Boolean&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Boolean&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;valueOf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;TRUE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;FALSE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;위의 코드를 보면 마찬가지로 valueOf로 값을 받아 객체를 생성해주는 정적 팩토리 메서드인데요, 위에서 본 String.valueOf와는 다른 점이 있습니다.&lt;/p&gt;

&lt;p&gt;미리 final로 상수 객체인 TRUE와 FALSE를 만들어 놓은 뒤, 메서드를 실행할때마다 새로운 객체를 생성해주는 것이 아니라, static으로 선언하여 애플리케이션 실행 시에 미리 만들어진 객체를 반환해줍니다.&lt;/p&gt;

&lt;p&gt;이렇게 하면 기존 방식보다 객체를 훨씬 적게 만들 수 있을것 입니다.&lt;/p&gt;

&lt;p&gt;이 방식의 예제를 하나 더 보도록 하겠습니다. 이런 방식으로도 사용 가능합니다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Day&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Day&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;days&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;HashMap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;();&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;days&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;put&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;mon&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Day&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Monday&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;days&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;put&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;tue&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Day&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Tuesday&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;days&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;put&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;wen&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Day&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Wednesday&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;days&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;put&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;thu&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Day&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Thursday&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;days&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;put&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;fri&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Day&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Friday&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;days&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;put&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;sat&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Day&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Saturday&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;days&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;put&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;sun&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Day&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Sunday&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Day&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;day&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;days&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;day&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;day&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Day&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;day&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;day&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;day&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getDay&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;day&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위의 예제를 보면 어차피 요일은 월요일부터 일요일까지 밖에 없음으로, 미리 월요일부터 일요일까지의 Day 객체를 생성해둔 뒤, 이를 해쉬맵에 넣어 놨다가 해당 정적 팩토리 메서드를 호출하면 새로운 객체를 생성하는 것이 아니라, 해당 요일의 값을 String으로 받아 해당 객체를 반환해주는 방식입니다.&lt;/p&gt;

&lt;p&gt;이렇게 하면 객체를 재사용해서 효율적일 뿐만아니라, 실수로 이 7가지 요일 외의 다른 값이 들어오면 컴파일전에 미리 잡아 주어서 더 안전할 것입니다.&lt;/p&gt;

&lt;h2 id=&quot;3-하위-자료형객체를-반환할-수-있다&quot;&gt;3. 하위 자료형객체를 반환할 수 있다&lt;/h2&gt;
&lt;p&gt;정적 팩토리 메서드를 사용하면, 하위 자료형 객체를 반환할 수 있습니다.&lt;/p&gt;

&lt;p&gt;아래 코드를 보도록 합시다.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;public class Card {
    public static Card from(int expenditure) {
        if (0 &amp;lt; expenditure &amp;amp;&amp;amp; expenditure &amp;lt;= 1000) {
            return new Silver();
        }
        if (1000 &amp;lt; expenditure &amp;amp;&amp;amp; expenditure &amp;lt;= 2000) {
            return new Gold();
        }
        if (2000 &amp;lt; expenditure &amp;amp;&amp;amp; expenditure &amp;lt;= 3000) {
            return new Platinum();
        }
        if (3000 &amp;lt; expenditure &amp;amp;&amp;amp; expenditure &amp;lt;= 4000){
            return new Diamond();
        }
        throw new IllegalArgumentException();
    }
}
class Silver extends Card {
}

class Gold extends Card {
}

class Platinum extends Card {
}

class Diamond extends Card {
}
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위 코드는 아까 들었던 예시인 카드의 클래스 인데요, 이번에는 Card가 등급이 있다고 가정해 봅시다.&lt;/p&gt;

&lt;p&gt;지출액에 따라, 1000 이하면 실버등급, 1000에서 2000사이면 골드 등급, 2000에서 3000사이면 플래티넘, 3000에서 4000사이면 다이아몬드라고 해보도록 하죠. 혹여나 이상한 음수나 조건에 맞지않는 값이 들어오면 예외를 출력하도록 하겠습니다.&lt;/p&gt;

&lt;p&gt;정적 팩토리 메서드를 사용하면, Card하나에서 이렇게 하위 객체를 반환하게 할 수 있습니다.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;Card creditCard = Card.from(2500);
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;이렇게 하면, 코드를 작성하는 사람이 카드가 어떤 하위 객체가 있는지, 금액에 따라 어떤 하위 객체로 만들어야 할 지 알 필요없이, 지출액만 입력하면 알아서 등급에 맞는 하위 객체 자료형으로 객체가 생성됩니다.&lt;/p&gt;

&lt;h2 id=&quot;4-입력-매개변수에-따라-매번-다른-클래스의-객체를-반환할-수-있다&quot;&gt;4. 입력 매개변수에 따라 매번 다른 클래스의 객체를 반환할 수 있다.&lt;/h2&gt;
&lt;p&gt;아까 체크카드와 신용카드의 예시를 다시 가져와 설명하도록 하겠습니다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Card&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;money&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;limit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Card&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;createCheckCard&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;money&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Card&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;money&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Card&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;createCreditCard&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;money&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;limit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Card&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;money&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;limit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Card&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;money&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;limit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;money&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;money&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;limit&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;limit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;아까 코드에서는 createCheckCard와 createCreditCard를 사용해서 객체를 생성했습니다.&lt;/p&gt;

&lt;p&gt;이 두개의 정적 팩토리 메서드를, 입력 매개변수에 따라 다른 클래스의 객체를 반환할 수 있다는 정적 팩토리 메서드의 장점을 살려서 하나의 메서드로 통합해주도록 하겠습니다.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;class Card {
    int money;
    int limit;

    public static Card of(int money) {
        return new CheckCard(money, 0);
    }

    public static Card of(int money, int limit) {
        return new CreditCard(money, limit);
    }

    public Card(int money, int limit) {
        this.money = money;
        this.limit = limit;
    }


}

class CreditCard extends Card {
    public CreditCard(int money, int limit) {
        super(money, limit);
    }
}

class CheckCard extends Card {
    public CheckCard(int money, int limit) {
        super(money, limit);
    }
}
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이렇게 하면 어떤 결과가 나올거라고 예상되시나요?&lt;/p&gt;

&lt;p&gt;전에는 createCheckCard로 체크카드를 발급하고, createCreditCard로 신용카드를 발급했다면, 이제는 of 메서드 하나만으로  money와 limit을 모두 기입해주면 신용카드, money만 입력해주면 체크카드, 이런식으로 매개변수의 개수에 따라 다른 객체를 반환하도록 합니다.&lt;/p&gt;

&lt;p&gt;이렇게 정적 팩토리 메서드를 사용하면, 매개변수 갯수에 따라 다른 객체를 반환하게 할 수 있습니다.&lt;/p&gt;

&lt;h2 id=&quot;정적-팩토리-메서드를-작성하는-시점에는-반환할-객체의-클래스가-존재하지-않아도-된다&quot;&gt;정적 팩토리 메서드를 작성하는 시점에는 반환할 객체의 클래스가 존재하지 않아도 된다.&lt;/h2&gt;
&lt;p&gt;아마 이 부분이 가장 이해하기 어려운 부분이라고 생각합니다.&lt;/p&gt;

&lt;p&gt;인터페이스만 존재하는 객체의 구현체가 없어도 정적 팩토리 메소드를 사용하면 그 구현체를 사용할 수 있다는 뜻인데요.&lt;/p&gt;

&lt;p&gt;이 부분은 글로 설명하는 것보다 아래 영상을 보시는 것이 빠를 것 같아서 링크 첨부합니다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;a href=&quot;https://youtu.be/8uryCPDcoqI?t=289&quot;&gt;백기선 유튜브 - 자바, 생성자 대신 정적팩토리의 장점 마무리&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;아마 스프링과 같은 프레임워크의 구조에 대해 공부를 해보신 분들은 이 기능이 왜 프레임워크의 근간이 되는 기능인지 이해가 되실 것 같습니다.&lt;/p&gt;

&lt;p&gt;간단하게 설명하자면 결국은 구현체에 대한 의존성없이 인턴페이스 기반으로 코딩할 수 있도록 도와주는 역할을 한다는 것입니다.&lt;/p&gt;

&lt;h2 id=&quot;정적-팩토리-메서드의-단점&quot;&gt;정적 팩토리 메서드의 단점&lt;/h2&gt;
&lt;p&gt;모든 것이 그렇듯 장점만 있는 방식은 없을 것입니다.&lt;/p&gt;

&lt;p&gt;정적 팩토리 메서드도 마찬가지로 단점들을 갖고 있는데요. 다음과 같습니다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;상속에는 pulic 혹은 protected 생성자가 필요하므로 정적 팩토리 메서드만 제공할 경우, 상속이 불가능하다&lt;/li&gt;
  &lt;li&gt;정적 팩토리 메서드를 다른 개발자들이 찾기 어렵다.&lt;br /&gt;
개발자가 임의로 만든 정적 팩토리 메서드 특성 상, 다른 개발자들이 사용시에 정퍽 팩토리 메서드를 찾기가 어렵다고 생각 할 수 있다.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;따라서 이러한 단점을 해결하기 위해서 보편적으로 사용하는 네이밍 컨벤션을 지켜주어 다른 개발자가 편하게 사용할 수 있도록 해주어야 합니다.&lt;/p&gt;

&lt;p&gt;정적 팩토리 메서드의 네이밍 컨벤션은 다음과 같습니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;from : 하나의 매개변수를 받아 해당 타입의 인스턴스를 반환하는 형변환 메서드&lt;/li&gt;
  &lt;li&gt;of : 여러 매개변수를 받아 적합한 타입의 인스턴스를 반환하는 집계 메서드&lt;/li&gt;
  &lt;li&gt;valueOf : from과 Of의 더 자세한 버전&lt;/li&gt;
  &lt;li&gt;instance 혹은 getInstance : 매개변수로 명시한 인스턴스를 반환하지만, 같은 인스턴스임을 보장 하지 않음&lt;/li&gt;
  &lt;li&gt;create 혹은 newInstance :instance 혹은 getInstance 와 같으나 매번 새로운 인스턴스를 생성해 반환 함을 보장.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;위에서도 from, of, valueOf, create등을 제가 이미 사용하고 있었습니다.&lt;/p&gt;

&lt;h3 id=&quot;getinstance와-newinstance의-차이&quot;&gt;getInstance()와 newInstance()의 차이&lt;/h3&gt;
&lt;p&gt;여기서 getInstance와 newInstance의 설명이 조금 헷갈리신다면, 간단하게 getInstance()의 경우는 아까 배웠던 요일의 예시처럼 이름만 같다면 동일한 객체를 반환해주는 &lt;strong&gt;싱글톤&lt;/strong&gt;객체를 반환하는 메서드일때는 getInstance()로 네이밍을 해주는 것이 좋고, 매번 새로운 객체를 반환하는 메서드일때는 newInstance()으로 이름을 지어주는것이 바람직하다는 것을 뜻합니다.&lt;/p&gt;

&lt;p&gt;이렇게 이펙티브 자바의 첫번째 아이템인 정적 팩토리 메서드를&lt;/p&gt;</content><author><name>이민재</name><email>lmj938@naver.com</email></author><category term="EffectiveJava" /><summary type="html">정적 팩토리 메서드란? 우리가 새로운 인스턴스를 생성할 때, 어떤 방식을 사용하나요?</summary></entry><entry><title type="html">Blocking과 Non-Blocking, 동기와 비동기</title><link href="http://localhost:4000/cs/Blocking%EA%B3%BC-Non-Blocking,-%EB%8F%99%EA%B8%B0%EC%99%80-%EB%B9%84%EB%8F%99%EA%B8%B0/" rel="alternate" type="text/html" title="Blocking과 Non-Blocking, 동기와 비동기" /><published>2022-11-10T00:00:00+00:00</published><updated>2022-11-10T00:00:00+00:00</updated><id>http://localhost:4000/cs/Blocking%EA%B3%BC%20Non-Blocking,%20%EB%8F%99%EA%B8%B0%EC%99%80%20%EB%B9%84%EB%8F%99%EA%B8%B0</id><content type="html" xml:base="http://localhost:4000/cs/Blocking%EA%B3%BC-Non-Blocking,-%EB%8F%99%EA%B8%B0%EC%99%80-%EB%B9%84%EB%8F%99%EA%B8%B0/">&lt;h2 id=&quot;block과-동기의-차이는&quot;&gt;Block과 동기의 차이는?&lt;/h2&gt;
&lt;p&gt;동기와 비동기, Blocking과 Non-Blocking은 언뜻보면 비슷한 개념으로 보여 헷갈릴 수 있는 개념입니다. 아예 같은 개념으로 알고있는 사람들도 있을 정도죠. 오늘은 이  두 개념의 차이에 대해서 적어보려 합니다.&lt;/p&gt;

&lt;p&gt;먼저 간단하게 이 두 차이점을 먼저 설명하자면, 동기와 비동기는 &lt;strong&gt;프로세스의 수행 순서 보장에 대한 개념&lt;/strong&gt;이고, 블로킹과 논블로킹은 &lt;strong&gt;프로세스의 제어권에 대한 개념&lt;/strong&gt;입니다.&lt;/p&gt;

&lt;p&gt;무슨 말인지 직관적으로 감이 안온다면 한번 자세히 이 개념에 대해서 알아보도록 합시다.&lt;/p&gt;

&lt;h2 id=&quot;동기와-비동기&quot;&gt;동기와 비동기&lt;/h2&gt;
&lt;p&gt;먼저, 동기와 비동기의 개념에 대해서 알아봅시다.&lt;/p&gt;

&lt;p&gt;동기는 &lt;strong&gt;현재 작업의 응답과 다음 작업의 요청을 맞추는 것을 말합니다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;예를 들어서, 어떠한 함수안에 다른 함수가 있으면, 해당 함수에게 요청을 보내고, 그 응답을 기다렸다가 해당 함수의 응답을 받아야 다음 작업을 실행 함으로써, 우리가 사용해야할 리턴값을 받을때 다음 작업을 실행하는 것이죠.&lt;/p&gt;

&lt;p&gt;코드로 보도록 합시다.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;boss&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;사장: 출근&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;직원에게 작업 지시&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;employee&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;사장: 퇴근&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;employee&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;101&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;`직원: 지시받은 작업 &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;번 수행`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;boss&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;위에서 설명한 것처럼 boss() 함수안에 employee()라는 함수가 있습니다. boss()가 employee() 함수에게 작업을 지시하면, 직원이 지시받은 작업을 처리하는 것이죠.&lt;/p&gt;

&lt;p&gt;그럼 동기에서는 이 작업이 어떻게 이루어질까요?&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;사장: 출근
직원에게 작업 지시
직원: 지시받은 작업 1번 수행
직원: 지시받은 작업 2번 수행
	        .
		    .
	        .
직원: 지시받은 작업 100번 수행
사장: 퇴근
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;이렇게 순차적으로 직원이 모든 작업을 다 해야만 employee() 함수가 종료되므로 그동안 사장은 기다렸다가 퇴근 할 것입니다.&lt;/p&gt;

&lt;p&gt;그렇다면 비동기는 어떨까요?&lt;/p&gt;

&lt;p&gt;비동기는 &lt;strong&gt;현재 작업의 응답과 다음 작업의 요청을 맞추지 않는 것입니다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;위의 예제로 말하면, 사장은 지시를 내리고 바로 퇴근하고, 직원은 해당 작업을 사장이 퇴근하고 마무리하고 종료하는 것이죠.&lt;/p&gt;

&lt;p&gt;마찬가지로 코드로 보도록 합시다.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;employee&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;maxWorkCount&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;callback&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;workCount&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;interval&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;setInterval&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;workCount&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;maxWorkCount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;callback&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;clearInterval&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;interval&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;workCount&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;`직원: 직원: 지시받은 작업 &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;workCount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;번 수행`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;boss&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;사장: 출근&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;`직원에게 작업지시`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;employee&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;직원: 작업이 마무리 되었습니다.&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;사장: 퇴근&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;boss&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이 경우에는 결과가 어떻게 나오게 될까요?&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;사장: 출근
직원에게 작업 지시
사장: 퇴근
직원: 지시받은 작업 1번 수행
직원: 지시받은 작업 2번 수행
	        .
		    .
	        .
직원: 지시받은 작업 100번 수행
직원: 작업이 마무리 되었습니다.
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;차이를 아시겠나요? 비동기의 경우 boss() 함수안에 employee() 함수가 있음에도, employee() 함수가 끝나지도 않았는데 boss() 함수가 종료됩니다.&lt;/p&gt;

&lt;p&gt;따라서 employee()의 응답을 다음작업인 boss()의 퇴근과 맞추지 않은 것이죠.&lt;/p&gt;

&lt;h2 id=&quot;블락과-논블락&quot;&gt;블락과 논블락&lt;/h2&gt;
&lt;p&gt;자 그럼 이제 블락과 논블락에 대해서 알아봅시다.&lt;/p&gt;

&lt;p&gt;블락과 논 블락은  &lt;strong&gt;제어권&lt;/strong&gt;과 관련이 있다고 했습니다.&lt;/p&gt;

&lt;p&gt;만약 Blocking의 경우에서 Boss()가 employee()를 호출한다면, boss가 employee()에게 제어권을 넘기는 것입니다. 한마디로 함수실행이 멈추는 것이죠.  따라서, 일을 시킨 사장이 퇴근하지 않고 직원이 일을 끝마칠때까지 기다린다는 것이죠.&lt;/p&gt;

&lt;p&gt;이렇게 말로만 보면, 첫번째 예제였던 동기에서의 예제와 똑같다는 생각이 들겁니다. 다시 한번 아까의 예제를 보도록 할까요?&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;boss&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;사장: 출근&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;직원에게 작업 지시&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;employee&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;사장: 퇴근&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;employee&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;101&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;`직원: 지시받은 작업 &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;번 수행`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;boss&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;사장: 출근
직원에게 작업 지시
직원: 지시받은 작업 1번 수행
직원: 지시받은 작업 2번 수행
	        .
		    .
	        .
직원: 지시받은 작업 100번 수행
사장: 퇴근
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;사장이 출근을 하고, 직원에게 작업을 지시한다음, 작업이 끝날때까지 제어권을 넘겨주고 기다립니다. Blocking이죠. 왜 아까는 동기와 Blocking은 다르다고 해놓고, 이제는 왜 결과가 똑같다고 할까요?&lt;/p&gt;

&lt;p&gt;사실 위의 코드는 Blocking + 동기 방식입니다. 보통 Blocking과 동기를 같이 사용하죠. 위 코드는 제어권을 하위 함수에게 넘기는 &lt;strong&gt;Blocking&lt;/strong&gt;인 동시에, 해당 함수의 응답과 다음 작업을 맞추기 위해 기다리는 &lt;strong&gt;동기&lt;/strong&gt;방식입니다.&lt;/p&gt;

&lt;p&gt;자 그렇다면 동기 + Non-Blocking은 어떨까요?&lt;/p&gt;

&lt;p&gt;다음 코드를 보도록 합시다.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;employee&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;101&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;`직원: 지시받은 작업 &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;번 수행`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;yield&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;boss&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;사장: 출근&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;generator&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;employee&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{};&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;done&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;generator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;`사장:  사장 업무 처리...`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;사장: 퇴근&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;boss&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이 코드는 동기 + Non-Blocking 코드입니다.&lt;/p&gt;

&lt;p&gt;어떤 결과가 나올까요?&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;사장: 출근
직원: 지시받은 작업 1번 수행
사장:  사장 업무 처리...
직원: 지시받은 작업 2번 수행
사장:  사장 업무 처리...
            .
		    .
	        .
직원: 지시받은 작업 100번 수행
사장: 사장 업무 처리...
사장: 퇴근
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;어떤가요?&lt;/p&gt;

&lt;p&gt;위 코드는 동기이므로, boss() 함수는 employee()의 응답과 다음 작업을 맞추려하지만, Non-Blocking이기 떄문에 제어권은 넘기지 않습니다. 따라서 자신의 작업을 진행합니다. 자신의 작업을 진행하면서, 직원이 일을 마쳤는지 계속 확인하다가 직원의 작업이 끝나면 타이밍을 맞추어 다음 작업, 퇴근을 진행하는 것이죠.&lt;/p&gt;

&lt;p&gt;차이가 이해가 좀 되시나요?&lt;/p&gt;

&lt;p&gt;그럼 이제 동기 + Blocking, 동기 + Non-Blocking, 비동기 + Non-Blocking을 모두 알아봤습니다.&lt;/p&gt;

&lt;p&gt;그럼 비동기 + Blocking은 무엇일까요?&lt;/p&gt;

&lt;h2 id=&quot;비동기--blocking&quot;&gt;비동기 + Blocking&lt;/h2&gt;
&lt;p&gt;이 방식은 위에서 배운내용을 토대로 생각해봤을때, 이상한 느낌이 들 것 입니다. 비동기이므로, 응답과 다음 작업의 타이밍을 맞출 필요가 없는데, 어차피 Blocking이면 타이밍을 맞추지 않는데도 제어권을 넘겨버려, 결국 하위 함수가 끝날때까지 상위 함수가 자신의 일을 처리할 수 없기 때문이죠.&lt;/p&gt;

&lt;p&gt;이 방식은 일반적인 어플리케이션 레이어에서는 자주 사용되지 않고 Linux와 Unix 운영체제의 I/O 다중화 모델 정도의 저레벨에서 사용되고 있습니다. 그래서 지금까지 예제로 사용하던 사장님과 직원의 예제로 설명하기는 어려운 개념이므로, 따로 다뤄보도록 하겠습니다.&lt;/p&gt;

&lt;p&gt;이 개념이 사용되는 이유는 다음과 같습니다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;동기 &amp;amp; 블록킹 I/O의 경우 직관적이나, 여러 개의 I/O를 동시에 처리할 수 없습니다.&lt;/li&gt;
  &lt;li&gt;논블록킹 I/O는 프로세스들의 작업을 컨트롤하는 것이 까다롭습니다.&lt;/li&gt;
  &lt;li&gt;그렇다고 동기 &amp;amp; 블록킹 I/O와 멀티 프로세싱이나 쓰레딩을 결합해서 쓰자니 자원 문제도 있고 프로세스/쓰레드 간 통신이나 동기화가 어렵습니다.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;그래서 이를 해결하기 위해서 “프로세스를 블록킹 해놓은 상태로 (제어권을 넘겨 작업을 할 수 없는 상태로 만들고) 비동기로 여러개의 I/O를 다중화해서 받자”는 비동기 + Blocking의 개념이 등장한것입니다.&lt;/p&gt;

&lt;p&gt;이 부분은 자세히 다루면 너무 로우한 개념이기도 하고, 특수한 상황에만 쓰이는 개념이므로 여기까지만 간단하게 설명하도록 하겠습니다.&lt;/p&gt;

&lt;h2 id=&quot;마무리&quot;&gt;마무리&lt;/h2&gt;
&lt;p&gt;이제 동기와 비동기, Block과 Non-Block의 차이에 대해서 조금 이해가 가셨나요?&lt;/p&gt;

&lt;p&gt;마지막으로 정리하자면, 동기와 비동기는 &lt;strong&gt;응답과 다음 작업의 타이밍을 맞출래 말래?&lt;/strong&gt; 인 것이고, Block과 Non-Block은 &lt;strong&gt;하위 함수한테 제어권을 넘길래 말래?&lt;/strong&gt;의 개념인 것입니다.&lt;/p&gt;

&lt;p&gt;어려운 개념이지만 위의 코드를 예제로 직접 작동해보면 이해가 더 쉽게 될 것 같습니다.&lt;/p&gt;

&lt;p&gt;이상으로 동기와 비동기, Block과 Non-Block의 차이에 대한 글을 마칩니다.&lt;/p&gt;</content><author><name>이민재</name><email>lmj938@naver.com</email></author><category term="CS" /><summary type="html">Block과 동기의 차이는? 동기와 비동기, Blocking과 Non-Blocking은 언뜻보면 비슷한 개념으로 보여 헷갈릴 수 있는 개념입니다. 아예 같은 개념으로 알고있는 사람들도 있을 정도죠. 오늘은 이 두 개념의 차이에 대해서 적어보려 합니다.</summary></entry><entry><title type="html">면접과 탈락</title><link href="http://localhost:4000/diary-univ/%EB%A9%B4%EC%A0%91%EA%B3%BC-%ED%83%88%EB%9D%BD/" rel="alternate" type="text/html" title="면접과 탈락" /><published>2022-11-09T00:00:00+00:00</published><updated>2022-11-09T00:00:00+00:00</updated><id>http://localhost:4000/diary-univ/%EB%A9%B4%EC%A0%91%EA%B3%BC%20%ED%83%88%EB%9D%BD</id><content type="html" xml:base="http://localhost:4000/diary-univ/%EB%A9%B4%EC%A0%91%EA%B3%BC-%ED%83%88%EB%9D%BD/">&lt;h2 id=&quot;20221109&quot;&gt;2022.11.09&lt;/h2&gt;
&lt;p&gt;어제 네이버웹툰 2차 결과가 나왔다.&lt;/p&gt;

&lt;p&gt;결과는 탈락…&lt;/p&gt;

&lt;p&gt;사실 건방진 생각이지만 면접을 괜찮게 잘 봤다고 생각했고, 3차는 그래도 가지 않을까? 라는 생각에 기대를 많이 하고 있었는데, 예상과 달리 탈락이라는 글자가 써있어서 진짜 잠시동안 눈앞이 깜깜해졌다. 떨어져도 괜찮을거라는 생각과 달리 생각보다도 너무 실망이크고 멘탈이 깨져서 좀 힘들었었다. 솔직히 여자친구랑 같이 안있었다면 울었을것 같다.&lt;/p&gt;

&lt;p&gt;그래서 어제 하루를 하루종일 뭐가 문제였지? 라는 생각을 하며 하루를 보내다가, 결국 마지막에는 여러 생각을 정리하고 괜찮아졌다고 생각하며 잠자리에 들었는데, 오늘 일어나서도 그 생각이 계속나고 머리가 아프고 너무 슬퍼서… 일기를 쓰며 마음을 좀 정리해보려고 책상에 앉았다.&lt;/p&gt;

&lt;p&gt;면접이 어렵고 힘든것은 내가 어디서 실수했고 어떤게 부족했는지 알 수 가 없어서인 것 같다. 심지어 내가 못봤다고 생각했다면 덜했겠지만, 내 입장에서는 만족스럽게 봤다고 생각해서 더더욱… 어제 하루를 온통 그날로 돌아갔을때 더 잘볼 수 있는 경우의 수에 대해서 생각해봤는데, 사실 대답 못한 질문이 하나 있는 것 만으로도 걱정해야 됐던게 아닌가 하는 생각이 들었다. 모르는 질문이더라도 내가 아는 지식내에서 논리적으로 답을 도출하면 좋은 인상을 받을 수 있다고 해서, 모르는 질문을 잘 대처했다고 생각했기 때문에 면접을 잘봤다고 생각했던건데, 사실 가장 좋은건 모르는 질문이 없는 것이고, 그런 사람이 뽑힌게 아닐까. 안일하고 건방졌다. 반성한다…ㅜ&lt;/p&gt;

&lt;p&gt;2021년의 나도 꽤 잘하는 사람이라고 생각했는데, 2022년의 내가 보기에는 형편없는 사람이었듯이, 2022년의 나도 괜찮은 사람이라고 생각하지만 2023년의 내가 보면 또 형편없는 사람일 수 있다는 생각이 들었다. 올해의 나는 유독 뭣도 없으면서 너무 자신감이 찼던것 같다.&lt;/p&gt;

&lt;p&gt;사실 돌아보면 이번년도에 면접 한번만 가보는게 목표였는데, 어느새 욕심이 무럭무럭 자라나 준비가 덜됐음에도 최종 합격이 목표가 되었다. 채용프로세스 기간이 길기도 해서, 면접을 준비하는동안 이 곳에 합격해서 일하는 상상도 많이했기도 하고… 그래서 더 힘들고 멘탈이 깨지는 것 같다.&lt;/p&gt;

&lt;p&gt;솔직히 정말 냉정하게 말해서 준비가 아직 덜 된 것도 사실이고, 내 부족함을 면접으로 포장해보려 해도, 결국 내 성과가 적다면 면접을 아무리 잘봐도 떨어질 수 밖에 없다는 생각이 들었다. 오히려 내 성과를 끌어올리지 않고 면접만 보러다니면, 이유없이 계속 떨어져서 더 괴로울 수도 있을 것이다.&lt;/p&gt;

&lt;p&gt;어차피 이미 지나간일이고, 더 괴로워하고 힘들어한다고 달라질건 아무것도 없다. 굳이 달라질게 있다면 부정적인 방향으로만 달라질거다. 그래서 실패가 주는 괴로움과 아픔은 걷어내고, 실패가 주는 배울점만 가져가기로 했다. 채용과정에 과몰입하지 않고 기계적으로 대하기, 항상 모든 프로젝트와 공부를 면접에서 물어본다면 어떻게 대답할지 생각하고 공부하기, 코딩테스트는 하루에 한문제씩 무조건 풀기…&lt;/p&gt;

&lt;p&gt;사실 지금까지 취준 비스무리한걸 경험하면서 힘들다거나 마음 고생한적이 없었는데, 그럼 아직 취업할 자격이 없다고 생각한다. 옆에 친구들은 다 취준을 하며 힘들어하고 괴로워하며 간절해 하는데, 그렇지 않은 사람이 먼저 붙는건 너무 불공평하다.&lt;/p&gt;

&lt;p&gt;그래도 면접을 준비하며 그동안 몰랐던 것도 많이 알게되고, 절대 알아서 공부 안하고 미루던 CS도 열심히 했으니까 얻은걸 바탕으로 또 열심히 해야지. 그래도 일기를 이렇게 쓰면서 마음을 좀 정리하니까 많이 괜찮아지는 기분인 것 같기도 하고… 생각을 속으로만 하는 것과 글로 실체화 시키는 것은 큰 차이라서, 이렇게 글로 남겨야만 내가 내 자신에게 피드백을 줄 수 있는 것 같다.&lt;/p&gt;

&lt;p&gt;1차면접 합격으로 면접 가보기 목표를 초과 달성했으니까, 이번에는 최종 면접 가보기를 목표로 한번 열심히 해보자…&lt;/p&gt;</content><author><name>이민재</name><email>lmj938@naver.com</email></author><category term="diary-univ" /><category term="일기장" /><summary type="html">2022.11.09 어제 네이버웹툰 2차 결과가 나왔다.</summary></entry><entry><title type="html">겨울냄새</title><link href="http://localhost:4000/diary-univ/%EA%B2%A8%EC%9A%B8%EB%83%84%EC%83%88/" rel="alternate" type="text/html" title="겨울냄새" /><published>2022-11-05T00:00:00+00:00</published><updated>2022-11-05T00:00:00+00:00</updated><id>http://localhost:4000/diary-univ/%EA%B2%A8%EC%9A%B8%EB%83%84%EC%83%88</id><content type="html" xml:base="http://localhost:4000/diary-univ/%EA%B2%A8%EC%9A%B8%EB%83%84%EC%83%88/">&lt;h2 id=&quot;20221105&quot;&gt;2022.11.05&lt;/h2&gt;
&lt;p&gt;안경 렌즈를 맞출일이 있어서, 이왕 밖에 나온김에 다 해결해버리자는 마음에 노트북도 들고나와서 안경점 앞에 카페에서 시간을 보내기로 했다.&lt;/p&gt;

&lt;p&gt;어느덧 추워져서 두꺼운 외투를 입고 밖을 나섰는데, 정말 겨울이 온게 체감이 됐다. 나는 겨울이 오면 뭔가 센치해지는데, 날씨가 추워지면 작년 이맘때 겨울의 기억이 떠오르면서, 문득 어느새 또다시 1년의 마지막에 와있다는 생각이 들곤한다. 어릴 때는 1년이라는 시간이 길고도 길었던 것 같은데, 나이가 들수록 1년이라는 시간이 왜이리 짧은지 모르겠다.&lt;/p&gt;

&lt;p&gt;이번주 화요일에는 2차 면접을 봤다. 운이 좋게도 1차와 2차 사이의 준비기간이 조금 길었는데, 사실 면접준비라는게 뭔가 멘탈적으로나 체력적으로나 에너지가 많이 들어가는 작업이라, 면접이 끝나고는 뭔가 너무나도 후련한 마음이 들어 너무나 뿌듯했다. 잘봤는지는 모르겠지만, 정말 최선을 다해서 그런지 후회가 많이 남던 1차면접과 다르게 잘 마무리했다는 후련함이 더 커서, 면접 끝난 하루치고 너무 기쁘게 하루를 마무리 했던 것 같다. 마음에 있는 커다란 짐덩이가 하나 사라진 느낌…&lt;/p&gt;

&lt;p&gt;면접은 정해진 틀이 없고 뭘 물어볼지 정답이 없는 것 같아서 유독 준비에 에너지가 많이 들어가는 것 같다. 그리고 정신적인 스트레스도 조금 유독 컸는데, 준비를 하면 할수록 뭔가 내가 진짜 진짜로 저 회사에 갈 수 있을까? 하는 생각이 들어서 힘들었던 것 같다. 나라는 사람에 대한 자신감과는 별개로, 사회에 내던져진 내 모습이 생각보다 너무 초라한 것 같은 느낌이 계속 들어서 면접 준비할 동안 틈틈히 내가 썼던 블로그 글을 읽거나 공부시간 기록표를 보며 내가 노력한 시간들에 대해 자신감과 믿음을 가지려고 노력했다. 그래서 그런가 면접이 끝나고도 나름 면접에서의 내 모습이 만족스러워서, 여기서 붙건 떨어진건간에 그래도 내가 노력해온 길이 헛되지 않았구나하는 생각이 들어 속이 좀 후련했던 것 같다.&lt;/p&gt;

&lt;p&gt;그리고 좀 웃긴이야기지만 면접 과정에서 가장 자신감이 떨어졌을때 도움이 됐던게 롤드컵이었는데, DRX가 결승에 가는걸 보고 큰 마음의 위로를 받았다. 스프링 부터 서머내내 하위팀을 전전하던 DRX가 정말 처절하고 치열하게 포기할법도 한 경기들을 포기하지않으며 하나하나씩 이겨내며 가는 모습을 보고 뭔가 가슴이 뜨거워졌다. 아직 애인가 나도…&lt;/p&gt;

&lt;p&gt;DRX도 하나하나 관문을 거쳐가며, 아마 롤드컵 결승을 생각하면 아마 ‘그게 가능하다고?’ ‘우리가 진짜 갈 수 있을까?’ 하는 고뇌와 생각들을 수도없이 했을 것이다. DRX는 롤드컵 결승에 오는 경기내내 모두 언더독이었고 한번도 승리예측 우위를 점한적이 없었으니까… 하지만 그런 것들에 신경쓰지 않고, 눈앞에 있는 당장 한경기에만 집중하고 포기하지 않았기 때문에 그런 결과를 이뤄냈다고 생각한다. 나도 그래서 미래에 어떤 결과가 있는지를 너무 걱정하고 고민하기보다는 현재를 치열하고 처절하게 열심히 하다보면 어느새 저기에 가있을 거라는 믿음으로 현재를 열심히 살기로 다짐하며 면접을 열심히 준비 했던 것 같다. 붙을지 떨어질지는 몰라도, 2차면접을 준비하는 과정에서의 후회는 없다.&lt;/p&gt;

&lt;p&gt;그래서 이제는 조금 편안 마음으로 결과를 기다리며 살짝 여유로워진 마음으로 하루 하루를 보내고 있는중이다. 내일은 DRX의 결승전이 있는 날이다. 물론 DRX는 이번 결승마저 언더독으로 대부분의 전문가들은 상대편의 우승을 예측하고 있지만, 내일 우승해서 내 마음에 한번 더 감동을 주었으면 좋겠는 마음이다.&lt;/p&gt;

&lt;p&gt;조금 오글거릴 수 있는 말이지만 데프트가 ‘중요한 것은 결국 꺾이지 않는 마음’이라는 말을 한게 요즘 자꾸 머릿속을 맴돈다. 나이 26살 먹고 프로게이머가 한말이 가슴을 울리다니…&lt;/p&gt;

&lt;p&gt;나도 혹여나 이번에 떨어진다고 해도 다시 또 일어나서 다른 도전을 하면 되는 거니까 , 너무 가슴졸이며 기다리지는 말자는 말고 지금을 준비하자는 말을 스스로에게  계속 되뇌인다. 중요한 것은 결국 꺾이지 않는 마음이니까.&lt;/p&gt;</content><author><name>이민재</name><email>lmj938@naver.com</email></author><category term="diary-univ" /><category term="일기장" /><summary type="html">2022.11.05 안경 렌즈를 맞출일이 있어서, 이왕 밖에 나온김에 다 해결해버리자는 마음에 노트북도 들고나와서 안경점 앞에 카페에서 시간을 보내기로 했다.</summary></entry><entry><title type="html">공모전 우수상!</title><link href="http://localhost:4000/diary-univ/%EA%B3%B5%EB%AA%A8%EC%9A%B0%EC%88%98%EC%83%81!/" rel="alternate" type="text/html" title="공모전 우수상!" /><published>2022-10-07T00:00:00+00:00</published><updated>2022-10-07T00:00:00+00:00</updated><id>http://localhost:4000/diary-univ/%EA%B3%B5%EB%AA%A8%EC%9A%B0%EC%88%98%EC%83%81!</id><content type="html" xml:base="http://localhost:4000/diary-univ/%EA%B3%B5%EB%AA%A8%EC%9A%B0%EC%88%98%EC%83%81!/">&lt;h2 id=&quot;20221007&quot;&gt;2022.10.07&lt;/h2&gt;

&lt;p&gt;처음에는 나도 나중에 개발자로써 좀 알게된 지식을 강의 플랫폼등에서 판매해보고 싶다는 생각이 들어서, 나도 영상 편집 정도는 익혀보는게 좋겠다는 마음으로 무턱대고 카메라를 구매해서 영상을 촬영해보고 편집해보기를 여러번,  처음에는 간단한 컷편집만 배운다는 마음으로 시작했는데, 자꾸 편집관련 유튜브를 보다보니 어느덧 영상관련 유튜버들이 내 알고리즘을 점령해버렸고, 또 타고타고 여러개를 보다보니 영상제작 자체에 흥미가 생기고 관심이 생겼다.&lt;/p&gt;

&lt;p&gt;컴퓨터 사양이 높아짐에따라 영상 편집이 웬만한 컴퓨터들에서 가능해지고, 핸드폰의 카메라 기술발달로 영상 촬영의 진입 장벽이 매우 떨어진 2022년, 이제 1인 크리에이터들이 공영방송사가 가지는 영향력과 얼추 맞먹는 시대를 살아가고 있는 나에게 있어서, 나를 표현하고 내가 가진 생각을 표출할 수 있는 가장 효과적인 방법인 영상 촬영과 편집을 배우는 것이 큰 도움이 될 것 같았다. 물론 기본적으로 뭘 시작하던 재미가 있어야 시작하는 사람이라서, 당연히 영상 촬영과 편집이 재밌었다.&lt;/p&gt;

&lt;p&gt;어쨌든 영상 촬영과 편집을 공부하다보니 나도 나만의 영상을 만들어보고 싶어졌는데, 유튜브를 올려보자니 피드백도 느리기도 하고 뭘 주제로 영상을 만들어 올려야 할지 감도 안잡히고, 무엇보다 공부하느라 바빠서 조금 강제성이나 제한시간이 있어야 영상을 만들 동력이 생길 것 같았다.&lt;/p&gt;

&lt;p&gt;그래서 눈을 돌린 것이 공모전이었다. 주제도 다 정해주기도 해서 주제 선정에 대한 고민도 없고, 제한날짜도 있으며 잘하면 상금도 주니 나를 움직일 동력까지 충분했다. 그래서 당장 공모전 사이트를 가서 괜찮은 공모전을 뒤져보았고, 친구를 불러서 같이 VisitSeoul 59초 영상 공모전에 참가하게 됐다.&lt;/p&gt;

&lt;p&gt;사실 본격적으로 남에게 보여줄 내 영상작품으로는 첫작품인지라, 처음에는 촬영하는 방법도 어색하고 편집에 대한 감도 너무 없어서 59초 영상 뽑는데 3일이나 걸렸다. 게다가 야외 촬영이 많은데 날씨까지 더워서 정말 개고생을 하면서 찍었던 기억이 난다. 촬영을 하면서 든 생각은, 아 영상촬영자는 진짜 차가 필수구나… 아침마다 카메라와 삼각대 짐벌, 조명등 갖가지 촬영장비를 넣은 군장과도 같은 가방을 메고 뜨거운 서울을 여기저기 이동하다보면 정말 체력이 하나도 남아나지를 않았다.&lt;/p&gt;

&lt;p&gt;근데 인간이 왜 그런지는 모르겠는데, 힘들어 죽겠는데 그만큼 재밌었다. &lt;br /&gt;
촬영 하는날만 해도 진짜 다시는 안찍는다 다시는 안찍는다를 다짐해놓고, 집에 오면 몸이 근질 근질한 현상… “아 내일 재촬영 한번 더 할까?”&lt;/p&gt;

&lt;p&gt;어쩄든 결국, 영상 촬영의 ㅇ자도 모르던 놈들이 그 무거운 가방과 소품을 들쳐메고 서울을 헤집고 다니며 촬영한 영상은 고맙게도 상을 타냈다.&lt;/p&gt;

&lt;p&gt;발표가 언제나나 하루종일 홈페이지를 들락날락 거리다가 2시쯤에 뜬 결과 발표 게시물을 보고 두근거리는 마음으로 들어가서, 당연히 입상했다면 장려상이겠거니~ 하고 장려상을 보는데 내 이름이 없었다. 아쉬운 마음으로 “첫 작품이니까 뭐 그럴수 있지…” 하는 찰나,&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/life/2022-10-07-공모우수상/image1.PNG&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;우수상에 내 이름이 있었다…&lt;/p&gt;

&lt;p&gt;흥분되는 마음으로 바로 같이 고생한 친구에게 전화를 걸어서 스터디 카페인데도 큰 소리로 우수상을 받았노라를 외쳐댔다. (스터디 카페에 나밖에 없었음)&lt;/p&gt;

&lt;p&gt;첫 작품부터 과분한 운을 받아 입상을 해서 너무나 즐거웠고, 사실 영상 찍고 편집하는 과정 자체가 너무 재밌었어서 상금은 기대 많이 안했는데, (물론 사람인지라 사람이라면 할 수 밖에 없는 기대정도는 했다) 장려상도 아닌 우수상을 받아 너무 너무 행복했다.&lt;/p&gt;

&lt;p&gt;면접준비한다고 맨날 하루종일 공부만 하느라 마음이 피폐(?) 해졌었는데, 덕분에 조금 더 열심히 해야겠다는 생각이 들기도 하면서, 누군가에게 상을 받는게 참 큰 기쁘이라는 생각이 들었다.&lt;/p&gt;

&lt;p&gt;이 기세로 면접도 꼭 열심히 준비해서 좋은 결과가 있었으면…&lt;/p&gt;

&lt;p&gt;사실 공모전 하나를 면접때문에 해야하나 말아야 하나 고민중이었는데, 잠을 극단적으로 줄여서라도 참가해봐야겠다는 생각이 들었다.&lt;/p&gt;

&lt;p&gt;어쨌든 오랜만에 공모전 상타기도 했고, 사실 상탄 것 떄문에 너무 흥분상태라 그런가 공부가 좀 안되서 잠깐 마음도 정리할겸 글을 써본다.&lt;/p&gt;

&lt;p&gt;앞으로도 열심히 하는만큼 내 인생에 좋은 결과들이 좀 있었으면!&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;혹시나 영상이 궁금한 분들을 위한 링크 https://www.youtube.com/watch?v=P8d6fBPvhyE&lt;/p&gt;
&lt;/blockquote&gt;</content><author><name>이민재</name><email>lmj938@naver.com</email></author><category term="diary-univ" /><category term="일기장" /><summary type="html">2022.10.07</summary></entry><entry><title type="html">[Programmers] 전화번호 목록 (Python3)</title><link href="http://localhost:4000/programmers/%EC%A0%84%ED%99%94%EB%B2%88%ED%98%B8-%EB%AA%A9%EB%A1%9D/" rel="alternate" type="text/html" title="[Programmers] 전화번호 목록 (Python3)" /><published>2022-09-23T00:00:00+00:00</published><updated>2022-09-23T00:00:00+00:00</updated><id>http://localhost:4000/programmers/%EC%A0%84%ED%99%94%EB%B2%88%ED%98%B8%20%EB%AA%A9%EB%A1%9D</id><content type="html" xml:base="http://localhost:4000/programmers/%EC%A0%84%ED%99%94%EB%B2%88%ED%98%B8-%EB%AA%A9%EB%A1%9D/">&lt;h2 id=&quot;문제-설명&quot;&gt;문제 설명&lt;/h2&gt;
&lt;p&gt;전화번호부에 적힌 전화번호 중, 한 번호가 다른 번호의 접두어인 경우가 있는지 확인하려 합니다.&lt;br /&gt;
전화번호가 다음과 같을 경우, 구조대 전화번호는 영석이의 전화번호의 접두사입니다.&lt;br /&gt;
구조대 : 119&lt;br /&gt;
박준영 : 97 674 223&lt;br /&gt;
지영석 : 11 9552 4421&lt;br /&gt;
전화번호부에 적힌 전화번호를 담은 배열 phone_book 이 solution 함수의 매개변수로 주어질 때, 어떤 번호가 다른 번호의 접두어인 경우가 있으면 false를 그렇지 않으면 true를 return 하도록 solution 함수를 작성해주세요.&lt;/p&gt;

&lt;h2 id=&quot;제한사항&quot;&gt;제한사항&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;phone_book의 길이는 1 이상 1,000,000 이하입니다.
    &lt;ul&gt;
      &lt;li&gt;각 전화번호의 길이는 1 이상 20 이하입니다.&lt;/li&gt;
      &lt;li&gt;같은 전화번호가 중복해서 들어있지 않습니다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;입출력-예&quot;&gt;입출력 예&lt;/h2&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;phone_book&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;return&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;[“119”, “97674223”, “1195524421”]&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;false&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;[“123”,”456”,”789”]&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;true&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;[“12”,”123”,”1235”,”567”,”88”]&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;false&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&quot;입출력-예-설명&quot;&gt;입출력 예 설명&lt;/h2&gt;
&lt;p&gt;앞에서 설명한 예와 같습니다.&lt;/p&gt;

&lt;h3 id=&quot;입출력-예-1&quot;&gt;입출력 예 #1&lt;/h3&gt;
&lt;p&gt;한 번호가 다른 번호의 접두사인 경우가 없으므로, 답은 true입니다.&lt;/p&gt;

&lt;h3 id=&quot;입출력-예-2&quot;&gt;입출력 예 #2&lt;/h3&gt;
&lt;p&gt;첫 번째 전화번호, “12”가 두 번째 전화번호 “123”의 접두사입니다. 따라서 답은 false입니다.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;solution&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;phone_book&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;phone_book&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;sorted&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;phone_book&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;phone_book&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;phone_book&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;phone_book&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;phone_book&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])]:&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;
        
    
        
        
        
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;n&quot;&gt;solution&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;231&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;789&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;0
1





True
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;문제풀이&quot;&gt;문제풀이&lt;/h2&gt;

&lt;p&gt;이 문제는 얼핏보면 for문 두개 돌려서 풀면 될것처럼 보이지만 코테가 다 그렇듯이 for문 두개를 돌리면 무조건 시간초과가 난다. 그래서 어차피 전화번호가 다른 전화번호에 포함된 경우가 아닌 접두어인지를 묻는 문제이기 때문에, 더 긴 번호가 짧은 번호의 접두어가 될 수 없다. 따라서 정렬을 통해 접두어의 가능성이 있는 번호들을 모아주고, 이를 다음 하나의 번호에만 체크해봄으로써 반복문의 횟수를 줄여 해결할 수 있다.&lt;/p&gt;</content><author><name>이민재</name><email>lmj938@naver.com</email></author><category term="programmers" /><summary type="html">문제 설명 전화번호부에 적힌 전화번호 중, 한 번호가 다른 번호의 접두어인 경우가 있는지 확인하려 합니다. 전화번호가 다음과 같을 경우, 구조대 전화번호는 영석이의 전화번호의 접두사입니다. 구조대 : 119 박준영 : 97 674 223 지영석 : 11 9552 4421 전화번호부에 적힌 전화번호를 담은 배열 phone_book 이 solution 함수의 매개변수로 주어질 때, 어떤 번호가 다른 번호의 접두어인 경우가 있으면 false를 그렇지 않으면 true를 return 하도록 solution 함수를 작성해주세요.</summary></entry><entry><title type="html">[Programmers] 야근지수 (Python3)</title><link href="http://localhost:4000/programmers/%EC%95%BC%EA%B7%BC%EC%A7%80%EC%88%98/" rel="alternate" type="text/html" title="[Programmers] 야근지수 (Python3)" /><published>2022-09-23T00:00:00+00:00</published><updated>2022-09-23T00:00:00+00:00</updated><id>http://localhost:4000/programmers/%EC%95%BC%EA%B7%BC%EC%A7%80%EC%88%98</id><content type="html" xml:base="http://localhost:4000/programmers/%EC%95%BC%EA%B7%BC%EC%A7%80%EC%88%98/">&lt;h2 id=&quot;문제-설명&quot;&gt;문제 설명&lt;/h2&gt;
&lt;p&gt;회사원 Demi는 가끔은 야근을 하는데요, 야근을 하면 야근 피로도가 쌓입니다. 야근 피로도는 야근을 시작한 시점에서 남은 일의 작업량을 제곱하여 더한 값입니다. Demi는 N시간 동안 야근 피로도를 최소화하도록 일할 겁니다.Demi가 1시간 동안 작업량 1만큼을 처리할 수 있다고 할 때, 퇴근까지 남은 N 시간과 각 일에 대한 작업량 works에 대해 야근 피로도를 최소화한 값을 리턴하는 함수 solution을 완성해주세요.&lt;/p&gt;

&lt;h2 id=&quot;제한사항&quot;&gt;제한사항&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;works는 길이 1 이상, 20,000 이하인 배열입니다.&lt;/li&gt;
  &lt;li&gt;works의 원소는 50000 이하인 자연수입니다.&lt;/li&gt;
  &lt;li&gt;n은 1,000,000 이하인 자연수입니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;입출력-예&quot;&gt;입출력 예&lt;/h2&gt;
&lt;p&gt;|works|n|result|&lt;br /&gt;
|:—:|:—:|:—:|&lt;br /&gt;
|[4, 3, 3]|4|12|&lt;br /&gt;
|[2, 1, 2]|1|6|&lt;br /&gt;
|[1, 1]|3|0|&lt;/p&gt;

&lt;h2 id=&quot;입출력-예-1&quot;&gt;입출력 예 #1&lt;/h2&gt;
&lt;p&gt;n=4 일 때, 남은 일의 작업량이 [4, 3, 3] 이라면 야근 지수를 최소화하기 위해 4시간동안 일을 한 결과는 [2, 2, 2]입니다. 이 때 야근 지수는 22 + 22 + 22 = 12 입니다.&lt;/p&gt;

&lt;h2 id=&quot;입출력-예-2&quot;&gt;입출력 예 #2&lt;/h2&gt;
&lt;p&gt;n=1일 때, 남은 일의 작업량이 [2,1,2]라면 야근 지수를 최소화하기 위해 1시간동안 일을 한 결과는 [1,1,2]입니다. 야근지수는 12 + 12 + 22 = 6입니다.&lt;/p&gt;

&lt;h2 id=&quot;입출력-예-3&quot;&gt;입출력 예 #3&lt;/h2&gt;
&lt;p&gt;남은 작업량이 없으므로 피로도는 0입니다.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;solution&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;works&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;sum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;works&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
    
    &lt;span class=&quot;n&quot;&gt;time&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;sum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;works&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;baseTime&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;time&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;works&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; 
    &lt;span class=&quot;n&quot;&gt;remainTime&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;time&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;works&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;timeList&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;baseTime&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;works&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))]&lt;/span&gt;
    
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;works&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;works&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)):&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;timeList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;works&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;remainTime&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;baseTime&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
            
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;remainTime&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;remainTime&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;remainTime&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;timeList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;works&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
    
    &lt;span class=&quot;n&quot;&gt;answer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
    
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;timeList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;w&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;timeList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;answer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;w&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;w&lt;/span&gt;
        
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;answer&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;n&quot;&gt;solution&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;[2, 2, 2, 3]





21
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;1
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;1
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;1
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name>이민재</name><email>lmj938@naver.com</email></author><category term="programmers" /><summary type="html">문제 설명 회사원 Demi는 가끔은 야근을 하는데요, 야근을 하면 야근 피로도가 쌓입니다. 야근 피로도는 야근을 시작한 시점에서 남은 일의 작업량을 제곱하여 더한 값입니다. Demi는 N시간 동안 야근 피로도를 최소화하도록 일할 겁니다.Demi가 1시간 동안 작업량 1만큼을 처리할 수 있다고 할 때, 퇴근까지 남은 N 시간과 각 일에 대한 작업량 works에 대해 야근 피로도를 최소화한 값을 리턴하는 함수 solution을 완성해주세요.</summary></entry><entry><title type="html">하반기 채용시작</title><link href="http://localhost:4000/diary-univ/%ED%95%98%EB%B0%98%EA%B8%B0-%EC%B1%84%EC%9A%A9%EC%8B%9C%EC%9E%91/" rel="alternate" type="text/html" title="하반기 채용시작" /><published>2022-09-09T00:00:00+00:00</published><updated>2022-09-09T00:00:00+00:00</updated><id>http://localhost:4000/diary-univ/%ED%95%98%EB%B0%98%EA%B8%B0%20%EC%B1%84%EC%9A%A9%EC%8B%9C%EC%9E%91</id><content type="html" xml:base="http://localhost:4000/diary-univ/%ED%95%98%EB%B0%98%EA%B8%B0-%EC%B1%84%EC%9A%A9%EC%8B%9C%EC%9E%91/">&lt;h2 id=&quot;20220909&quot;&gt;2022.09.09&lt;/h2&gt;
&lt;p&gt;비교적 상반기 채용이 끝나고 잠잠했던 기간이 끝나 다시 기업들이 하나둘씩 하반기 채용공고를 내기 시작했다. 나도 다시 템포를 맞춰 더 바쁘게 달려갈 마음가짐을 갖추기위해 올라온 공고의 회사들의 채용설명회를 찾아보고 정보를 찾아보기 시작했다. 이렇게 하나둘 기업들의 회사들의 정보를 찾다보면 괜스레 무대에 오르기 전 기분처럼 긴장이되고 가슴이 설렌다. 정보를 찾다보면 자연스레 접하게되는 합격 후기들을 보면 잠시나마 내가 이 회사에 합격한 미래를 상상하게되며 가슴한켠이 간질간질하다. 하지만 이런 설렘은 사실 너무 큰 기대이기도 하기 때문에 기대를 하지않으려 애써 노력하곤한다… 기대가 크면 실망도 큰 법이니까 ㅜ&lt;/p&gt;

&lt;p&gt;모두 취업을 하다보면 어느정도 자신의 가치와 비전을 조금씩 손해보면서 회사에 맞춰가기 마련인데, 나는 아직까지는 세상한테 덜 혼나봐서 그런가 벌써 양보하고싶지는 않은 마음이다. 이 회사가 추구하는 방향이 정말 나와 같아서 정말 여기서 일하는 상상을 하면 가슴이 뛰고 설레는, 그런 회사에서 일하고싶은다. 물론 그만큼 내가 더 노력해서 회사쪽에서도 나를 볼때 가슴이 뛰고 설레서 이 사람과 일하고 싶다는 생각이 들수 있도록 더 멋진 사람이 되어야겠지만…&lt;/p&gt;

&lt;p&gt;네이버웹툰 채용설명회를 보다가 괜스레 생각이 많아지기도 하고, 상반기에 서류랑 코테광탈로 너무 많이 얻어맞아서 개발이 조금 미워지기도 하고 너무 서운해서 살짝 매너리즘에 빠졌었는데, 오랜만에 자극이 좀 되기도 하고 내가 왜 개발자가 되고싶어했는지 다시금 생각이 나서 오랜만에 글을 좀 써봤다. 다시 블로그도 열심히 하고 좀 더 열정적으로 살아봐야겠다.&lt;/p&gt;</content><author><name>이민재</name><email>lmj938@naver.com</email></author><category term="diary-univ" /><category term="일기장" /><summary type="html">2022.09.09 비교적 상반기 채용이 끝나고 잠잠했던 기간이 끝나 다시 기업들이 하나둘씩 하반기 채용공고를 내기 시작했다. 나도 다시 템포를 맞춰 더 바쁘게 달려갈 마음가짐을 갖추기위해 올라온 공고의 회사들의 채용설명회를 찾아보고 정보를 찾아보기 시작했다. 이렇게 하나둘 기업들의 회사들의 정보를 찾다보면 괜스레 무대에 오르기 전 기분처럼 긴장이되고 가슴이 설렌다. 정보를 찾다보면 자연스레 접하게되는 합격 후기들을 보면 잠시나마 내가 이 회사에 합격한 미래를 상상하게되며 가슴한켠이 간질간질하다. 하지만 이런 설렘은 사실 너무 큰 기대이기도 하기 때문에 기대를 하지않으려 애써 노력하곤한다… 기대가 크면 실망도 큰 법이니까 ㅜ</summary></entry><entry><title type="html">어느새 2학기</title><link href="http://localhost:4000/diary-univ/%EA%B0%9C%EA%B0%95%EA%B3%BC-%EC%9A%94%EC%A6%98/" rel="alternate" type="text/html" title="어느새 2학기" /><published>2022-08-29T00:00:00+00:00</published><updated>2022-08-29T00:00:00+00:00</updated><id>http://localhost:4000/diary-univ/%EA%B0%9C%EA%B0%95%EA%B3%BC%20%EC%9A%94%EC%A6%98</id><content type="html" xml:base="http://localhost:4000/diary-univ/%EA%B0%9C%EA%B0%95%EA%B3%BC-%EC%9A%94%EC%A6%98/">&lt;h2 id=&quot;20220829&quot;&gt;2022.08.29&lt;/h2&gt;
&lt;p&gt;오랜만에 일기를 쓴다. 일기를 잘쓰겠다고 다짐하고 안쓰고 다짐하고 안쓰고 무한반복의 굴레…&lt;/p&gt;

&lt;p&gt;자몽 프로젝트가 막바지에 이르고 좀 개발할게 없기도 하고, 무엇보다 최근에 영상편집에 빠져서 근 한달간은 영상관련된걸 열심히 하며 보냈다. 아무래도 일기도 개발블로그다 보니 개발을 안하니까 잘 안썼다;; 그래도 일기가 없다고 해서 게으르게 산것은 아니었으니 봐주기로한다.&lt;/p&gt;

&lt;p&gt;개발자라는 직업은 아주 재밌기도 하고 적성에 잘맞지만, 뭔가 살짝 부족한 느낌이 있었는데 영상편집에서 그 부족한 느낌을 채워주는 무언가를 발견했다. 나름 예술적인 감각이 필요하기도 해서 재밌기도 하고, 어렴풋이 디지털 노마드의 꿈을 살짝 꾸는 나에게는 코딩과 함께 돈이 될만한 무언가가 필요했는데 영상이 그걸 충족시키는 것 같아서 흥미가 생겨 한달간을 영상에 빠져지냈다.&lt;/p&gt;

&lt;p&gt;그래서 솔직히 개발 장비에도 돈을 많이 쓴편인데, 장비병 어디 안간다고 영상도 입문 부터 좀 장비에 꽂혀서 지금은 어느정도 괜찮은 퀄리티의 영상을 만들만한 장비는 대략 갖췄다. 한 200만원정도의 셋팅?? 괜찮은 퀄리티의 영상을 만드는데 필요한것들을 꼽아보자면 대략 카메라, 렌즈, 짐벌 정도라고 생각하는데, 카메라는 중고로 소니 a6400을 번들렌즈와 함께 구매했고, 렌즈도 마찬가지로 중고로 16mm화각 하나를 구매했다. 짐벌을 중국 기업 제품으로 저렴하게 마찬가지로 중고로 10만원에 구매완료. 거기다 파이널컷을 학생라이센스로 구매해서 기본적인 영상편집 장비 수준을 갖췄다.&lt;/p&gt;

&lt;p&gt;솔직히 아이폰으로도 괜찮은 영상 충분히 만들 수 있어서 시작부터 이렇게 안사고 우선 만들어보고 결정해도 되는데, 나는 심성이 그냥 시작부터 내가 원하던 퀄리티의 결과물이 안나오면 너무 만족이 안되는 스타일인것 같다. 편집이 입문자 수준인것은 참아도, 장비에서오는 입문자스러움은 참을 수 없다. 좀 큰돈을 투자하긴 했어도, 우선 카메라 장비들은 짐벌을 제외하고는 감가가 굉장히 적기도 하고, 무엇보다 이 장비들이 결국 내게 돈을 벌어줄거라는 확신이 있어서 과감하게 투자했다. 요즘은 그래서 영상편집이 가장 재밌는 취미이자 공부였다.&lt;/p&gt;

&lt;p&gt;사실 원래도 영화를 보고나서 그에 대한 해석이나 연출을 찾아보는 것을 좋아했는데, 영상을 공부하다보니 이 영화라는 작품들이 얼마나 디테일하게 카메라 연출을 하는지 알게되니까 더 재밌어졌다. 유튜브 skim on west라는 채널을 이전에도 재밌어서 몇개 영상을 본적이 있었는데, (아마 아케인 리뷰를 찾다가 봤던 것 같다) 영상을 공부하기 시작하고 보니 그 채널이 리뷰 수준이 아니라 영상 편집과 촬영의 기본기를 너무나 잘 설명 해주는 채널이어서 큰 도움이 되었다. 혹시나 영상편집 공부하거나 관심있는 사람들은 skim on west 채널 꼭 보시길 바란다.&lt;/p&gt;

&lt;p&gt;그래서 이렇게 구매한 장비와 공부한 지식들로 첫 공모전에 도전중이다. 대충 서울을 홍보하는 공모전인데, 친구 한명이랑 저번주 이번주를 서울 곳곳을 땡볕에 다니며 촬영을 하고 어느새 편집 마무리 작업 중에 있다. 막상 직접 찍어보니 차가 없으니까 장비 다 들고 지하철 타고 다니는것도 힘들고 날씨는 또 어찌나 덥고 촬영할거는 얼마나 많은지 피곤해서 쓰러지는 줄 알았지만, 그래도 최근에 했던 일중에 가장 즐거웠다. 근데 이렇게 힘들었는데 장려상도 못타면 조금 마음이 아플것 같기는 하지만…&lt;/p&gt;

&lt;p&gt;추가로 최근에 전동 스케이트보드를 하나 구매했는데, 요즘 밤이되면 보드 때문에 몸이 근질근질한다. 굳이 보드를 들고가서 청라역에서 집까지 타고오기도 하며 라이딩을 하곤하는데, 정말 바람을 맞으며 타다보면 스트레스가 풀리는 기분이다. 그래서 요즘 가장 재밌는 취미중에 하나가 보드 라이딩인데, 대신 뒤지게 위험하다. 타면서도 항상 삐끗하면 뒤질수도 있다는 불안한 마음이 드는데, 사실 이 기분때문에 재밌는게 아닌가 싶다. 어쨌든 넓디넓은 청라에서 한 2키로 내지를 다닐일이 꽤 많은데, 매번 버스타기도 뭐했어서 근거리 이동수단으로 잘 사용하고 있다. 청라역에서도 한 20분이면 집에 도착해서, 버스 끊길때까지 놀고 와도 된다. (물론 최근 2-3년간 버스끊길때까지 논적 한번도 없다. 사실 앞으로도 없을것 같다) 뭐 이것저것 말이 많았는데 전동보드 짱짱이라는 소리다.&lt;/p&gt;

&lt;p&gt;하지만 이렇게 뭐 이것저것 해보고 놀던  좋은 시절은 끝나버리고 오늘 드디어 개강을 해버렸다. 막학기라 뭐 학점도 얼마 없고 학교도 일주일에 한두번 가겠지만, 그래도 마지막 학기를 잘 마무리 하는 마음으로 다시 개발도 좀 시작하고, 새로운 공부인 영상도 잘 해가면서 2022년을 또 달려보도록 하려고 한다. 이민재 화이팅!&lt;/p&gt;</content><author><name>이민재</name><email>lmj938@naver.com</email></author><category term="diary-univ" /><category term="일기장" /><summary type="html">2022.08.29 오랜만에 일기를 쓴다. 일기를 잘쓰겠다고 다짐하고 안쓰고 다짐하고 안쓰고 무한반복의 굴레…</summary></entry></feed>