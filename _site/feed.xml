<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.9.0">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2022-05-15T06:00:49+00:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Learnote-Dev</title><subtitle>대학생 예비 개발자 블로그</subtitle><author><name>이민재</name><email>lmj938@naver.com</email></author><entry><title type="html">5월초의 이것저것</title><link href="http://localhost:4000/diary-univ/%EC%B9%B4%EC%B9%B4%EC%98%A4%EC%9D%B8%ED%84%B4-%EC%BD%94%EB%94%A9%ED%85%8C%EC%8A%A4%ED%8A%B8/" rel="alternate" type="text/html" title="5월초의 이것저것" /><published>2022-05-10T00:00:00+00:00</published><updated>2022-05-10T00:00:00+00:00</updated><id>http://localhost:4000/diary-univ/%EC%B9%B4%EC%B9%B4%EC%98%A4%EC%9D%B8%ED%84%B4%20%EC%BD%94%EB%94%A9%ED%85%8C%EC%8A%A4%ED%8A%B8</id><content type="html" xml:base="http://localhost:4000/diary-univ/%EC%B9%B4%EC%B9%B4%EC%98%A4%EC%9D%B8%ED%84%B4-%EC%BD%94%EB%94%A9%ED%85%8C%EC%8A%A4%ED%8A%B8/">&lt;h2 id=&quot;20220510&quot;&gt;2022.05.10&lt;/h2&gt;
&lt;p&gt;지난 주 토요일에 카카오 코딩테스트를 봤다. 일요일은 어버이날이라 집에 친척들이 오셔서 회좀 먹고, 월요일은 여자친구랑 데이트를 했다.&lt;/p&gt;

&lt;p&gt;월요일에는 집앞에 산책을 좀 다녀왔는데, 우리집앞이 이렇게 예쁜줄 몰랐다. 사실 이사온지 거의 1년이 다되가는데 아파트 앞에 상가말고는 가본적이 없어서… 단독주택들이 이렇게 많이 예쁘게 지어지고 새로운 카페가 많이 생긴줄 몰랐었다.&lt;/p&gt;

&lt;p&gt;집앞에 있는 새로 생긴(물론 생긴지 꽤 됐는데 내가 몰랐던) 카페에서 날라리디스코(?) 라는 이름의 원두로 내린 커피도 한잔시켰는데, 나는 원래 강배전 커피를 좋아해서 산미가 거의 없는 커피를 마시다가 이번에는 한번 산미가 있는 커피로 시켜봤는데 그것도 나름대로 맛이 있어서 좋았다. 물론 과일향이 난다고 하는데 그런건 하나도 모르겠고…&lt;/p&gt;

&lt;p&gt;요즘은 맨날 먹던것 보다 새로운 걸 먹는게 더 재밌는 것 같다.&lt;/p&gt;

&lt;p&gt;최근에 방구석에서 공부만 하느라 학교가는거 외에는 밖에 잘 안나갔었는데, 어제 날씨가 너무 좋아서 진작 밖에 산책이라도 좀 다닐걸 하는 생각을 좀 했다.&lt;/p&gt;

&lt;p&gt;5월 이즈음의 날씨가 1년중에 가장 선선하고 좋은것 같다.&lt;/p&gt;

&lt;p&gt;카카오 코딩테스트는 2.5솔을 했다. 안정권은 아니고, 정말정말 운이좋다면 면접을 볼 수 있을 정도? 기대는 안하려고 한다. 최근에 나름 하루에 한문제씩 코딩테스트를 풀려고 다짐하고나서 몇일을 그렇게 풀다가, 그게 너무 괴로워서 흐지부지 되었는데, 코테가 끝나고는 또 열심히 하지 못한 내 자신이 너무 슬펐다.&lt;/p&gt;

&lt;p&gt;그래서 씁쓸하기도 하고… 생각도 정리할겸 요 이틀간에는 책상에 한번도 안 앉았었는데, 이 잠깐의 휴식이 뭐라고 그래도 좀 마음도 편해지고, 재충전이 된 것 같다는 생각이 좀 든다.&lt;/p&gt;

&lt;p&gt;최근에 공부를 너무 억지로 사로잡혀서 강박적으로 한 느낌이 없지 않아 있는데, 매일 매일 시간을 측정하다 보니까 자꾸 시간으로만 내 지표를 평가하려고 해서 그게 좀 나를 괴롭혔던 것 같다. 반성한다.&lt;/p&gt;

&lt;p&gt;그렇다고 이제는 시간을 측정안하겠다 이런건 아니고 시간도 시간인데 그래도 시간을 채우는 것 그 자체가 본질을 흐려버린 느낌이라서, 다시 생각을 좀 정리해보자는 말이다.&lt;/p&gt;

&lt;p&gt;눈깜짝하니 또 5월, 1년의 반을 코앞에 두고 있다. 문득 작년 12월쯤 우테코를 떨어지고 맘아팠던 2020년의 말이 생각난다. 난 그때보다 얼만큼 더 나은 사람이 되었을까…&lt;/p&gt;

&lt;p&gt;최근에는 운동을 다시 시작했다. 운동하는게 너무너무 싫어서 하다가 포기하고, 또 다시 하다가 흐지부지되고의 반복이었는데, 이제는 좀 궤도에 올라서 지난 2주간은 거의 매일같이 헬스장에 가서 운동을 했다.&lt;/p&gt;

&lt;p&gt;사실 취준만큼 사람의 자존감이 깎여나가는 시기가 있나 싶다. 내 노력이 점수로 딱 나오는것도 아니고, 떨어져도 뭐가 부족한지 잘 감도 안오고, 누가 알려주지도 않으니 나 혼자서 망망대해에서 길을 찾는 기분이랄까.&lt;/p&gt;

&lt;p&gt;친구가 차를 샀다거나, 취업을 좋은데에 했거나, 예쁜데를 놀러갔다거나… 특히나 나보다 먼저 취업한 여자애들을 보면 조금 속이 상하곤 한다. 열등감이라고 하면 뭐 할말 없다.&lt;/p&gt;

&lt;p&gt;친구들도 만날 여유가 다들 없어서, 최근에 거리두기가 해제됐는데, 뭐 나는 바뀐게 하나없다. 나 혼자만 사회에서 거리두기를 아직 하는 느낌이 들 정도로 최근에 나는 혼자 집에서 컴퓨터에다 이렇게 글을 쓰는 것 말고는 누구랑 만난 적이 잘 없다.&lt;/p&gt;

&lt;p&gt;그래서 좀 자존감도 깎이고 맨날 컴퓨터만 뚜들기도 좀 지쳐서, 자존감도 좀 올리고 취미도 가질 겸 운동이라도 열심히 해보자 싶어서… 다시 운동시작한 이유를 주저리 주저리 써봤다.&lt;/p&gt;

&lt;p&gt;어쨌든 그냥 생각나는대로, 사실 어디다 말할데도 마땅히 없어서 여기다가 여러가지 써봤는데… 5월에는 좀 산책도 자주하고, 운동도 열심히 하고, 좋은 소식도 좀 많았으면 좋겠다.&lt;/p&gt;</content><author><name>이민재</name><email>lmj938@naver.com</email></author><category term="diary-univ" /><category term="일기장" /><summary type="html">2022.05.10 지난 주 토요일에 카카오 코딩테스트를 봤다. 일요일은 어버이날이라 집에 친척들이 오셔서 회좀 먹고, 월요일은 여자친구랑 데이트를 했다.</summary></entry><entry><title type="html">TCP와 UDP</title><link href="http://localhost:4000/cs/TCP%EC%99%80-UDP/" rel="alternate" type="text/html" title="TCP와 UDP" /><published>2022-05-05T00:00:00+00:00</published><updated>2022-05-05T00:00:00+00:00</updated><id>http://localhost:4000/cs/TCP%EC%99%80%20UDP</id><content type="html" xml:base="http://localhost:4000/cs/TCP%EC%99%80-UDP/">&lt;h2 id=&quot;서론&quot;&gt;서론&lt;/h2&gt;
&lt;p&gt;저번 게시물에서는 TCP/IP 프토로콜의 4가지 레이어가 어떤 일을 하며, 어떻게 동작하는지에 대해 알아봤었습니다.&lt;/p&gt;

&lt;p&gt;그 중에서 &lt;strong&gt;Transport Layer&lt;/strong&gt;는 데이터의 순차적이고 안정적인 전달을 담당하며, 출발지의 포트번호와 도착지의 포트번호를 헤더에 담아 도착지 컴퓨터에 데이터가 도착하면, 도착 포트를 읽어와 해당 포트에 있는 프로세스로 데이터를 전달합니다.&lt;/p&gt;

&lt;p&gt;이러한 Transport Layer에서 사용하는 프로토콜은 대표적으로 두가지가 있는데요, 바로 &lt;strong&gt;TCP&lt;/strong&gt;와 &lt;strong&gt;UDP&lt;/strong&gt;입니다.&lt;/p&gt;

&lt;p&gt;그럼 이 둘은 어떤 차이가 있는지 알아보도록 하겠습니다.&lt;/p&gt;

&lt;h2 id=&quot;tcp&quot;&gt;TCP&lt;/h2&gt;
&lt;p&gt;TCP 프로토콜은 &lt;strong&gt;Transmission Control Protocol&lt;/strong&gt;의 약자로써, 신뢰성있고 순차적인 데이터를 보장합니다. 쉽게 풀어서 표현하면, TCP 프로토콜을 사용하면 데이터가 유실되지 않고, 섞일 일도 없이 안전하게 전달 될 수 있다는 것이죠.&lt;/p&gt;

&lt;p&gt;그럼 어떠한 방식을 사용하길래 데이터를 안전하게 전달 할 수 있도록 도와준다는 것일까요?&lt;/p&gt;

&lt;p&gt;먼저, Transport Layer가 TCP 프로토콜을 사용하게 되면 세그먼트에 TCP 헤더가 추가되는데, 이 헤더에 대해서 알아 봅시다.&lt;/p&gt;

&lt;h3 id=&quot;tcp-헤더&quot;&gt;TCP 헤더&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/tech/cs/2022-05-05-TCP와/image1.PNG&quot; alt=&quot;image1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;위 사진이 바로 TCP 헤더의 모습인데요. 뭔가 여러가지의 정보가 있는 것을 확인 할 수 있습니다.&lt;/p&gt;

&lt;p&gt;이중에서 먼저 Source port 와 Destination port가 눈에 띕니다.&lt;/p&gt;

&lt;h3 id=&quot;source-port-destination-port&quot;&gt;Source Port, Destination Port&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/tech/cs/2022-05-05-TCP와/image2.PNG&quot; alt=&quot;image1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;앞서 Transport Layer에서는 목적지 포트에 데이터를 전달한다고 했었습니다. 이 부분이 바로 출발지 포트와 목적지 포트의 번호가 저장되어있는 부분입니다. 데이터가 도착하면 이 포트 번호에 할당된 프로세스로 이 데이터를 전송합니다.&lt;/p&gt;

&lt;h3 id=&quot;sequence-number&quot;&gt;Sequence Number&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/tech/cs/2022-05-05-TCP와/image3.PNG&quot; alt=&quot;image1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;다음은 Sequence Number입니다. 이 숫자는 데이터의 순서를 보장하기 위한 부분으로, 데이터가 클 경우에는 데이터를 쪼개서 보내기 때문에 이 데이터가 섞이지 않도록 순서를 Sequence Number에 적어서 보내게 됩니다.&lt;/p&gt;

&lt;p&gt;Sequence Nubmer는 최초 데이터 전송시에 랜덤한 수로 초기화 되며, 이후 자신이 보내게 될 데이터 1bytes당 시퀀스 번호가 1씩 증가하면서 보내집니다.&lt;/p&gt;

&lt;p&gt;예를들어 5바이트의 데이터를 전송한다고 가정해봅시다.&lt;/p&gt;

&lt;p&gt;그렇다면 랜덤으로 먼저 첫번째 데이터의 Sequence Number를 초기화 하겠죠? 랜덤으로 0으로 초기화 됐다면, 첫번째 데이터는 0, 두번째는 1, 세번째는 2… 이와같이 랜덤으로 초기화 된 번호에서 1바이트당 1씩 증가합니다.&lt;/p&gt;

&lt;h3 id=&quot;acknowledgement-number&quot;&gt;Acknowledgement Number&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/tech/cs/2022-05-05-TCP와/image4.PNG&quot; alt=&quot;image1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Acknowledgemnt Number는 수신자가 다음으로 받기로 예상되는 번호를 의미합니다.&lt;/p&gt;

&lt;p&gt;예를 들어보겠습니다. 마찬가지로 5바이트의 데이터를 보낸다고 가정하면, Sequence Numbers는 앞서 설명한대로 0,1,2,3,4의 순차적인 숫자를 갖게 될 것입니다. 그럼 송신 쪽에서는 Acknowlegement Number에 5를 보냄으로써 다음으로 받아야 할 Sequence Number의 번호를 보냄으로써 다음으로 보내야할 데이터의 시작점을 알려줍니다.&lt;/p&gt;

&lt;p&gt;따라서 Acknowledgement Number는 &lt;strong&gt;상대방이 처음 보낸 시퀀스 번호 + 자신이 받은 데이터의 Bytes&lt;/strong&gt;가 된다는 것을 알 수 있습니다.&lt;/p&gt;

&lt;h3 id=&quot;data-offset&quot;&gt;Data Offset&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/tech/cs/2022-05-05-TCP와/image5.PNG&quot; alt=&quot;image1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;이 부분은 세그먼트중에서 헤더가 아닌 &lt;strong&gt;데이터&lt;/strong&gt;가 시작되는 부분을 표현해주는 부분입니다.&lt;/p&gt;

&lt;p&gt;예를들어 (실제로는 이렇지 않지만 이해를 쉽게 하기 위해 간략화 해서 표현하겠습니다.) 00001111 의 데이터가 있고, 0000이 헤더고 1111이 데이터라면, Data Offset에 5가 적혀있다면 이 세그먼트의 데이터는 5번째 데이터 부터구나~ 라고 컴퓨터가 알 수 있게 되는 것이죠.&lt;/p&gt;

&lt;h3 id=&quot;reserved&quot;&gt;Reserved&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/tech/cs/2022-05-05-TCP와/image6.PNG&quot; alt=&quot;image1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Reserved는 미래를 위해 예약된 필드로, 모두 0으로 채워져야합니다.&lt;/p&gt;

&lt;h3 id=&quot;flags&quot;&gt;Flags&lt;/h3&gt;
&lt;p&gt;이 비트들은 현재 세그먼트의 속성을 나타내는 부분입니다. 여러가지 비트 플래그가 채워지고 비워진 상태를 확인 함으로써 이 데이터가 현재 어떤 요청을 보내고 있는지 확인 할 수 있습니다.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;필드&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;의미&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;URG&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Urgent Pointer(긴급 포인터) 필드에 값이 채워져있음을 알리는 플래그. 이 포인터가 가리키는 긴급한 데이터는 높게 처리되어 먼저 처리된다. 요즘에는 많이 사용되지 않는다.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;ACK&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Acknowledgment(승인 번호) 필드에 값이 채워져있음을 알리는 플래그. 이 플래그가 0이라면 승인 번호 필드 자체가 무시된다.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;PSH&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Push 플래그. 수신 측에게 이 데이터를 최대한 빠르게 응용프로그램에게 전달해달라는 플래그이다. 이 플래그가 0이라면 수신 측은 자신의 버퍼가 다 채워질 때까지 기다린다. 즉, 이 플래그가 1이라면 이 세그먼트 이후에 더 이상 연결된 세그먼트가 없음을 의미하기도 한다.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;RST&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Reset 플래그. 이미 연결이 확립되어 ESTABLISHED 상태인 상대방에게 연결을 강제로 리셋해달라는 요청의 의미이다.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;SYN&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Synchronize 플래그. 상대방과 연결을 생성할 때, 시퀀스 번호의 동기화를 맞추기 위한 세그먼트임을 의미한다.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;FIN&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Finish 플래그. 상대방과 연결을 종료하고 싶다는 요청인 세그먼트임을 의미한다.&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;위 6개의 플래그는 기존에 사용하던 6개의 비트 플래그이며, 후에 혼잡제어 기능의 향상을 위해서 3개의 플래그 비트가 더 추가되었습니다.&lt;/p&gt;

&lt;p&gt;이를 &lt;strong&gt;ECN(Explicit Congestion Notification)&lt;/strong&gt;이라 하며, 네트워크의 혼잡 상태를 알리기 위한 방식입니다.&lt;/p&gt;

&lt;p&gt;기존에는 타임아웃을 이용한 방식을 통해서 일정 시간이상 응답이 없으면 이를 네트워크 혼잡 상태로 판별하여 처리했지만, 처리속도가 아주 민감한 어플리케이션에서는 이러한 대기시간을 줄이는 것이 더 좋기 때문에, 이러한 3개의 플래그비트를 추가하여 &lt;strong&gt;네트워크의 혼잡도를 명시적으로 표시하여 알립니다.&lt;/strong&gt;&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;필드&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;의미&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;NS&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;ECN에서 사용하는 CWR, ECE 필드가 실수나 악의적으로 은폐되는 경우를 방어하기 위해 RFC 3540에서 추가된 필드&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;ECE&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;ECN Echo 플래그. 해당 필드가 1이면서, SYN 플래그가 1일 때는 ECN을 사용한다고 상대방에게 알리는 의미. SYN 플래그가 0이라면 네트워크가 혼잡하니 세그먼트 윈도우의 크기를 줄여달라는 요청의 의미이다.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;CWR&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;이미 ECE 플래그를 받아서, 전송하는 세그먼트 윈도우의 크기를 줄였다는 의미이다.&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;ECN은 따로 다룰 정도로 많은 내용이 있기 때문에, 알아두기만 하고 자세한 설명은 따로 다루도록 하겠습니다.&lt;/p&gt;

&lt;h3 id=&quot;window-size&quot;&gt;Window Size&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;/assets/images/tech/cs/2022-05-05-TCP와/image7.PNG&quot; alt=&quot;image1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Window Size 필드에는 한번에 전송할 수 있는 데이터의 양을 의미하는 값을 담습니다.&lt;/p&gt;

&lt;p&gt;예를 들어, 한번에 10비트의 파일을 10개로 나누어 sequence number를 0,1,2…10까지 보낸다면 이 데이터들은 각각 10이라는 window size를 갖게 되는 것이죠.&lt;/p&gt;

&lt;h3 id=&quot;checksum&quot;&gt;Checksum&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;/assets/images/tech/cs/2022-05-05-TCP와/image8.PNG&quot; alt=&quot;image1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Checksum은 데이터를 송신하는 중에 발생할 수 있는 오류를 검출하기 위한 값입니다.&lt;/p&gt;

&lt;p&gt;TCP의 Checksum은 전송한 데이터를 16Bits씩 나누어 모두 더한 후, 이를 1의 보수를 취해주어 나온값을 사용하여 전송된 데이터에 오류가 있는지를 확인합니다.&lt;/p&gt;

&lt;p&gt;예를 들어, 11011011 이라는 데이터가 있다면 (실제로는 16비트씩 나누어 계산하지만, 예시에서는 4비트로 간단하게 생각해보겠습니다.)&lt;/p&gt;

&lt;p&gt;4비트씩 나누어 (실제로는 16비트) 모두 더해줍니다.&lt;/p&gt;

&lt;p&gt;1101 + 1011  = 11000&lt;/p&gt;

&lt;p&gt;근데 이렇게 하면 4비트(실제로는 16비트)를 넘어서서 Checksum의 길이를 초과하게 됩니다. 이럴때는 앞에있는 &lt;strong&gt;캐리&lt;/strong&gt;(두개의 수를 더했을때 자리수가 올라간 부분)을 떼어내어 다시 이 값에 더해줍니다.&lt;/p&gt;

&lt;p&gt;1000 + 0001 = 1001&lt;/p&gt;

&lt;p&gt;이러한 방법을 &lt;strong&gt;Wrap Around&lt;/strong&gt;라고 합니다.&lt;/p&gt;

&lt;p&gt;이제 이 값의 1의 보수를 취해주면 됩니다. 1의보수는 쉽게 말하면 2진수값을 모두 반전 시킨 값으로, 1001 의 경우는 0110이 됩니다.&lt;/p&gt;

&lt;p&gt;따라서 이 데이터의 Checksum은 0110이 됩니다. 이 Checksum과 데이터의 총합인 1001을 더하면 어떻게 될까요?&lt;/p&gt;

&lt;p&gt;당연히 1의 보수를 취한값이니 모두가 1로이루어진 수가 나올 것입니다. 따라서 송신측에서는 위 과정을 통해 Checksum을 만들어 송신하고, 수신측에서는 받은 데이터를 위 과정을 거쳐 값을 만든 뒤 Checksum과 더해봄으로써 정상적인 1로만 이루어진 값이 나오는지 확인합니다.&lt;/p&gt;

&lt;p&gt;이런 방식을 쓰면 데이터가 중간에 손상되었는지 알 수 있을 것입니다. 전달받은 데이터를 더한 뒤, 이를 Checksum과 더해서 0이 있는지를 확인하면 됩니다.&lt;/p&gt;

&lt;h3 id=&quot;urgent-pointer&quot;&gt;Urgent Pointer&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/tech/cs/2022-05-05-TCP와/image9.PNG&quot; alt=&quot;image1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;말그대로 urgent한 pointer, 긴급한 포인터입니다. 먼저 처리가 필요한 데이터를 표시합니다. 만약 5바이트의 데이터가 있고 Urgent Pointer가 1이라면, 두번째 데이터를 먼저 처리할 것입니다.&lt;/p&gt;

&lt;h3 id=&quot;정리&quot;&gt;정리&lt;/h3&gt;
&lt;p&gt;TCP는 위와 같은 기능등을 통해서 안전한 연결을 보장합니다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Sequence Number&lt;/strong&gt;를 통해서 들어온 데이터의 순서도 보장하며, 플래그 비트를 통해서 통신을 하기전에 올바르게 통신이 가능한 상태인지 확인하는 &lt;strong&gt;3-Way-HandShake&lt;/strong&gt;를 통해 데이터가 올바르게 수신되었는지도 확인합니다. 게다가 마지막에 &lt;strong&gt;Checksum&lt;/strong&gt;을 통해서 데이터가 혹여나 손상되었는지 확인하니, 안전하게 데이터를 송수신 할 수 있겠죠?&lt;/p&gt;

&lt;p&gt;그럼 UDP는 어떨까요?&lt;/p&gt;

&lt;h2 id=&quot;udp&quot;&gt;UDP&lt;/h2&gt;
&lt;p&gt;UDP는 User Datagram Protocol로, 이도 마찬가지로 Transport Layer에서 사용하는 프로토콜입니다.&lt;/p&gt;

&lt;p&gt;UDP는 위에서 말한 TCP와 같은 역할을 하지만, TCP가 제공하는 기능들 중에 단 두가지만 지원합니다.&lt;/p&gt;

&lt;p&gt;바로 &lt;strong&gt;포트번호&lt;/strong&gt;와 &lt;strong&gt;Checksum&lt;/strong&gt;입니다. 따라서 출발지와 도착지 포트를 갖고 해당 포트에 도착한 뒤,  Checksum을 사용해서 데이터가 손상되었는지만을 확인합니다.&lt;/p&gt;

&lt;p&gt;그럼 기능이 TCP가 압도적으로 많은데, UDP는 왜 필요할까요?&lt;/p&gt;

&lt;h2 id=&quot;tcp와-udp의-차이&quot;&gt;TCP와 UDP의 차이&lt;/h2&gt;
&lt;p&gt;TCP와 UDP의 가장 큰 차이점은 무엇일까요? 바로 TCP는 &lt;strong&gt;연결 지향 프로토콜&lt;/strong&gt; 임에 반해, UDP는 &lt;strong&gt;비연결 지향 프로토콜&lt;/strong&gt;이라는 것입니다.&lt;/p&gt;

&lt;p&gt;이것이 무슨 뜻일까요?&lt;/p&gt;

&lt;p&gt;TCP의 경우는 데이터를 송신하기전에, SYN과 ACK 플래그 비트를 통해서 현재 통신이 가능한 상태인지 확인하는 &lt;strong&gt;3-Way-Handshake&lt;/strong&gt;과정을 거친다고 했습니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/tech/cs/2022-05-05-TCP와/image10.PNG&quot; alt=&quot;image1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;위처럼 통신전에 클라이언트는 SYN 비트가 1인 데이터를 보내고, Server가 이를 받으면 ACK과 SYN이 1인 데이터를 또 보낸뒤, 이것이 만약 클라이언트측이 정상적으로 수신했다면 마지막으로 ACK을 보내면서 현재 통신이 원활한 상태, &lt;strong&gt;연결&lt;/strong&gt;되었다는 것을 확인하는 것이죠.&lt;/p&gt;

&lt;p&gt;심지어 데이터의 Sequence Number를 통해서 순서까지 보장해주니, &lt;strong&gt;통신의 신뢰성이 보장됩니다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;하지만 TCP의 단점은 무엇일까요?&lt;/p&gt;

&lt;p&gt;아무래도 데이터 통신을 보낼때마다 3번의 확인을 통해 연결을 확인하니, 속도가 떨어질 것입니다.&lt;/p&gt;

&lt;p&gt;반면 UDP의 경우는 여러 확인과정이 없으니 속도는 TCP에 비해서 매우 빠르겠죠?? 하지만 역시 확인과정을 거치지 않는 UDP는 &lt;strong&gt;통신의 신뢰성이 보장되지 않습니다.&lt;/strong&gt; 연결이 안된상태라도 이를 데이터 송신자가 알수도없고, 순서가 잘못되도 이것이 잘못된 것인지 알 수 없죠. 평균적으로 7퍼센트의 데이터가 유실된다고 합니다.&lt;/p&gt;

&lt;p&gt;따라서 데이터의 신뢰성보다는 속도가 중요하다면 UDP를, 데이터의 신뢰성이 중요하다면 TCP를 사용하게 되는 것입니다.&lt;/p&gt;

&lt;h2 id=&quot;마무리&quot;&gt;마무리…&lt;/h2&gt;
&lt;p&gt;이처럼 TCP와 UDP는 어떤 차이점을 갖고있고, 어떤 상황에 따라 어떤 프로토콜을 써야하는지 알아봤습니다.&lt;/p&gt;

&lt;p&gt;공부해보니 왜 TCP가 주류 프로토콜로 사용되는지 잘 알 수 있었습니다. 다음 게시물에서는 TCP에 대해서 자세히 알아보도록 하겠습니다.&lt;/p&gt;</content><author><name>이민재</name><email>lmj938@naver.com</email></author><category term="CS" /><summary type="html">서론 저번 게시물에서는 TCP/IP 프토로콜의 4가지 레이어가 어떤 일을 하며, 어떻게 동작하는지에 대해 알아봤었습니다.</summary></entry><entry><title type="html">[JPA] 영속성 컨텍스트(2)</title><link href="http://localhost:4000/java/JPA-%EC%98%81%EC%86%8D%EC%84%B1%EC%BB%A8%ED%85%8D%EC%8A%A4%ED%8A%B8(2)/" rel="alternate" type="text/html" title="[JPA] 영속성 컨텍스트(2)" /><published>2022-05-01T00:00:00+00:00</published><updated>2022-05-01T00:00:00+00:00</updated><id>http://localhost:4000/java/%5BJPA%5D%EC%98%81%EC%86%8D%EC%84%B1%EC%BB%A8%ED%85%8D%EC%8A%A4%ED%8A%B8(2)</id><content type="html" xml:base="http://localhost:4000/java/JPA-%EC%98%81%EC%86%8D%EC%84%B1%EC%BB%A8%ED%85%8D%EC%8A%A4%ED%8A%B8(2)/">&lt;h2 id=&quot;영속성-컨텍스트는-왜-사용하는-걸까&quot;&gt;영속성 컨텍스트는 왜 사용하는 걸까?&lt;/h2&gt;
&lt;p&gt;저번 게시물에서는 영속성 컨텍스트를 어떻게 사용하며, 무엇인지에 대해 배워보았습니다.&lt;/p&gt;

&lt;p&gt;그럼 바로 데이터베이스에 저장을 하면 되지, 왜 굳이 영속성이라는 개념을 만들어서 모아뒀다가 commit()을 만나면 한번에 처리할까요?&lt;/p&gt;

&lt;p&gt;영속성을 사용하면, 바로 데이터베이스에 저장하는것 보다 훨씬 안전하고 유용한 기능들을 사용할 수 있기 때문입니다.&lt;/p&gt;

&lt;p&gt;그럼 한번 어떤 장점들이 생기는지 알아봅시다.&lt;/p&gt;

&lt;h2 id=&quot;영속성-컨텍스트의-장점&quot;&gt;영속성 컨텍스트의 장점&lt;/h2&gt;
&lt;h3 id=&quot;1차-캐시&quot;&gt;1차 캐시&lt;/h3&gt;
&lt;p&gt;영속성 컨텍스트에 올라간 객체는 1차캐시 상태가 되기 때문에 우리가 만약 이 객체를 다시 조회한다면, 데이터베이스에 접근하지 않고 캐시를 사용해서 가져올 수 있습니다.&lt;/p&gt;

&lt;p&gt;아래와 같이 코드를 작성해보겠습니다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt; &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;EntityManagerFactory&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;emf&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Persistence&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;createEntityManagerFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;hello&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;EntityManager&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;em&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;emf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;createEntityManager&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;EntityTransaction&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tx&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;em&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getTransaction&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;tx&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;begin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;


            &lt;span class=&quot;nc&quot;&gt;Member&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;member&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Member&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;member&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1L&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;member&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;이민재&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;member&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setAge&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;26&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;


            &lt;span class=&quot;n&quot;&gt;em&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;persist&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;member&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;nc&quot;&gt;Member&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;member1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;em&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Member&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1L&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;member1 = &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;member1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
            &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;member1 = &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;member1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;

            &lt;span class=&quot;n&quot;&gt;tx&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;commit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;tx&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;rollback&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;finally&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;em&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;emf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;코드를 실행시키고 로그를 확인해 봅시다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/tech/Java/2022-05-01-[JPA]영속성컨텍스트(2)/image1.PNG&quot; alt=&quot;image1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;쿼리가 날아갔는데, member1을 조회할 때 SELECT 쿼리가 날아가지 않은걸 확인 할 수 있습니다.&lt;/p&gt;

&lt;p&gt;이처럼 영속성 컨텍스트는 1차 캐싱을 지원하여, 영속상태인 객체를 조회 할때는 굳이 DB에 접근하지 않고도 해당 값을 가져옵니다.&lt;/p&gt;

&lt;p&gt;또, 만약 이미 데이터베이스에서 데이터를 찾아올때도 1차캐시를 사용할 수 있습니다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;EntityManagerFactory&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;emf&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Persistence&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;createEntityManagerFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;hello&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;EntityManager&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;em&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;emf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;createEntityManager&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;EntityTransaction&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tx&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;em&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getTransaction&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;tx&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;begin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;


            &lt;span class=&quot;nc&quot;&gt;Member&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;member1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;em&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Member&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1L&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;member1 = &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;member1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
            &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;member1 = &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;member1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;

            &lt;span class=&quot;nc&quot;&gt;Member&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;member2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;em&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Member&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1L&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;member2 = &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;member2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
            &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;member2 = &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;member2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;

            &lt;span class=&quot;n&quot;&gt;tx&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;commit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;tx&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;rollback&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;finally&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;em&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;emf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;위 코드를 실행 하면 어떻게 될까요?&lt;/p&gt;

&lt;p&gt;실행 시킨 뒤 로그를 확인해보면,&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/tech/Java/2022-05-01-[JPA]영속성컨텍스트(2)/image2.PNG&quot; alt=&quot;image1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;member1을 조회할 때는 SELECT 쿼리가 날아갔지만, member2를 조회 할때는 1차 캐시에 있는 member를 가져온 것을 확인 할 수가 있습니다. member1이 이미 접근해서 데이터를 가져온 상태이니, member2를 조회 할때는 그냥 캐시에 있는 데이터를 가져온 것이죠.&lt;/p&gt;

&lt;p&gt;하지만 사실 대부분 트랜잭션을 사용해서 작업을 하기 때문에 이 기능이 성능에 있어 큰 메리트가 되지는 않습니다. 어차피 트랜잭션이 끝나면 캐시도 사라지기 때문에, 트랜잭션안에서 조회하지 않고서야 이러한 1차 캐시에서의 기능을 사용할 일이 크게 없기 때문이죠.&lt;/p&gt;

&lt;p&gt;그래도 성능에 정말 민감한 시스템이라면 이것이 이점이 될 수도 있을것입니다.&lt;/p&gt;

&lt;p&gt;하지만 성능을 위해서 사용한다기보다는 더 객체지향적인 코드를 작성하는데에 있어 큰 이점을 줍니다. 이 이점은 뒤에서 마저 설명하도록 하겠습니다.&lt;/p&gt;

&lt;h3 id=&quot;영속-엔티티의-동일성-보장&quot;&gt;영속 엔티티의 동일성 보장&lt;/h3&gt;
&lt;p&gt;영속 컨텍스트에 올라간 엔티티들은 동일성이 보장됩니다. 무슨 말일까요?&lt;/p&gt;

&lt;p&gt;다시 위의 코드를 가져와 조금 수정해봅시다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;EntityManagerFactory&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;emf&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Persistence&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;createEntityManagerFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;hello&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;EntityManager&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;em&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;emf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;createEntityManager&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;EntityTransaction&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tx&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;em&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getTransaction&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;tx&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;begin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

            &lt;span class=&quot;nc&quot;&gt;Member&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;member1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;em&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Member&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1L&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;nc&quot;&gt;Member&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;member2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;em&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Member&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1L&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;result = &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;member1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;member2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;

            &lt;span class=&quot;n&quot;&gt;tx&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;commit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;tx&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;rollback&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;finally&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;em&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;emf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;member1 과 member2는 객체는 다르지만 데이터베이스에서 가져온 값이기 때문에 둘은 같아야합니다. 그럼 이 코드를 실행해 볼까요?&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/tech/Java/2022-05-01-[JPA]영속성컨텍스트(2)/image3.PNG&quot; alt=&quot;image1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;member1과 member2가 같다는걸 알 수 있습니다. member1을 데이터 베이스에서 가져오면서 member1이 영속상태가 되었으므로, member2를 찾아오는 요청에는 그냥 1차캐시에 있었던 member의 값을 그대로 member2에 넣어주면 되겠죠?&lt;/p&gt;

&lt;p&gt;이렇게 1차캐시의 기능은 영속엔티티의 동일성을 보장해주어, 우리가 객체 지향으로 코딩하는것을 더 편리하게 도와줍니다.&lt;/p&gt;

&lt;p&gt;따라서, 1차캐시로 반복가능한 읽기 등급의 트랜잭션 격리수준은, 굳이 데이터베이스까지 사용하지 않고 애플리케이션 차원에서 제공 받을 수 있는 것이죠.&lt;/p&gt;

&lt;h3 id=&quot;트랜잭션을-지원하는-쓰기지연&quot;&gt;트랜잭션을 지원하는 쓰기지연&lt;/h3&gt;
&lt;p&gt;앞에서 부터 영속상태인 객체들은 persist()할 때 데이터 베이스에 쓰여지는게 아니라, 해당 정보들을 모두 영속성 컨텍스트에 쌓아뒀다가 commit()을 만나면 그때 쿼리를 날려 데이터 베이스에 쓰기작업을 한다고 했었습니다.&lt;/p&gt;

&lt;p&gt;한번 코드로 확인해 볼까요?&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;EntityManagerFactory&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;emf&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Persistence&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;createEntityManagerFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;hello&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;EntityManager&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;em&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;emf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;createEntityManager&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;EntityTransaction&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tx&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;em&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getTransaction&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;tx&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;begin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nc&quot;&gt;Member&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;member1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Member&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1L&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;이민재&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;26&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;nc&quot;&gt;Member&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;member2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Member&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2L&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;김아무개&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;26&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
            
            &lt;span class=&quot;n&quot;&gt;em&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;persist&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;member1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;em&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;persist&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;member2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;===================&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; 
            
            &lt;span class=&quot;n&quot;&gt;tx&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;commit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;tx&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;rollback&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;finally&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;em&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;emf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;보면 두개의 컬럼을 만들어준뒤, 이를 persist()를 이용해 영속성 컨텍스트에 올려봅시다. 그리고 commit()과 persist() 사이에 구분선을 하나 출력해줌으로써 쿼리가 언제 나가는지 확인해보도록 하죠.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/tech/Java/2022-05-01-[JPA]영속성컨텍스트(2)/image4.PNG&quot; alt=&quot;image1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;역시 앞서 이야기 한대로 &lt;strong&gt;persist()&lt;/strong&gt;가 아니라 &lt;strong&gt;commit()&lt;/strong&gt;이 이뤄져야 쿼리가 날아가 데이터 베이스에 쓰기 작업을 하는 것을 확인 할 수 있습니다.&lt;/p&gt;

&lt;p&gt;그럼 이렇게 굳이 느리게 영속성 컨텍스트에 모아놨다가 한번에 데이터베이스에 쓰는 것에는 어떤 이점이 있는 걸까요?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;네트워크를 호출 하는 것은 애플리케이션 안에서 단순 메소드를 수만번 호출하는 것 보다 더 큰 비용이 듭니다.&lt;/strong&gt;&lt;br /&gt;
따라서 데이터베이스에 변경점이 있다면, 최대한 모아두었다가 한번 네트워크를 호출할때 모두 처리해버리는 것이 비용이 저렴할 것입니다.&lt;/p&gt;

&lt;p&gt;위에서만 해도 쓰기 지연이 되지 않았다면 두번의 네트워크 호출이 필요했던 것을, 모아서 한번에 처리 함으로써 한번의 네트워크 호출로 마무리 한 것을 알 수 있습니다. 모아서 한번에 처리함으로써 네트워크 호출을 최대한 줄이게 되는 것이죠.&lt;/p&gt;

&lt;h3 id=&quot;엔티티-변경-감지&quot;&gt;엔티티 변경 감지&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;JPA의 목적은 데이터베이스를 객체지향적으로 마치 자바 컬렉션을 다루듯이 사용할 수 있도록 하는 것&lt;/strong&gt;입니다. 그렇기 때문에 데이터를 바꾸는 쿼리를 따로 날리지 않고, 그냥 데이터베이스에서 데이터를 불러와 이 객체의 값을 바꿔주면, 알아서 UPDATE 쿼리가 날아가게 됩니다. 코드로 한번 확인해보겠습니다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
	    &lt;span class=&quot;nc&quot;&gt;EntityManagerFactory&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;emf&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Persistence&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;createEntityManagerFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;hello&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
	    &lt;span class=&quot;nc&quot;&gt;EntityManager&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;em&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;emf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;createEntityManager&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
	    &lt;span class=&quot;nc&quot;&gt;EntityTransaction&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tx&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;em&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getTransaction&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
	
	    &lt;span class=&quot;n&quot;&gt;tx&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;begin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
	
	    &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
	        &lt;span class=&quot;nc&quot;&gt;Member&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;member1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;em&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Member&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1L&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
	        &lt;span class=&quot;n&quot;&gt;member1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;이름변경&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
	
	        &lt;span class=&quot;n&quot;&gt;tx&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;commit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
	    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
	        &lt;span class=&quot;n&quot;&gt;tx&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;rollback&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
	    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;finally&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
	        &lt;span class=&quot;n&quot;&gt;em&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
	    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
	    &lt;span class=&quot;n&quot;&gt;emf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;위 코드를 보면, 데이터베이스로 부터 Member 테이블의 1번 id값을 가져와 객체 member1로 저장한뒤, setName()을 통해서 해당 값을 변경해주었습니다. 코드로만 봐서는 데이터베이스의 값이 바뀌지 않을 것 같다는 생각이 듭니다.&lt;/p&gt;

&lt;p&gt;하지만 로그를 확인해보면,&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/tech/Java/2022-05-01-[JPA]영속성컨텍스트(2)/image5.PNG&quot; alt=&quot;image1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;UPDATE 쿼리가 데이터베이스로 날아간 것을 확인 할 수 있습니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/tech/Java/2022-05-01-[JPA]영속성컨텍스트(2)/image6.PNG&quot; alt=&quot;image1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;h2 콘솔로 들어가보니 데이터베이스에서도 올바르게 변경 사항이 적용된 것을 확인 할 수 있습니다.&lt;/p&gt;

&lt;p&gt;이것이 바로 변경 감지입니다. 이렇게 하면 벌써 훨씬 객체지향으로 코딩 할 수 있을 것 같이 느껴지지 않으신가요?&lt;/p&gt;

&lt;p&gt;그럼 이러한 변경은 어떻게 동작하는걸까요?? 아래 그림을 보도록 합시다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/tech/Java/2022-05-01-[JPA]영속성컨텍스트(2)/image7.PNG&quot; alt=&quot;image1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;우리가 member의 데이터를 찾아와 memberA라는 객체에 저장하게 되면, JPA는 1차캐시에 이를 저장함과 동시에 이에 대한 스냅샷을 만듭니다. 스냅샷은 데이터를 받아왔을 때의 데이터를 그대로 담아놓은 것이죠.&lt;/p&gt;

&lt;p&gt;그래서 &lt;strong&gt;commit()&lt;/strong&gt;명령을 만나게 되면, 이 스냅샷과 현재 객체의 데이터를 비교한 뒤 다른 부분에 대해서 UPDATE 쿼리를 쓰기 지연 저장소에 모은 뒤, 앞서 말했던 것 처럼 네트워크와 접촉해 데이터 베이스에 반영해주는것이죠.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;그림에 보면 &lt;strong&gt;flush()&lt;/strong&gt;라는 명령어가 있는데, 사실 영속성 컨텍스트의 내용을 DB에 반영하는 것은 commit()이 아니고 flush()입니다. commit() 내부에서 flush()를 호출하기 때문에 commit()이 이루어지면 DB에 컨텍스트가 반영 되는 것이죠. commit() 메소드는 flush()를 호출한 뒤 영속성 컨텍스트의 내용과 1차캐시를 모두 제거합니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;마무리&quot;&gt;마무리…&lt;/h3&gt;
&lt;p&gt;이렇게 JPA의 영속성 컨텍스트가 무엇이고, 이로써 얻는 장점이 무엇인지 알아보았습니다.&lt;/p&gt;

&lt;p&gt;영속성 컨텍스트가 어떤일을 하는지 알고나니, 왜 JPA가 객체지향적으로 코드를 작성할 수 있게 해준다는건지 조금은 와닿으셨으리라 생각됩니다.&lt;/p&gt;

&lt;p&gt;이제 기존의 방식처럼 SQL과 DB에 의존하지 않고 마치 컬렉션을 사용하듯이 값을 저장하고 수정하고, 삭제 할 수 있겠죠?&lt;/p&gt;

&lt;p&gt;다음게시물에서는 JPA를 사용하기 위한 테이블 매핑과 연관관계 매핑에 대해 다뤄 보겠습니다.&lt;/p&gt;</content><author><name>이민재</name><email>lmj938@naver.com</email></author><category term="java" /><summary type="html">영속성 컨텍스트는 왜 사용하는 걸까? 저번 게시물에서는 영속성 컨텍스트를 어떻게 사용하며, 무엇인지에 대해 배워보았습니다.</summary></entry><entry><title type="html">TCP/IP</title><link href="http://localhost:4000/cs/TCP-IP/" rel="alternate" type="text/html" title="TCP/IP" /><published>2022-05-01T00:00:00+00:00</published><updated>2022-05-01T00:00:00+00:00</updated><id>http://localhost:4000/cs/TCP%20IP</id><content type="html" xml:base="http://localhost:4000/cs/TCP-IP/">&lt;blockquote&gt;
  &lt;p&gt;저번 게시물 : https://learnote-dev.com/cs/OSI-7-Layer-Model/&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;서론&quot;&gt;서론&lt;/h2&gt;
&lt;p&gt;저번 게시물에서는 OSI 7 Layer에 대해서 알아봤습니다. OSI 7 모델이 개념적 표준이고, 실질적으로 사용되고있는 표준은 TCP/IP라고 했었습니다.&lt;/p&gt;

&lt;p&gt;그렇다면 아무래도 실제로 사용하는 TCP/IP 프로토콜에 대해서도 잘 알아야겠죠? 그럼 TCP/IP란 무엇이고, 어떻게 동작하는지에 대해 알아보도록 합시다.&lt;/p&gt;

&lt;h2 id=&quot;인터넷&quot;&gt;인터넷&lt;/h2&gt;
&lt;p&gt;먼저, 인터넷에 대해 알아야 합니다. 결국 TCP/IP는 인터넷을 통해 정보를 통신하기 위한 기술이므로, 이를 먼저 알아야 이해하기 쉽습니다.&lt;/p&gt;

&lt;p&gt;인터넷에 대해 들어보지 못한 사람은 없겠지만, 막상 인터넷이 뭔지 설명하라고 하면 정확히 설명하라고 하면 애매하죠?&lt;/p&gt;

&lt;p&gt;인터넷은 &lt;strong&gt;전 세계에 걸쳐 파일 전송 등의 데이터 통신 서비스를 받을 수 있는 컴퓨터 네트워크의 시스템&lt;/strong&gt;입니다.&lt;/p&gt;

&lt;p&gt;우리가 인터넷을 사용할 때는 반드시 인터넷 사업자들에게 비용을 지불해야 사용할 수 있습니다. 사업자가 깔아놓은 인프라를 이용해야 하기 때문이죠.&lt;/p&gt;

&lt;p&gt;우리나라에는 KT, SKT, LG가 있는걸 알고 계실 겁니다. 이 회사들이 전국에 깔아놓은 인터넷 망에 우리가 접속함으로써 인터넷에 연결 되는 것이죠.&lt;/p&gt;

&lt;p&gt;해외와는 해저케이블을 통해 연결되어, 우리는 우리나라뿐만 아니라 전세계와 파일을 전송하고 데이터를 통신할 수 있습니다.&lt;/p&gt;

&lt;p&gt;그런데 데이터 통신을 하려면, 하나의 공통된 규약이 있어야 이들이 서로 통신할 수 있을 것입니다. 만약 각자의 기준을 하나씩 만들기 시작하면, 서로  사용하는 규약에 따라 통신이 되었다가 되지 않았다가 하게 되겠죠.&lt;/p&gt;

&lt;p&gt;그래서 이러한 통신을 위해 만든 매뉴얼이 바로 TCP/IP입니다.&lt;/p&gt;

&lt;h2 id=&quot;tcpip&quot;&gt;TCP/IP&lt;/h2&gt;
&lt;p&gt;OSI 7 레이어와 다르게 TCP/IP는 4개의 레이어를 갖습니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Application&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Transport&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Internet&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Network Access&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;OSI 레이어에 비해서 레이어가 적습니다.&lt;/p&gt;

&lt;p&gt;그렇다면 우리가 다른 서버에 접속해서 정보를 받아올 때 어떤 방식으로 TCP/IP 프로토콜에 따라서 통신이 일어나는 것일까요?&lt;/p&gt;

&lt;p&gt;그러면 한번 네이버에 접속하는 것을 예시로 한번 TCP/IP의 통신방식을 알아보겠습니다.&lt;/p&gt;

&lt;p&gt;우리가 www.naver.com을 주소창에 치면, 어떻게 되나요? 네이버 서버가 갖고있는 html 파일을 받아오겠죠. 지금 주소창에 치면 순식간에 파일을 받아와 브라우저로 확인 할 수 있겠지만, 실제로는 여러과정을 거칩니다.&lt;/p&gt;

&lt;p&gt;한번 레이어를 하나씩 보며 어떻게 통신을 하는지 알아봅시다.&lt;/p&gt;

&lt;h3 id=&quot;applicaiton&quot;&gt;Applicaiton&lt;/h3&gt;
&lt;p&gt;여기서는 특정 서비스를 제공하기 위해서 애플리케이션끼리 정보를 주고 받습니다.&lt;/p&gt;

&lt;p&gt;주로 &lt;strong&gt;FTP, HTTP, SSH, Telnet, DNS, SMTP&lt;/strong&gt;가 사용됩니다.&lt;/p&gt;

&lt;p&gt;**통신에 대한 내용도 포함되있지만, 어떤 행동을 하고 싶은지, 어떤데이터를 받고, 보내고 싶은지에 대한 내용이 포함되어있습니다. **&lt;/p&gt;

&lt;p&gt;우리가 주로 사용하는 HTTP를 보면,&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/tech/cs/2022-05-01-TCP/image1.PNG&quot; alt=&quot;image1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;이렇게 GET 요청과 함께 받고싶은 data인 1.html의 정보와 요청하고 싶은 서버의 주소등이 담겨있죠?&lt;/p&gt;

&lt;p&gt;이처럼 Application는 통신에 대한 정보와 함께 어떤데이터를 받고 싶은지를 어플리케이션 단에서 담아서 보내는 정보입니다.&lt;/p&gt;

&lt;h3 id=&quot;transport&quot;&gt;Transport&lt;/h3&gt;
&lt;p&gt;Transport 레이어에서는 포트에 대한 정보가담깁니다. 포트란 무엇일까요?&lt;/p&gt;

&lt;p&gt;컴퓨터에는 65535개의 포트를 갖고있습니다. 컴퓨터가 아파트라면, 포트는 호수인 셈입니다. 만약, 정보가 성공적으로 컴퓨터에 도착했다하더라도, 이 정보를 사용할 프로그램의 주소를 모른다면 컴퓨터에 도착한 정보는 갈 곳을 잃을 것입니다. &lt;strong&gt;이를 해결하기 위해, 컴퓨터는 이러한 포트를 어플리케이션별로 할당함으로써 컴퓨터에 도착한 요청을 해당 어플리케이션으로 보내 처리합니다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;만약 우리가 www.naver.com을 주소창에 입력하면, 네이버의 서버 컴퓨터로 우리가 보낸 정보가 해당 컴퓨터의 서버 애플리케이션으로 전달됩니다. 우리는 포트 번호를 명시해준적이 없는데, 어떻게 우리의 요청이 알아서 네이버의 서버 애플리케이션으로 전달되는걸까요?&lt;/p&gt;

&lt;p&gt;사실 우리가 브라우저 주소창에 http://www.naver.com을 친다는 것은 사실 http://www.naver.com:80 을 치는 것과 같습니다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;요즘은 보안을 위해서 대부분 https를 사용하지만 설명을 위해 http로 설명 하겠습니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;만약 http://www.naver.com:81 과 같은 주소를 치게되면 접속이 되지 않는 것을 확인할 수 있는데요, &lt;strong&gt;웹서버를 사용하는 포트는 80포트로 하기로 미리 약속해놓았기 때문에 모든 웹서버 어플리케이션을 사용하는 서버 컴퓨터는 서버 어플리케이션을 80포트에 할당해 놓습니다.&lt;/strong&gt; 이 때문에 브라우저 프로그램에서는 주소를 치면 :80이라는 포트번호 명시를 우리가 해주지 않아도 웹서버는 모두 80포트이니, 알아서 :80을 대신 입력해주는 것입니다.&lt;/p&gt;

&lt;p&gt;그래서 Transport 레이어에서는 이러한 도착 포트 번호와, 내 컴퓨터의 출발 포트 번호의 데이터를 추가합니다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Transport 레이어에서는 TCP 혹은 UDP가 사용됩니다.&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;internet&quot;&gt;Internet&lt;/h3&gt;
&lt;p&gt;Internet 레이어에서는 Internet Protocol, &lt;strong&gt;IP&lt;/strong&gt;의 정보를 추가합니다. 포트와 마찬가지로 요청을 보내는 컴퓨터의 IP와 요청의 도착지의 IP를 포함하는데요. 포트번호와 마찬가지로 우리는 도착할 컴퓨터의 IP를 명시해준 적도 없으며, 심지어는 머리로도 알지 못합니다. 브라우저는 또 그러면 이 IP는 어떻게 찾아서 보내는걸까요?&lt;/p&gt;

&lt;p&gt;또 다시 우리가 www.naver.com을 주소창에 입력한다고 해봅시다. 그러면 우리는 123.123.123.123 이런 형식으로 되어있어야할 IP주소를 모르고도 해당 웹서버에 접속할 수 있을 것입니다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;우리가 www.naver.com을 주소창에 입력하게 되면, OS는 DNS서버로 요청을 보내게됩니다.&lt;/strong&gt; DNS 서버는 Domain Name Server로, 우리가 입력한 도메인인 www.naver.com과 같은 도메인 주소에 해당하는 IP주소를 갖고있는 서버이죠. 이 DNS 서버도 마찬가지로 서버를 가진 컴퓨터이기 때문에 우리가 데이터를 보내려면 DNS서버의 IP주소도 알아야만 데이터를 보낼 수 있습니다. 그러면 또 DNS 서버의 IP는 어떻게 알고있는걸까요?&lt;/p&gt;

&lt;p&gt;아래 사진은 제 맥북의 네트워크 설정입니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/tech/cs/2022-05-01-TCP/image2.PNG&quot; alt=&quot;image1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;DNS서버 주소는 이미 컴퓨터의 위와같이 등록이 되어있습니다. 이미 DNS서버의 IP 주소를 알고 있기 때문에, 도메인이 필요하면 해당 IP의 DNS서버로 접속해서 해당 도메인에 해당하는 IP 주소를 가져오는 것이죠.&lt;/p&gt;

&lt;p&gt;그럼 이제 우리가 네트워크로 보내야할 패킷에 우리 컴퓨터의 IP주소와 도착 컴퓨터의 IP주소가 패킷에 추가되었습니다.&lt;/p&gt;

&lt;h3 id=&quot;network-access&quot;&gt;Network Access&lt;/h3&gt;
&lt;p&gt;이제 IP주소까지 패킷에 포함되었으니, 네트워크에 접속하기 위한 정보가 필요합니다.&lt;/p&gt;

&lt;p&gt;지금까지는 모두 어떤 정보들이었나요? 대부분 도착 서버 컴퓨터의 www.naver.com에 대한 정보였습니다.&lt;/p&gt;

&lt;p&gt;하지만 Network Access 레이어에서는 도착 정보가 아닌, 내가 네트워크에 접근하기 위한 정보가 필요합니다.&lt;/p&gt;

&lt;p&gt;즉, 내 컴퓨터가 현재 물리적으로 연결되어있는 공유기의 정보가 필요한 것이죠.&lt;/p&gt;

&lt;p&gt;이러한 기기의 물리적 주소를 &lt;strong&gt;MAC 주소&lt;/strong&gt;라고 합니다.&lt;/p&gt;

&lt;p&gt;우리가 보통 IP를 이용한 통신이라함은, 각자가 연결되어있는 공유기까지의 과정을 말합니다. 보통 공유기 하나에 기기들이 연결되어있는 환경을 &lt;strong&gt;LAN(Local Area Network)&lt;/strong&gt;환경이라고 하는데, 이 환경들은 외부에 공개되지 않은 private IP로 연결되어있습니다. 공유기의 Public IP만이 공개되어있고, 나머지 기기들의 IP는 private IP로 되어있는 것이죠.&lt;br /&gt;
Public IP에 데이터를 보내면, 공유기가 이 IP를 받아서 자신과 연결되어있는 기기의 MAC주소를 통해서 이 데이터를 넘겨주게 됩니다.&lt;/p&gt;

&lt;p&gt;그렇다면 MAC 주소는 무엇이며, 또 어떻게 알 수 있을까요?&lt;/p&gt;

&lt;p&gt;MAC 주소는 네트워크 장비 혹은 컴퓨터라면 갖게되는 고유 주소입니다. 논리적인 IP주소와 달리 MAC주소는 물리적인 주소이기 때문에, 물론 변경하려면 변경이 가능하지만, 논리적으로 계속 값이 바뀌는 IP주소와 다르게 정말 그 기기의 주소를 명확하게 나타내주죠.&lt;/p&gt;

&lt;p&gt;예를들어, 행정주소를 생각해봅시다. 예전에는 지번을 기준으로 주소를 했지만 요즘은 모두 도로명 주소를 사용하죠? 이처럼 행정적인 주소의 기준은 바뀔수가 있습니다. 갑자기 우리집의 주소가 000-00 번지에서 00로 00길로 바뀐 것 처럼 말이죠.&lt;/p&gt;

&lt;p&gt;하지만 우리집이 한강이 시작되는 곳 옆에 있다고 생각해봅시다. 행정적 주소가 변경된다고 해도 우리집의 물리적인 위치는 항상 한강이 시작되는 곳 옆입니다. 물리적으로 그 자리에 존재 하기 때문이죠.&lt;/p&gt;

&lt;p&gt;이처럼 MAC 주소는 물리적인 주소를 사용함으로써 공유기의 도착한 정보를 해당기기에 확실하게 보내줍니다.&lt;/p&gt;

&lt;p&gt;그럼 우리는 이러한 MAC 주소를 어떻게 알 수 있을까요??&lt;/p&gt;

&lt;p&gt;바로 &lt;strong&gt;ARP(Address Resolution Protocol)&lt;/strong&gt;프로토콜을 사용해서 알아냅니다. 이 ARP 프로토콜은 IP 주소와 MAC 주소를 일대일 매칭하여 LAN 환경에서 목적지 IP에 맞는 MAC 주소로 해당 데이터를 전달합니다.&lt;/p&gt;

&lt;p&gt;그럼 만약에 우리가 원하는 목적지에 해당하는 IP가 LAN환경 안에 있다면 해당 기기의 MAC주소로 바로 정보를 보낼것이고, 만약 같은 LAN환경에 도착지 IP가 없다면 공유기를 통해 private IP가 public IP로 변환되어 네트워크로 나가게 되는 것입니다.&lt;/p&gt;

&lt;p&gt;그럼 라우터가 계속 자신과 연결된 라우터에게 도착지에 해당하는 IP와 매칭되는 MAC 주소를 가진 라우터가 있는지를 찾아내게 되고, 만약 응답을 받게 된다면 해당 라우터로 데이터를 전달한 뒤, 이를 전달받은 라우터가 해당 기기의 MAC 주소로 데이터를 전달하게 되는것이죠.&lt;/p&gt;

&lt;p&gt;자 이렇게 되면 대략 TCP/IP 프로토콜이 어떠한 정보들 담아서 네트워크와 통신하는지 알아봤는데요, 하나 더 알아두어야 할것이 있습니다. TCP는 연결지향형 프로토콜이라는 것이죠.&lt;/p&gt;

&lt;h2 id=&quot;tcpip-3-way-handshacking&quot;&gt;TCP/IP 3-Way-HandShacking&lt;/h2&gt;
&lt;p&gt;연결 지향형 프로토콜이란, 상대방과 통신할 준비과 되었는지를 확인하고 통신하는 프로토콜입니다. 연결 되는 과정이 따로 필요한 것이죠. 이러한 연결을 위해서 TCP/IP 프로토콜은 3-Way-HandShacking을 사용합니다.&lt;/p&gt;

&lt;p&gt;아까 설명했던 Transport 레이어에서 사용하는 TCP 헤더에는, &lt;strong&gt;플래그&lt;/strong&gt;가 있습니다. 이러한 플래그하나 하나들을 컨트롤 비트라고 하는데, 이것을 사용하여 통신하기전의 확인 작업을 거친 후 연결이 안정한 것을 확인하면 그때부터 통신을 시작합니다.&lt;/p&gt;

&lt;p&gt;이러한 연결 과정이 있기 때문에 TCP/IP 가 신뢰성 연결 지향 방식으로 불리는 것이죠.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/tech/cs/2022-05-01-TCP/image3.PNG&quot; alt=&quot;image1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;위 그림이 TCP 헤더의 플래그인데요, 여기서 3-Way-HandShaking을 위해서는 2개의 플래그, SYN과 ACK을 사용합니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/tech/cs/2022-05-01-TCP/image4.PNG&quot; alt=&quot;image1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;위 과정을 보시면 3번의 통신을 보내는데요, 먼저 client가 SYN이 설정된 플래그를 보내고 이것이 서버에 잘 도착되었다면 서버에서는 SYN과 ACK을 설정한 플래그를 보냅니다. 마지막으로 Client가 이를 잘 받았음을 확인하면, 마지막으로 ACK이 설정된 플래그를 보냄으로써 두 개의 기기가 통신할 준비가 완료되었음을 확인하는 것입니다.&lt;/p&gt;

&lt;p&gt;이렇게 연결을 먼저 확인하고 통신을 시작하면 한쪽이 꺼져있다거나 문제가 있어서 데이터가 제대로 도착하지 못하는 오류를 방지 할 수 있을것입니다.&lt;/p&gt;

&lt;h2 id=&quot;마무리하며&quot;&gt;마무리하며…&lt;/h2&gt;
&lt;p&gt;이렇게 TCP/IP 프로토콜에 대해 알아봤는데요. 조금 디테일한 부분이 생략되긴 했지만 대략적으로 어떻게 TCP/IP를 사용한 통신이 이루어지는지 알아보았습니다.&lt;/p&gt;

&lt;p&gt;물론 이것이 네트워크의 전부는 아닐 것입니다. 디테일한 부분들도 공부할게 무척 많으니, 하나 하나 천천히 다른 게시물에서 다뤄보도록 하겠습니다.&lt;/p&gt;</content><author><name>이민재</name><email>lmj938@naver.com</email></author><category term="CS" /><summary type="html">저번 게시물 : https://learnote-dev.com/cs/OSI-7-Layer-Model/</summary></entry><entry><title type="html">OSI 7 Layer Model</title><link href="http://localhost:4000/cs/OSI-7-Layer-Model/" rel="alternate" type="text/html" title="OSI 7 Layer Model" /><published>2022-04-30T00:00:00+00:00</published><updated>2022-04-30T00:00:00+00:00</updated><id>http://localhost:4000/cs/OSI%207%20Layer%20Model</id><content type="html" xml:base="http://localhost:4000/cs/OSI-7-Layer-Model/">&lt;h2 id=&quot;osi-7-계층이란&quot;&gt;OSI 7 계층이란?&lt;/h2&gt;
&lt;p&gt;OSI 7 계층은 네트워크에서 통신이 일어나느 과정을 7단계로 나누어 표현한 모델입니다. 우리가 데이터를 보내는것이 정확히 어떻게 진행되는지 알도록 할 수 있게 나눈 것이죠.&lt;/p&gt;

&lt;p&gt;이러한 계층 모델을 표준으로 사용하고 있기 때문에, 제조사가 다른 장비끼리도 이러한 표준화된 규약하에 통신이 가능한 것입니다.&lt;/p&gt;

&lt;p&gt;또, 이렇게 계층으로 나눠놓으면 통신이 일어나는 과정을 단계별로 파악할 수 있어 편리 합니다. 문제가 생기면 해당 문제가 어느 계층에서 일어난 것인지 판별하여 해당 계층만 고치면 되니까요.&lt;/p&gt;

&lt;p&gt;물론 지금의 실제적인 통신들은 대부분 TCP/IP 프로토콜로 동작하고 있지만, 장비개발과 통신 자체를 어떻게 표준으 로 잡을지 사용하는 것은 OSI 7 Layer이기 때문에 중요합니다. 또, 어차피 둘은 비슷한 방식이기 때문에 OSI 7을 이해하면 TCP/IP를 이해하는 것도 어렵지 않습니다.&lt;/p&gt;

&lt;p&gt;OSI 7 레이어는 이름에 맞게  아래와 같은 7개의 계층을 가집니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Application&lt;/li&gt;
  &lt;li&gt;Presentation&lt;/li&gt;
  &lt;li&gt;Session&lt;/li&gt;
  &lt;li&gt;Transport&lt;/li&gt;
  &lt;li&gt;Network&lt;/li&gt;
  &lt;li&gt;Data Link&lt;/li&gt;
  &lt;li&gt;Physical&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;그럼 아까 현재는 대부분이 TCP/IP 모델을 사용하고 있다고 했죠? 그럼 TCP/IP은 어떤 계층을 갖고 있을까요? 아래와 같습니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Application&lt;/li&gt;
  &lt;li&gt;Transport&lt;/li&gt;
  &lt;li&gt;Internet&lt;/li&gt;
  &lt;li&gt;Network Access&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;OSI 7 모델과 비슷한데, 밑의 Network 부분과 Application 부분으로 통합되어 있는 것이 다른걸 알 수 있죠.&lt;/p&gt;

&lt;p&gt;그림으로 살펴 보겠습니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/tech/cs/2022-04-30-OSI/image1.PNG&quot; alt=&quot;image1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;같은 모습인데, Presentation과 Session 레이어가 Application 레이어 하나로 통합되었고, Network Layer가 Internet Layer로 바뀌었으며, Data Link Layer와 Physical Layer가 통합되었습니다.&lt;/p&gt;

&lt;p&gt;둘의 차이점은 &lt;strong&gt;OSI 7 레이어는 개념적이고 이론적인 표준&lt;/strong&gt;이라면, &lt;strong&gt;TCP/IP는 실무적 표준&lt;/strong&gt;이라는 것입니다. &lt;strong&gt;OSI는 개념적인 모델로 우리가 데이터를 보낼때는 이러한 과정들을 거쳐서 통신을 하자! 라고 이론적으로 설명하기위한 모델&lt;/strong&gt;이고, &lt;strong&gt;TCP/IP는 실제적으로 우리가 사용하는 클라이언트-서버 모델&lt;/strong&gt;인 것입니다.&lt;/p&gt;

&lt;p&gt;이게 사실 무슨말인지 이해가 어렵습니다. 저도 이 내용을 공부하며 든 생각이, &lt;strong&gt;아니  OSI 7 레이어가 표준이라면서 왜 TCP/IP를 대부분 쓰고 있는것이며, 그렇다면 우리가 OSI 7레이어를 공부해야할 필요가 뭐가 있는거지? 그냥 TCP/IP만을 알면 되잖아?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;그래서 이 둘이 무슨 차이가 있는지 찾아보았습니다.&lt;/p&gt;

&lt;h2 id=&quot;osi-7-과-tcpip의-차이점&quot;&gt;OSI 7 과 TCP/IP의 차이점&lt;/h2&gt;
&lt;p&gt;OSI 7과 TCP/IP 중에서 먼저나온 것은 TCP/IP 입니다. OSI 7을 표준으로 정하기 전에 이미 TCP/IP를 적용한 여러 통신 제품들이 나오고 있었죠. 그러다 보니 모두 TCP/IP라는 기술은 사용하지만 디테일한 부분이 달라서 회사가 다른 제품끼리는 호환이 안되는 문제들이 하나 둘 생기기 시작합니다.&lt;/p&gt;

&lt;p&gt;이에 ISO(국제 표준화 기구)는 이를 통일하기 위해 국제 표준인 OSI 7을 발표하게 됩니다. 하지만 이미 대부분의 장비들은 TCP/IP를 기준으로 만들어졌기 때문에, 이를 갑자기 OSI 7 모델로 바꾸는 것은 너무나 복잡하고 어려운 일이기도 하고, 이미 어느정도 실제로 사용되며 신뢰성 있는 TCP/IP 모델을 하루아침에 OSI 7 모델로 바꾸는것도 너무 리스크가 컸습니다.&lt;/p&gt;

&lt;p&gt;그래서 기업들은 그대로 TCP/IP 모델을 사용하되, 국제 표준인 OSI 7 모델을 참고하며 조금씩 TCP/IP 모델을 수정하여 표준에는 호환 될 수 있도록 수정하기 시작합니다. 이것이 현재의 TCP/IP가 되어 널리 사용되고 있는 것이죠.&lt;/p&gt;

&lt;p&gt;따라서 실제로는 TCP/IP를 사용하고 있지만, 국제적인 표준은 OSI 7 모델이기 때문에 OSI 7 모델에 대해서도 알아야 하는 것입니다. 결국 TCP/IP도 OSI 7 모델을 참고하여 수정한 모델이니까요.&lt;/p&gt;

&lt;p&gt;그럼 이제 왜 OSI 7 모델을 공부해야하는지 알았으니, OSI 7 모델의 계층을 하나하나 알아보도록 합시다.&lt;/p&gt;

&lt;p&gt;영어로 되어있어서 어렵지만 내용은 단순합니다. 우리가 어떤 데이터를 우리 컴퓨터에서 다른 컴퓨터로 보내면, 위의 7계층을 위에서부터 데이터를 보내고, 다른 컴퓨터에서는 아래에서부터 위로 데이터를 받는 것이죠.&lt;/p&gt;

&lt;p&gt;그러면 이 계층에 대해서 하나씩 위에서부터 설명 해보겠습니다..&lt;/p&gt;

&lt;h2 id=&quot;application&quot;&gt;Application&lt;/h2&gt;
&lt;p&gt;이 계층은 통신을 위해 실행하는 응용프로그램의 계층입니다. 우리가 메시지를 보내려면, 어떤 프로그램을 통해서 보내야겠죠? 예를 들어 보통은 카카오톡이나 라인 등의 메신저 프로글매을 사용할것입니다.&lt;/p&gt;

&lt;p&gt;만약 카카오톡에서 우리가 “안녕”이라는 메시지를 보내면, 카카오톡 프로그램이 HTTP, FTP, DHCP, POP3등의 프로토콜을 사용해서 사용해서 네트워크에 접근을 시작할 것입니다.&lt;/p&gt;

&lt;p&gt;이 부분에서는 사용자를 위한 인터페이스를 지원합니다. 카카오톡을 키면 우리가 사용할 수 있도록 예쁘게 대화창과 보내기 버튼이 있죠? 이처럼 이 부분에서는 사용자가 눈으로 볼 수 있는 부분으로, 직접 우리가 원하는 작업을 수행하기 위한 부분입니다.&lt;/p&gt;

&lt;p&gt;이 상태에서의 메시지는 이러한 모양일 것입니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/tech/cs/2022-04-30-OSI/image2.PNG&quot; alt=&quot;image1&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;presentation&quot;&gt;Presentation&lt;/h2&gt;
&lt;p&gt;이 계층에서는 데이터의 변환, 압축, 암호화가 이루어집니다. 기기 간에 다른 표현 방식을 모두가 이해할 수 있는 하나의 통일된 방식으로 변경하는것이죠.&lt;/p&gt;

&lt;p&gt;응용프로그램에서 보낸 메시지를 네트워크를 위해 변환하거나, 반대로 네트워크에서 받아 어플리케이션이 이해할 수 있도록 우리가 자주 사용하는 JPEG, TIFF, GIF등등으로 형식을 맞춰주는 것입니다.&lt;/p&gt;

&lt;p&gt;그렇다면 이 부분에서는 메시지가 이렇게 송신에 유리하도록 변환될 것입니다.&lt;/p&gt;

&lt;p&gt;또, 데이터 유형과 전송길이등 작업 정보가 담긴 헤더가 메시지에 추가됩니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/tech/cs/2022-04-30-OSI/image3.PNG&quot; alt=&quot;image1&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;session&quot;&gt;Session&lt;/h2&gt;
&lt;p&gt;세션 게층은 네트워크상에서의 양쪽 연결을 관리하고 연결을 지속시켜주는 계층입니다.&lt;/p&gt;

&lt;p&gt;응용 프로그램 간 연결을 해주고 연결이 안정될 수 있도록 유지하고, 혹시나 데이터 교환에 에러가 발생한다면 다시 재연결 및 복구를 담당합니다. 변환한 메시지에 동기점을 삽입하여, 만약 누락된 정보가 있다면 동기점을 통해 판별하여 해당 부분부터 다시 전송할 수 있는 것이죠.&lt;/p&gt;

&lt;p&gt;이 부분에서도 마찬가지로 작업에 대한 정보가 담긴 헤더가 추가됩니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/tech/cs/2022-04-30-OSI/image4.PNG&quot; alt=&quot;image1&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;transport&quot;&gt;Transport&lt;/h2&gt;
&lt;p&gt;여기서는 &lt;strong&gt;Port 번호&lt;/strong&gt;를 사용하여 도착지 컴퓨터의 어떤 포트로 해당 데이터를 보내야 할지 포트정보를 추가합니다.&lt;/p&gt;

&lt;p&gt;컴퓨터가 데이터를 받으면 이 데이터를 어떤 프로세스 (프로그램)에 전달해야할지 모르는 상태입니다. 데이터가 들어왔지만, 이걸 컴퓨터 안에있는 어느 어플리케이션에 보낼지 모르는 상태입니다. 따라서 프로세스들마다 하나씩 고유의 포트번호를 겹치지 않도록 컴퓨터는 갖고있죠.&lt;/p&gt;

&lt;p&gt;보통 우리가 웹페이지에 접속한다고 하면, 웹페이지의 웰노운 포트인 80포트로 접속하게 됩니다. 그래서 만약 웹으로 우리의 데이터를 보내는거라면, 80이라는 번호가 여기서 포함되는 것이죠. 서버 컴퓨터의 80 번호로 온 데이터는, 해당 웹페이지 프로세스의 데이터가 되는 것입니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/tech/cs/2022-04-30-OSI/image5.PNG&quot; alt=&quot;image1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;마찬가지로 헤더가 하나 붙고, 이 헤더에는 포트의 정보가 담기게 될 것 입니다.&lt;/p&gt;

&lt;p&gt;여기서부터의 전송 단위를 “&lt;strong&gt;세그먼트&lt;/strong&gt;“라고 합니다.&lt;/p&gt;

&lt;h2 id=&quot;network&quot;&gt;Network&lt;/h2&gt;
&lt;p&gt;네트워크 계층에서는 컴퓨터의 주소인 IP를 데이터에 붙이게 됩니다. 출발 IP와 도착 IP가 헤더에 포함되어 전송 되는 것이죠.&lt;/p&gt;

&lt;p&gt;이러한 IP를 기반으로 복잡한 인터넷 망에서 데이터 전송을 위한 최적의 경로를 선택합니다. 이를 찾기 위해서 보통 &lt;strong&gt;라우터&lt;/strong&gt;가 이 계층에 자리잡습니다. 라우터는 라우팅 프로토콜을 통해 가장 빠른 경로를 찾아 안전하게 전달하는 기능을 수행합니다.&lt;/p&gt;

&lt;p&gt;하지만 보통 우리는 해당 도착 컴퓨터의 IP를 알고있지 않습니다. 대신 &lt;strong&gt;도메인&lt;/strong&gt;을 알고있는데요, www.naver.com과 같은 도메인을 입력하게 되면 컴퓨터는 연결된 DNS 서버에 도메인에 해당하는 IP를 찾아서 보내려는 데이터에 적용합니다. 숫자는 외우기 힘드니, 이러한 방식으로 주소를 정하게 된것이죠.&lt;/p&gt;

&lt;p&gt;그렇게 DNS 서버에서 우리가 입력한 도메인의 해당하는 IP를 도착지 IP로, 우리의 컴퓨터 IP를 출발지 IP로 헤더에 담습니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/tech/cs/2022-04-30-OSI/image6.PNG&quot; alt=&quot;image1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;이렇게 네트워크 단에서 포장된 데이터를 “패킷”이라고 합니다.&lt;/p&gt;

&lt;h2 id=&quot;datalink&quot;&gt;DataLink&lt;/h2&gt;
&lt;p&gt;데이터 링크에서는 장치간 신호를 전달하는 물리 계층을 이용하여 연결된 네트워크 노드간에 데이터를 전송합니다.&lt;/p&gt;

&lt;p&gt;여기서는 &lt;strong&gt;프레이밍&lt;/strong&gt;을 하는데요, 프레임이라는 1111과 0000으로 이루어진 프레임으로 감쌉니다. 이렇게 감싸주게 되면 1111이 데이터의 시작, 0000이 끝인걸 나타내게됨으로, 여러개의 컴퓨터에서 한번에 데이터가 들어와도 이 데이터들이 섞이지 않고 구분될 수 있을 것입니다.&lt;/p&gt;

&lt;p&gt;이렇게 데이터의 시작을 &lt;strong&gt;트레일러&lt;/strong&gt; 에 담아서 데이터가 시작되는 부분을 구분합니다.&lt;/p&gt;

&lt;p&gt;또한 헤더에는 전송되는 다음 노드의 물리적 주소(MAC) 주소를 담게 됩니다. 랜선 안에 있는 컴퓨터끼리는 IP대신 이러한 MAC 주소로 통신이 가능하기 때문에, 이러한 MAC 주소를 통해서  가장 가까운 라우터로&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/tech/cs/2022-04-30-OSI/image7.PNG&quot; alt=&quot;image1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;여기서부터의 계층 단위를 &lt;strong&gt;프레임&lt;/strong&gt;이라고 합니다&lt;/p&gt;

&lt;h2 id=&quot;physical&quot;&gt;Physical&lt;/h2&gt;
&lt;p&gt;이제 여기서부터는 데이터를 포장하고 오류를 확인하는 것이 아닌, 실제로 물리적으로 데이터를 전송하는 과정입니다. 앞에서 여러 정보를 담고 보내기 위해서 암호화 및 인코딩한 데이터를 아날로그 신호로 바꾸어 전선을 통해서 전송하는 것이죠.&lt;/p&gt;

&lt;p&gt;프레임에 담긴 101010101010… 등의 디지털 신호를 아날로그 신호로 바꾸어 보내는 것입니다.&lt;/p&gt;

&lt;p&gt;아날로그 신호로 인코딩한 정보를 전선을 통해서 보낸 뒤, 이를 받은 컴퓨터는 다시 Pysical로 받아 이를 다시 디지털 신호로 디코딩 하는 것이죠.&lt;/p&gt;

&lt;h2 id=&quot;정리&quot;&gt;정리&lt;/h2&gt;
&lt;p&gt;따라서 위의 과정을 통해서 Application 단에서 Physical로 우리가 데이터를 보내면, 이 아날로그 신호가 전선을 타고 이동하여 다시 Physical 에서 Application 단으로 아까의 데이터 패키징을 역순으로 진행하면서 데이터를 다시 Application 단에서 확인할 수 있게 되는 것입니다.&lt;/p&gt;

&lt;h2 id=&quot;마무리&quot;&gt;마무리&lt;/h2&gt;
&lt;p&gt;이렇게 OSI 7 Layer에 대해 알아보았는데요. 실제로는 TCP/IP를 대부분 사용하기 때문에 조금 다를 수 있지만, 기본적으로 네트워크를 통한 데이터 교환은 위에서 설명한 OSI 7 Layer를 지향합니다. 실제로도 TCP/IP도 대부분의 과정을 위와 같이 진행하고 있기도 하구요.&lt;/p&gt;

&lt;p&gt;이렇게 계층을 나누어 놓음으로써, 만약 네트워크에 장애가 생긴다면 1번의 Physical 레이어 부터 해당하는 기기들이 제대로 작동하는지 하나씩 확인하면 어디가 문제여서 장애가 발생하고 있는지 확인하기 편할 것입니다.&lt;/p&gt;</content><author><name>이민재</name><email>lmj938@naver.com</email></author><category term="CS" /><summary type="html">OSI 7 계층이란? OSI 7 계층은 네트워크에서 통신이 일어나느 과정을 7단계로 나누어 표현한 모델입니다. 우리가 데이터를 보내는것이 정확히 어떻게 진행되는지 알도록 할 수 있게 나눈 것이죠.</summary></entry><entry><title type="html">마이크로 서비스 아키텍쳐 - MSA</title><link href="http://localhost:4000/cs/%EB%A7%88%EC%9D%B4%ED%81%AC%EB%A1%9C-%EC%84%9C%EB%B9%84%EC%8A%A4-%EC%95%84%ED%82%A4%ED%85%8D%EC%B3%90-MSA/" rel="alternate" type="text/html" title="마이크로 서비스 아키텍쳐 - MSA" /><published>2022-04-29T00:00:00+00:00</published><updated>2022-04-29T00:00:00+00:00</updated><id>http://localhost:4000/cs/%EB%A7%88%EC%9D%B4%ED%81%AC%EB%A1%9C%20%EC%84%9C%EB%B9%84%EC%8A%A4%20%EC%95%84%ED%82%A4%ED%85%8D%EC%B3%90%20-%20MSA</id><content type="html" xml:base="http://localhost:4000/cs/%EB%A7%88%EC%9D%B4%ED%81%AC%EB%A1%9C-%EC%84%9C%EB%B9%84%EC%8A%A4-%EC%95%84%ED%82%A4%ED%85%8D%EC%B3%90-MSA/">&lt;h2 id=&quot;msa란&quot;&gt;MSA란?&lt;/h2&gt;
&lt;p&gt;기존의 서비스는 모노리식(Monolithic ) 아키텍쳐였습니다. 하나의 애플리케이션안에 모든 비즈니스 로직이 들어가있는 구조인 것이죠.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/tech/cs/2022-04-29-마이크로/image1.PNG&quot; alt=&quot;image1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;이렇게 모든 비즈니스 로직이 하나로 되어있었기 때문에, 모노리식 아키텍쳐는 여러가지 단점을 갖고있었습니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;개발 유연성의 한계&lt;/li&gt;
  &lt;li&gt;요구사항 대처 시간 소요&lt;/li&gt;
  &lt;li&gt;장애 격리 / 신뢰성&lt;/li&gt;
  &lt;li&gt;배포 / 롤백 리스크&lt;/li&gt;
  &lt;li&gt;리소스 낭비&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;아무래도 하나의 커다란 애플리케이션이다보니 개발하는데에 있어서 부분을 수정하려 해도 반드시 모든 비즈니스 로직을 가져와야 해서 개발 유연성도 떨어지고, 만약 에러가 발생하면 일정 부분의 문제인데도 사이트 전체가 마비된다던지, 배포나 롤백을 할때도 하나의 기능을 배포하고 롤백하기 위해서 모두가 대기해야 하는 일까지 발생했습니다.&lt;/p&gt;

&lt;p&gt;이 모든 문제점은 바로 &lt;strong&gt;여러 기능이 뭉쳐서 강하게 결합&lt;/strong&gt; 되었기 떄문에 발생하는 문제들이었죠.&lt;/p&gt;

&lt;p&gt;그래서 개발자들은 이 기능들을 쪼개보기로 했습니다.&lt;/p&gt;

&lt;p&gt;이것이 바로 &lt;strong&gt;마이크로 서비스 아키텍쳐 (Micro Service Architecture)&lt;/strong&gt; 입니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/tech/cs/2022-04-29-마이크로/image2.PNG&quot; alt=&quot;image1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;마이크로 서비스 아키텍쳐를 그림으로 나타내면 위의 그림과 같은데요. 하나의 서비스가 아닌 여러개의 마이크로 서비스로 나누어, 심지어는 DB조차 각자의 DB를 갖고있는 것을 확인할 수 있습니다. 이들은 각각의 서비스로 독립되어 있으며, 서로 API를 통해서 통신하며 전체의 서비스가 동작하도록 합니다.&lt;/p&gt;

&lt;p&gt;만약 우리가 프로그램을 개발할 때, 로직을 하나의 메인함수에 모두 구현하게 된다면 어떨까요?&lt;br /&gt;
유지보수가 어려울 뿐더러, 하나의 기능에서만 문제가 발생해도 프로그램 전체가 다운될 것입니다. 그래서 프로그램을 개발할때도 좋은 프로그램은 최대한 클래스가 분리되어있고 함수가 분리되어있는 프로그램이죠.&lt;/p&gt;

&lt;p&gt;그래서 마이크로 서비스 아키텍쳐도 이와 같이 &lt;strong&gt;하나의 큰 서비스를 유지보수하고 배포하기 편리 하도록 여러개의 어플리케이션으로 나누어 조금 더 효율적인 개발을 할 수 있도록 한 것입니다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;그렇다면, 마이크로 서비스 아키텍쳐가 기존의 모노리식 아키텍쳐에 비해 어떤 장점들이 있는지 자세하게 알아보겠습니다.&lt;/p&gt;

&lt;h2 id=&quot;msa의-장점&quot;&gt;MSA의 장점&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;기존 방식에 비해 새로운 기능 추가 및 업데이트가 간편하다.&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;모노리식 방식은 소프트웨어의 모든 구성 요소가 한 프로젝트에 합쳐져 있어서 큰 변화에 대응이 어렵고, 새로운 기능 추가 및 업데이트를 할 때마다 프로젝트 전체를 배포하고 업데이트해야해서 어려움이 있었습니다.&lt;/p&gt;

&lt;p&gt;하지만 마이크로 서비스 아키텍쳐는 요소들이 나뉘어져 있기때문에, 하나의 서비스만 유지보수하고 업데이트가 가능합니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;하나의 서비스가 문제가 있다면, 하나의 서버에만 장애가 발생한다.&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;기존의 서비스는 하나의 장애가 전체 서버의 장애을 일으키지만, 마이크로 서비스 아키텍쳐는 해당 기능의 서버에만 장애가 발생하기 때문에 서비스가 비교적 안정합니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;필요한 자원만 Scale-Out할 수있다.&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;AWS등의 클라우드 서비스를 이용하면 간단하게 서버의 리소스를 늘릴 수 있습니다. 하지만 모노리식의 경우는 모든 프로젝트가 하나이기 때문에, 한 기능에서의 리소스를 증가시키고 싶다면 서버전체의 리소스를 올려야 합니다.&lt;/p&gt;

&lt;p&gt;하지만 마이크로 서비스 아키텍쳐는 해당 기능을 담당하는 서버의 리소스만 증가시켜주면 되기 때문에, 조금 더 효율적으로 자원을 사용할 수 있습니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;민첩하고 손쉬운 배포 및 업데이트&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;기존 방식은 프로젝트가 하나로 되어있기 때문에, 배포와 업데이트를 할 때 항상 모든 파일 전체를 배포하고 업데이트 합니다. 이것은 개발자 입장에서 굉장히 리스크가 있는 방식입니다.&lt;/p&gt;

&lt;p&gt;하지만 마이크로 서비스 아키텍쳐는 Blue-Green 배포 방식을 사용합니다. 이 배포방식은 Blue와 Green 두개의 인스턴스를 만들어놓고, 예를 들어 Green에서 현재 버젼의 서비스가 동작하고 있다면, Blue에 먼저 새로운 버젼의 서비스를 올려 테스트 해봅니다. 만약 Blue의 새로운 버젼의 서비스가 잘 동작한다면, Green으로 오던 트래픽을 Blue로 옮겨주는 것입니다. 이렇게 한다면 만약에 새로운 버젼에서 오류가 발생한다 해도, 바로 원래의 Green으로 트래픽을 옮겨주면 서비스가 정상적으로 동작하게 될 것입니다.&lt;/p&gt;

&lt;p&gt;기존방식과 달리 롤백이 가능하기 때문에, 배포에서 발생가능한 위험을 최소화 할 수 있습니다.&lt;/p&gt;

&lt;p&gt;이렇게 마이크로 서비스는 다양한 장점을 갖고있습니다. 하지만 모든 방법들이 그렇듯, 한가지의 방법이 압도적으로 좋아서 무조건 이 방법만을 사용하면 되는 것은 아닙니다.&lt;/p&gt;

&lt;p&gt;그렇다면 MSA는 어떤 상황에서 적용해야하고, 적용했을 때 어떤점에 주의해야 할까요?&lt;/p&gt;

&lt;h2 id=&quot;msa를-적용하기-전&quot;&gt;MSA를 적용하기 전&lt;/h2&gt;
&lt;p&gt;먼저, 빠르고 잦은 배포가 필요하며, 성능에 어느정도 민감한 서비스인지 생각해봐야합니다.&lt;/p&gt;

&lt;p&gt;아무래도 MSA는 여러가지의 서비스로 이루어져있기 때문에, 서비스간의 통신이 잦아집니다. 하나의 서비스가 작동할 때보다는 여러개의 서비스가 통신해야 하기 때문에 퍼포먼스가 감소할 수 밖에 없게 됩니다. 그래서 성능에 매우 민감한 서비스라면, MSA를 적용하기 전에 충분히 고려해보아야 합니다.&lt;/p&gt;

&lt;p&gt;또, 트랜잭션 유지가 어렵기 때문에, 이에 각별히 신경써야 합니다.&lt;/p&gt;

&lt;p&gt;기존에는 하나의 단일 DB를 사용하기 때문에 DB가 기본적으로 제공하는 트랜잭션 기능, 커밋 롤백등을 사용해 데이터를 안정적으로 관리할 수 있었지만, MSA는 DB가 분산되어 있기 때문에 단일 DB의 트랜잭션으로는 이를 해결할 수 없습니다.&lt;/p&gt;

&lt;p&gt;마지막으로, 서비스가 많기 때문에 반드시 배포와 릴리즈를 자동화 해야합니다.&lt;/p&gt;

&lt;p&gt;만약 자동화 되지 않은 상태로 배포와 릴리즈를 한다면, 하나하나의 서비스들을 일일히 수작업으로 배포하고 릴리즈 해주어야 하는데, 이는 몹시 비효율적입니다.&lt;/p&gt;

&lt;h2 id=&quot;마무리하며&quot;&gt;마무리하며…&lt;/h2&gt;
&lt;p&gt;이처럼 마이크로 서비스 아키텍쳐는 많은 장점을 갖고있음과 동시에 고려해보아야할 여러가지 사항을 갖고있습니다. 그리고 아직 여러곳에서 적용하기 시작한지 얼마 되지않았기 때문에 레퍼런스도 부족하고, 이러한 경험이 있는 사람들이 잘 없기 때문에 바로 적용하기에는 쉽지 않은 방식입니다.&lt;/p&gt;

&lt;p&gt;심지어 MSA로 전환하는 것은 개발의 기술을 바꾸는 것을 넘어 일하는 방식이 아예 바뀌는 큰 변화입니다. 따라서 손바닥 뒤집듯이 오늘부터 MSA 방식으로 가자! 할 수는 없는거죠.&lt;/p&gt;

&lt;p&gt;하지만 그럼에도 요즘 대부분의 기업들이 MSA 방식을 점차 적용하는 것은, 분명히 MSA가 가진 장점이 현재의 비즈니스를 더 나은 방식으로 바꿔준다는 증거일 것입니다.&lt;/p&gt;

&lt;p&gt;아마도 앞으로 더욱 더 모든 기업들이 점차 MSA 방식을 채택할 가능성이 커보이니, 원하는 기업에 가고싶다면 적어도 이러한 방식이 어떠한 장점과 단점이 있는지는 알아 두는 것이 좋을 것 같습니다.&lt;/p&gt;

&lt;h3 id=&quot;자료출처&quot;&gt;자료출처&lt;/h3&gt;
&lt;blockquote&gt;
  &lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=8d4h7K_Fq-0&quot;&gt;네이버 클라우드 플랫폼 유튜브&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;</content><author><name>이민재</name><email>lmj938@naver.com</email></author><category term="CS" /><summary type="html">MSA란? 기존의 서비스는 모노리식(Monolithic ) 아키텍쳐였습니다. 하나의 애플리케이션안에 모든 비즈니스 로직이 들어가있는 구조인 것이죠.</summary></entry><entry><title type="html">파도 파도 끝이없는…</title><link href="http://localhost:4000/diary-univ/%ED%8C%8C%EB%8F%84-%ED%8C%8C%EB%8F%84-%EB%81%9D%EC%9D%B4%EC%97%86%EB%8A%94/" rel="alternate" type="text/html" title="파도 파도 끝이없는…" /><published>2022-04-29T00:00:00+00:00</published><updated>2022-04-29T00:00:00+00:00</updated><id>http://localhost:4000/diary-univ/%ED%8C%8C%EB%8F%84%20%ED%8C%8C%EB%8F%84%20%EB%81%9D%EC%9D%B4%EC%97%86%EB%8A%94...</id><content type="html" xml:base="http://localhost:4000/diary-univ/%ED%8C%8C%EB%8F%84-%ED%8C%8C%EB%8F%84-%EB%81%9D%EC%9D%B4%EC%97%86%EB%8A%94/">&lt;h2 id=&quot;20220429&quot;&gt;2022.04.29&lt;/h2&gt;
&lt;p&gt;오늘 여러 인턴 후기들을 좀 보다가 면접 과정에서의 질문들을 봤는데, 좀 멘붕이 왔다.&lt;/p&gt;

&lt;p&gt;나름 이제 어느정도 지식들이 있다고 생각했는데, 솔직히 거기 있는 면접 질문중에 완벽하게 대답할 수 있는게 하나도 없었다.&lt;/p&gt;

&lt;p&gt;나름 여러가지 기술도 만져보고 요즘은 스프링이랑 JPA강의도 열심히 듣고 있다고 생각했는데…&lt;/p&gt;

&lt;p&gt;애초에 컴공갔으면은 그래도 여러가지 CS지식을 학교에서 공부했을텐데, 내가 좀 관심이 많다고 한들 내가 비전공자라는 사실을 잊고 너무 기술을 배우는데에만 집중 했던것 같다.&lt;/p&gt;

&lt;p&gt;그래서 오늘부터는 하루에 한개씩 CS 지식을 공부하고 이를 블로그에 적어보려고 한다.&lt;/p&gt;

&lt;p&gt;요즘 점점 하루에 필수로 해야할것 들이 늘어나는 것같다…&lt;/p&gt;

&lt;p&gt;지금만 해도 운동하고 체중 기록하기, 하루에 토익 두챕터 풀기, 영어로 된 글하나 읽기, 코딩테스트 한문제 풀기 등등 …&lt;/p&gt;

&lt;p&gt;그래도 하다보니까 반드시 하루에 해야할 나와의 약속을 지켜놓고 지켜가는게 재미있기도하고, 하루에 하나 한다는게 지키기 쉬우면서도 1달, 1년씩 쌓여가면 어마어마한 성취가 되는 것 같아서 나한테 가장 맞는 방법인 것 같기도하다.&lt;/p&gt;

&lt;p&gt;눈앞의 작은 것들만 치워버리면 되니, 책상에 앉아서 뭘 할지 고민한다거나 계획하는 시간이 없어져서 좋다. 그냥 눈앞에 있는 할일들을 하나하나 지워가며 무작정 할 뿐이다.&lt;/p&gt;

&lt;p&gt;하루의 작은 성취들이 모이고 모여 결국 큰 성과가 되는 것 같다.&lt;/p&gt;

&lt;p&gt;물론 일기 쓰는게 제일 귀찮아서 잘 안쓰기는 하는데, 열심히 또 써봐야지…&lt;/p&gt;</content><author><name>이민재</name><email>lmj938@naver.com</email></author><category term="diary-univ" /><category term="일기장" /><summary type="html">2022.04.29 오늘 여러 인턴 후기들을 좀 보다가 면접 과정에서의 질문들을 봤는데, 좀 멘붕이 왔다.</summary></entry><entry><title type="html">[Programmers] 셔틀버스 (Python3)</title><link href="http://localhost:4000/programmers/%EC%85%94%ED%8B%80-%EB%B2%84%EC%8A%A4(Python3)/" rel="alternate" type="text/html" title="[Programmers] 셔틀버스 (Python3)" /><published>2022-04-27T00:00:00+00:00</published><updated>2022-04-27T00:00:00+00:00</updated><id>http://localhost:4000/programmers/%EC%85%94%ED%8B%80%20%EB%B2%84%EC%8A%A4(Python3)</id><content type="html" xml:base="http://localhost:4000/programmers/%EC%85%94%ED%8B%80-%EB%B2%84%EC%8A%A4(Python3)/">&lt;h2 id=&quot;문제설명&quot;&gt;문제설명&lt;/h2&gt;
&lt;p&gt;셔틀버스&lt;/p&gt;

&lt;p&gt;카카오에서는 무료 셔틀버스를 운행하기 때문에 판교역에서 편하게 사무실로 올 수 있다. 카카오의 직원은 서로를 ‘크루’라고 부르는데, 아침마다 많은 크루들이 이 셔틀을 이용하여 출근한다.&lt;/p&gt;

&lt;p&gt;이 문제에서는 편의를 위해 셔틀은 다음과 같은 규칙으로 운행한다고 가정하자.&lt;/p&gt;

&lt;p&gt;셔틀은 09:00부터 총 n회 t분 간격으로 역에 도착하며, 하나의 셔틀에는 최대 m명의 승객이 탈 수 있다.&lt;br /&gt;
셔틀은 도착했을 때 도착한 순간에 대기열에 선 크루까지 포함해서 대기 순서대로 태우고 바로 출발한다. 예를 들어 09:00에 도착한 셔틀은 자리가 있다면 09:00에 줄을 선 크루도 탈 수 있다.&lt;br /&gt;
일찍 나와서 셔틀을 기다리는 것이 귀찮았던 콘은, 일주일간의 집요한 관찰 끝에 어떤 크루가 몇 시에 셔틀 대기열에 도착하는지 알아냈다. 콘이 셔틀을 타고 사무실로 갈 수 있는 도착 시각 중 제일 늦은 시각을 구하여라.&lt;/p&gt;

&lt;p&gt;단, 콘은 게으르기 때문에 같은 시각에 도착한 크루 중 대기열에서 제일 뒤에 선다. 또한, 모든 크루는 잠을 자야 하므로 23:59에 집에 돌아간다. 따라서 어떤 크루도 다음날 셔틀을 타는 일은 없다.&lt;/p&gt;

&lt;h2 id=&quot;입력-형식&quot;&gt;입력 형식&lt;/h2&gt;
&lt;p&gt;셔틀 운행 횟수 n, 셔틀 운행 간격 t, 한 셔틀에 탈 수 있는 최대 크루 수 m, 크루가 대기열에 도착하는 시각을 모은 배열 timetable이 입력으로 주어진다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;0 ＜ n ≦ 10&lt;/li&gt;
  &lt;li&gt;0 ＜ t ≦ 60&lt;/li&gt;
  &lt;li&gt;0 ＜ m ≦ 45&lt;/li&gt;
  &lt;li&gt;timetable은 최소 길이 1이고 최대 길이 2000인 배열로, 하루 동안 크루가 대기열에 도착하는 시각이 HH:MM 형식으로 이루어져 있다.&lt;/li&gt;
  &lt;li&gt;크루의 도착 시각 HH:MM은 00:01에서 23:59 사이이다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;출력-형식&quot;&gt;출력 형식&lt;/h2&gt;
&lt;p&gt;콘이 무사히 셔틀을 타고 사무실로 갈 수 있는 제일 늦은 도착 시각을 출력한다. 도착 시각은 HH:MM 형식이며, 00:00에서 23:59 사이의 값이 될 수 있다.&lt;/p&gt;

&lt;h2 id=&quot;입출력-예제&quot;&gt;입출력 예제&lt;/h2&gt;
&lt;p&gt;|n|t|m|timetable|answer|&lt;br /&gt;
|:—:|:—:|:—:|:—:|:—:|&lt;br /&gt;
|1|1|5|[“08:00”, “08:01”, “08:02”, “08:03”]|”09:00”|&lt;br /&gt;
|2|0|2|[“09:10”, “09:09”, “08:00”]|”09:09”|&lt;br /&gt;
|2|1|2|[“09:00”, “09:00”, “09:00”, “09:00”]|”08:59”|&lt;br /&gt;
|1|1|5|[“00:01”, “00:01”, “00:01”, “00:01”, “00:01”]|”00:00”|&lt;br /&gt;
|1|1|1|[“23:59”]|”09:00”|&lt;br /&gt;
|10|60|45|[“23:59”,”23:59”, “23:59”, “23:59”, “23:59”, “23:59”, “23:59”, “23:59”, “23:59”, “23:59”, “23:59”, “23:59”, “23:59”, “23:59”, “23:59”, “23:59”|”18:00”|&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;collections&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;deque&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;solution&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;timetable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;bus_arrive&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;540&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;timetable&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;deque&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sorted&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;timetable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; 
                                            
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;bus_arrive&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bus_arrive&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    
    &lt;span class=&quot;n&quot;&gt;buses&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;
    
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bus_arrive&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;buses&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;
        
    &lt;span class=&quot;n&quot;&gt;time&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bus&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buses&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;timetable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;buses&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bus&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;time&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bus&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;timetable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;time&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;time_parser&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;timetable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;popleft&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;time&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bus&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;buses&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bus&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;timetable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;appendleft&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;time_re_parser&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    
    &lt;span class=&quot;n&quot;&gt;last_bus&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;is_empty_bus&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;buses&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;last_bus&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;time_re_parser&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;last_bus&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;time_re_parser&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;last_bus&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
        
                
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;time_parser&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;60&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:])&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;time_re_parser&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;hour&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;//&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;60&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; 
    &lt;span class=&quot;n&quot;&gt;minute&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;60&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hour&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;hour&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;0&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hour&lt;/span&gt;
        
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;minute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;minute&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;0&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;minute&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hour&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;:&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;minute&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;is_empty_bus&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;buses&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt; 
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;buses&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;items&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;n&quot;&gt;test_case&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;08:00&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;08:01&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;08:02&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;08:03&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;09:10&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;09:09&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;08:00&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;09:00&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;09:00&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;09:00&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;09:00&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;00:01&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;00:01&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;00:01&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;00:01&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;00:01&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;	&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;23:59&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;60&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;45&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;23:59&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;23:59&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;23:59&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;23:59&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;23:59&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;23:59&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;23:59&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;23:59&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;23:59&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;23:59&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;23:59&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;23:59&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;23:59&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;23:59&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;23:59&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;23:59&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;test_case&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;case&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;solution&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;case&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;case&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;case&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;case&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]))&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;case
09:00
case
09:09
case
08:59
case
00:00
case
09:00
case
18:00
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;문제설명-1&quot;&gt;문제설명&lt;/h2&gt;
&lt;p&gt;이 문제는 언뜻보면 복잡해보이지만, 가장 늦게 탑승하는 시간을 구하면 되기 때문에 마지막 버스만 생각해주면 된다. 만약 마지막 버스에 빈자리가 있다면 해당 버스가 출발하는 시간에 탑승하면 되고, 마지막 버스에 빈자리가 없다면 그 버스에 마지막으로 탑승한 크루보다 1분 먼저 오면 버스를 탑승할 수 있다.&lt;/p&gt;

&lt;p&gt;타임테이블을 정렬해준뒤, 버스 시간표를 딕셔너리로 만들어 딕셔너리 테이블을 하나의 버스로 놓고 크루들을 먼저 다 탑승시킨다. 그리고 마지막 버스만을 판별해서 위에 설명했던 것처럼 탑승 시간을 구해주면 된다.&lt;/p&gt;</content><author><name>이민재</name><email>lmj938@naver.com</email></author><category term="programmers" /><summary type="html">문제설명 셔틀버스</summary></entry><entry><title type="html">[JPA] 영속성 컨텍스트 (1)</title><link href="http://localhost:4000/java/JPA-%EC%98%81%EC%86%8D%EC%84%B1-%EC%BB%A8%ED%85%8D%EC%8A%A4%ED%8A%B8/" rel="alternate" type="text/html" title="[JPA] 영속성 컨텍스트 (1)" /><published>2022-04-26T00:00:00+00:00</published><updated>2022-04-26T00:00:00+00:00</updated><id>http://localhost:4000/java/%5BJPA%5D%EC%98%81%EC%86%8D%EC%84%B1%20%EC%BB%A8%ED%85%8D%EC%8A%A4%ED%8A%B8</id><content type="html" xml:base="http://localhost:4000/java/JPA-%EC%98%81%EC%86%8D%EC%84%B1-%EC%BB%A8%ED%85%8D%EC%8A%A4%ED%8A%B8/">&lt;h2 id=&quot;영속성-컨텍스트란&quot;&gt;영속성 컨텍스트란?&lt;/h2&gt;
&lt;p&gt;영속성 컨텍스트는 쉽게 풀이하면 &lt;strong&gt;“엔티티를 영구 저장하는 환경”&lt;/strong&gt; 이라는 뜻입니다.&lt;/p&gt;

&lt;p&gt;이렇게 정의로만 놓고보면, DB에 엔티티를 저장하는데, DB가 바로 영속성 컨텍스트 아닌가? 하는 생각도 드실 겁니다.&lt;/p&gt;

&lt;p&gt;이처럼 영속성 컨텍스트는 JPA에서 가장 중요한 개념이자 헷갈리기 쉬운 개념일 수 있는데요. 아무래도 눈에 보이지 않아서 헷갈리는 부분이 큽니다. 그렇다면 영속성 컨텍스트에 대해서 알아봅시다.&lt;/p&gt;

&lt;h2 id=&quot;entitymanagerfactory-와-entitymanager&quot;&gt;EntityManagerFactory 와 EntityManager&lt;/h2&gt;
&lt;p&gt;JPA는 데이터 베이스에 접근하기 위해서 &lt;strong&gt;EntityManager&lt;/strong&gt;를 사용합니다. 말그대로 Entity관리자인 셈이죠. JPA는 우리가 데이터베이스를 객체지향적으로 사용할 수 있도록 도와주기 때문에, &lt;strong&gt;JPA에서 Entity는 곧 테이블&lt;/strong&gt;입니다. 따라서 이에 접근하기 위해 도와줄 매니저가 한 명 필요한 것인데요, 이 Entity매니저는 저장, 수정, 삭제, 조회등 Enity에서의 관련된 모든일을 처리합니다.&lt;/p&gt;

&lt;p&gt;이러한 매니저들을 만드는 공장이 바로 &lt;strong&gt;EntityManagerFactory&lt;/strong&gt;입니다. 고객의 요청이 들어올때 마다 EntityManager를 한명씩 붙여주고, 이들이 테이블을 관리하게 해주는 것이죠.&lt;/p&gt;

&lt;p&gt;공장은 말그대로 공장이니, 규모가 크고  지으려면 오래 걸릴 것입니다. 그래서 &lt;strong&gt;반드시 하나의 데이터베이스에는 하나의 공장만을 지어주어야 합니다.&lt;/strong&gt; 공장을 여러개 짓게 되면 프로그램의 속도가 크게 저하 될 수 있습니다.&lt;/p&gt;

&lt;p&gt;그럼 공장을 생성하는 방법을 한번 코드로 작성해볼까요?&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nc&quot;&gt;EntityManagerFactory&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;emf&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Persistence&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;createEntityManagerFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;hello&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;이렇게 하면 우리는 EntityManager들을 생산할 공장을 아주 쉽게 만들 수 있습니다.&lt;/p&gt;

&lt;p&gt;여기서 &lt;strong&gt;createEntityManagerFactory&lt;/strong&gt;의 파라미터로 들어오는 값은 JPA를 설정할 때 했던 설정파일인&lt;strong&gt;persistence.xml&lt;/strong&gt; 파일에 있는 &lt;strong&gt;persistenceUnitName&lt;/strong&gt;을 적어주면 됩니다.&lt;/p&gt;

&lt;p&gt;그럼 데이터베이스에 접근하기 위해서는 여기 공장에서 매니저를 생산해서 데리고 와야 접근이 가능하다고 했던 내용이 기억나실 것 입니다. 이 공장에서 매니저를 생산하려면 어떻게 하면 될까요?&lt;/p&gt;

&lt;p&gt;아래와 같이 생산하시면 됩니다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nc&quot;&gt;EntityManager&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;em&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;emf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;createEntityManager&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;우리는 이제 EntityManager 라는 클래스를 갖는 em이라는 이름의 매니저를 한명 생산한 것 입니다. 이제 이 매니저의 도움으로 우리는 우리의 데이터베이스에 접근 할 수 있게 되었습니다.&lt;/p&gt;

&lt;p&gt;자 그럼 어떻게 하면 우리가 만든 객체를 데이터베이스에 넣을 수 있을까요? 한번 Member라는 클래스를 만들고 이를 Entity로 지정하여 데이터베이스에 넣어 봅시다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nd&quot;&gt;@Entity&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Member&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@Id&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Long&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    
    &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    
    &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    
      &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Long&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;setId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Long&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;setName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getAge&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;setAge&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;age&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;간단하게 id와 이름, 나이 정도만 있는 &lt;strong&gt;Member&lt;/strong&gt;라는 클래스를 만들어주어 봅시다.&lt;br /&gt;
간편하게 값을 가져오고 세팅하기 위해 Getter와 Setter도 모두 만들어 주도록 하겠습니다.&lt;/p&gt;

&lt;p&gt;이제 이 상태로 main 함수를 실행 시켜 볼까요??&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/tech/Java/2022-04-26-[JPA]영속성/image1.PNG&quot; alt=&quot;image1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;아까 Entity는 곧 데이터베이스에서 테이블이라고 했습니다. 그런데 Entity로 분명 Member를 지정해주었는데, 아무런 테이블도 생성되지 않았네요. 왜일까요?&lt;/p&gt;

&lt;p&gt;그럼 이번에는 EntityManagerFactory를 하나 한번 만들어볼까요?&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;JpaMain&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;EntityManagerFactory&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;emf&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Persistence&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;createEntityManagerFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;hello&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;emf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;다시 한번 위 코드로 main 함수를 실행 시켜 봅시다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;참고로 emf 공장은 프로그램이 종료가 되기 전 반드시 close()를 통해서 공장의 문을 닫아주셔야 합니다.&lt;/strong&gt; 그렇지 않으면 프로그램이 데이터베이스에 접근 후에도 계속 실행된 상태로 지속됩니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/tech/Java/2022-04-26-[JPA]영속성/image2.PNG&quot; alt=&quot;image1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;로그 창만 봐도 쿼리가 날아간게 보이네요!&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;혹시 쿼리가 날아가는게 보이지 않는 분들은 persistence.xml 옵션에서 sql이 보이도록 하는 옵션들을 true로 바꿔주세요&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;그럼 h2 데이터베이스를 확인해 볼까요?&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/tech/Java/2022-04-26-[JPA]영속성/image3.PNG&quot; alt=&quot;image1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;정상적으로 Member 테이블이 생성된 것을 확인할 수 있습니다.&lt;/p&gt;

&lt;p&gt;위 코드를 통해서 &lt;strong&gt;공장이 생성되야 본격적으로 테이블을 생성하게 됨을 알 수 있습니다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;그럼 이제 매니저를 만들어서 본격적으로 Member라는 클래스의 객체를 만들어서 해당 테이블의 컬럼을 채워보도록 합시다.&lt;/p&gt;

&lt;p&gt;먼저, 매니저를 만들어 줍니다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;JpaMain&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;EntityManagerFactory&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;emf&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Persistence&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;createEntityManagerFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;hello&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;EntityManager&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;em&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;emf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;createEntityManager&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        
        &lt;span class=&quot;n&quot;&gt;em&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;emf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;아까 배운대로 동일하게 매니저를 만들어주면, &lt;strong&gt;이제 em이라는 매니저가 우리의 데이터베이스 접근을 도와줄 것입니다.&lt;/strong&gt; 데이터 베이스에 접근하려면 매니저에게 다음과 같은 명령을 해주어야 합니다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;매니저도 마찬가지로 사용이 완료되었다면, 반드시 close()를 사용해서 종료시켜주어야 합니다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;그럼 이제 매니저를 사용하기 위해 &lt;strong&gt;트랜잭션&lt;/strong&gt;을 열어줄 것 입니다. 여기서 또 트랜잭션이라는 새로운 개념이 나옵니다.&lt;/p&gt;

&lt;h2 id=&quot;트랜잭션&quot;&gt;트랜잭션&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;트랜잭션&lt;/strong&gt;은 &lt;strong&gt;“쪼갤 수 없는 업무 처리의 최소 단위”&lt;/strong&gt;를 말하는데요. 이해가 쉽도록 다음과 같은 과정을 생각해봅시다.&lt;/p&gt;

&lt;p&gt;만약 Member1과 Member2를 기록한다고 해봅시다. Member1과 Member2는 커플이라서 무조건 함께 기록되어야 합니다. 우리는 이 커플들을 (1,2), (3,4)와 같이 2의 단위로 묶어서 기록 하기로 했기 때문에, 1,2는 무조건 커플이어야 합니다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;물론 실제에서 이렇게 데이터베이스를 관리하지는 않지만, 이해를 쉽게  하기 위해 이렇게 가정해보겠습니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;그렇다면 만약 Member1은 정상적으로 기록되었는데, Member2에서 오류가 발생하여 데이터베이스에 접근하지 못하게 되었다면 어떻게 될까요?&lt;/p&gt;

&lt;p&gt;그렇다면 데이터베이스에 Member1만 기록될테니, 후에 만약 Member3와 Member4가 온다면 Member1과 Member3가 커플이 되고, Member4는 짝이 없어진 채로 데이터베이스에 기록될 것입니다.&lt;/p&gt;

&lt;p&gt;그래서 우리는 이러한 일을 방지하기 위해서, &lt;strong&gt;트랜잭션&lt;/strong&gt;을 사용합니다.&lt;/p&gt;

&lt;p&gt;트랜잭션은 아까 쪼갤 수 없는 업무 처리의 최소 단위라고 했습니다.&lt;/p&gt;

&lt;p&gt;따라서 트랜잭션 단위 안에 Member1 과 Member2를 쓰는 코드를 넣어주게 되면, 트랜잭션 안에서 예외가 발생하면 트랜잭션 단위를 통째로 취소합니다. 따라서 Member2에서 에러나 예외가 발생했다면, 트랜잭션 하나가 전부 취소되어 Member1도 기록이 되지 않게 되는 것입니다.&lt;/p&gt;

&lt;p&gt;그러면 혹여나 Member2에서 에러가 발생해도 우리가 원하는 작업 단위가 통째로 취소되므로, 후에 들어올 Member3와 Member4는 안전하게 기록될 수 있는 것이죠.&lt;/p&gt;

&lt;p&gt;코드로 한번 살펴 볼까요?&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt; &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
 	&lt;span class=&quot;nc&quot;&gt;EntityManagerFactory&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;emf&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Persistence&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;createEntityManagerFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;hello&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;EntityManager&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;em&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;emf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;createEntityManager&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;EntityTransaction&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tx&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;em&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getTransaction&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        
        &lt;span class=&quot;n&quot;&gt;tx&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;begin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
	
        &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        
		&lt;span class=&quot;n&quot;&gt;tx&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;commit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
		
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                       &lt;span class=&quot;n&quot;&gt;tx&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;rollback&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;finally&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;em&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;emf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
 &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;트랜잭션은 위 코드와 같이 사용합니다. 매니저로부터 트랜잭션을 얻어온 뒤, &lt;strong&gt;begin()&lt;/strong&gt;을 통해서 트랜잭션의 시작을 알려주고, &lt;strong&gt;try-catch&lt;/strong&gt; 구문을 사용해서 혹시나 예외가 발생한다면 &lt;strong&gt;rollback()&lt;/strong&gt; 함수를 통해서 &lt;strong&gt;트랜잭션의 단위 통째로 취소해버리게 되는 것이죠.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;만약 에러가 발생하지 않는다면 &lt;strong&gt;commit()&lt;/strong&gt;을 통해서 트랜잭션을 종료해주면 됩니다.&lt;/p&gt;

&lt;p&gt;따라서 우리가 트랜잭션 단위로 처리하고 싶은 작업을 try 구문 안에 넣어주면 됩니다.&lt;/p&gt;

&lt;p&gt;그럼 이제 다시 Member 클래스의 객체를 만들어줌으로써 컬럼을 채워봅시다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;EntityManagerFactory&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;emf&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Persistence&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;createEntityManagerFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;hello&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;EntityManager&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;em&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;emf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;createEntityManager&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;EntityTransaction&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tx&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;em&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getTransaction&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;tx&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;begin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        
            &lt;span class=&quot;nc&quot;&gt;Member&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;member&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Member&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;member&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1L&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;member&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;이민재&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;member&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setAge&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;26&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
            
            &lt;span class=&quot;n&quot;&gt;tx&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;commit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;tx&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;rollback&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;finally&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;em&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;emf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;main을 실행 시키면 어떻게 될까요?&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/tech/Java/2022-04-26-[JPA]영속성/image3.PNG&quot; alt=&quot;image1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;이상하게도 객체를 만들어주는 작업을 트랜잭션에 넣어 오류없이 완료했음에도 불구하고 테이블에 컬럼이 그대로 비워져있습니다. 왜일까요?&lt;/p&gt;

&lt;p&gt;여기서 필요한 것이 바로 영속성 컨텍스트입니다.&lt;/p&gt;

&lt;h2 id=&quot;영속성-컨텍스트&quot;&gt;영속성 컨텍스트&lt;/h2&gt;
&lt;p&gt;방금 코드를 사용해서 데이터 베이스에 접근 하려면 어떻게 해야할까요?&lt;/p&gt;

&lt;p&gt;이를 영속성 컨텍스트가 관리하도록 해주면 됩니다.&lt;/p&gt;

&lt;p&gt;아직 코드를 살펴보면 객체를 만들기만 했지, 이 객체에 대해서 매니저가 어떠한 행동도 취하지 않은 것을 볼 수 있습니다.&lt;/p&gt;

&lt;p&gt;다음과 같은 코드를 추가해보겠습니다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;n&quot;&gt;em&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;persist&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;member&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;EntityManagerFactory&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;emf&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Persistence&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;createEntityManagerFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;hello&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;EntityManager&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;em&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;emf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;createEntityManager&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;EntityTransaction&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tx&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;em&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getTransaction&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;tx&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;begin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

            &lt;span class=&quot;nc&quot;&gt;Member&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;member&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Member&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;member&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1L&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;member&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;이민재&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;member&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setAge&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;26&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

            &lt;span class=&quot;n&quot;&gt;em&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;persist&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;member&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

            &lt;span class=&quot;n&quot;&gt;tx&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;commit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
            
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;tx&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;rollback&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;finally&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;em&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;emf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;이제 위에서 만든 객체를 em 매니저가 영속성 컨텍스트에 추가하게 됩니다. 그럼 이 상태로 main 함수를 한번 실행시켜 볼까요?&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/tech/Java/2022-04-26-[JPA]영속성/image4.PNG&quot; alt=&quot;image1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;이제 정상적으로 만들어준 객체가 컬럼으로 등록되었습니다!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;방금 코드에서 em.persist()를 추가하니까 컬럼에 올라갔지만, 사실 persist()를 했을 때 데이터베이스에 접근한 것을 아닙니다. persist는 말그대로 영속성(Persist) 이므로, member라는 객체를 영속성 컨텍스트가 관리하게 해준것이고, 이를 commit() 함수가 실행되었을 때 데이터베이스에 등록하게 됩니다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;따라서 commit()은 영속성 컨텍스트에 의해서 관리 받는 엔티티만을 데이터 베이스에 등록하는 것을 알 수 있습니다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;그렇다면 영속성 컨텍스트란 무엇일까요??&lt;/p&gt;

&lt;p&gt;JPA에서 엔티티는 아래와 같은 생명주기를 갖습니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/tech/Java/2022-04-26-[JPA]영속성/image5.PNG&quot; alt=&quot;image1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;위 그림에서 적혀 있는 상태를 4가지로 구분해보자면 다음과 같습니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;비영속 (New)&lt;/li&gt;
  &lt;li&gt;영속 (Managed)&lt;/li&gt;
  &lt;li&gt;준영속 (Detached)&lt;/li&gt;
  &lt;li&gt;삭제 (Removed)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;하나씩 설명해 보자면,&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;비영속&lt;/strong&gt;이 바로 우리가 아까 객체를 생성한 상태입니다. 아까 코드에서 &lt;strong&gt;persist()&lt;/strong&gt; 를 쓰지않았을때의 객체가 바로 이 상태로, 객체는 생성되었지만 이를 아직 영속상태에 놓지 않았기 때문에 &lt;strong&gt;commit()&lt;/strong&gt;이 되어도 데이터베이스에 기록되지 않습니다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;영속&lt;/strong&gt;은 persist()를 사용해서 해당 엔티티를 영속성 컨텍스트가 관리 하도록 만든 상태입니다. 이 상태에서 commit()이 되면 데이터 베이스에 해당 변경 사항을 기록하게 되는 것이죠.&lt;/p&gt;

&lt;p&gt;영속은 쉽게 말하면 &lt;strong&gt;예비 출전 상태&lt;/strong&gt;라고 생각하면 쉽습니다. 만약 전쟁이 일어났다면, 바로 집에서 전쟁터로 직행하지 않겠죠? 정해진 장소로 우선 모아서 다 모였는지, 아픈 사람은 없는지, 전략은 완벽한지를 모두 체크하고 한번에 모아서 전쟁터로 출전하게 됩니다. 굳이 집에서 한명씩 비효율적으로 전쟁터로 직행 할 필요가 없죠.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;준영속&lt;/strong&gt;은 detach() 함수를 사용해서 만드는 상태입니다. 사실 이 상태는 개발자가 직접 준영속을 만들 경우는 거의 없습니다. 말그대로 영속 컨텍스트에 올라간 엔티티를 다시 떼내어서 영속 상태가 아니도록 만드는 것입니다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;삭제&lt;/strong&gt;는 말그대로 삭제 상태입니다. 영속컨텍스트에서 떼어내서 commit()에서만 제외하여 DB에 반영하지 않는 준영속과 달리, 실제 DB에서의 삭제를 요청한 상태입니다.&lt;/p&gt;

&lt;p&gt;그럼 이제 영속성 컨텍스트를 알게 되었으니, JPA를 사용해서 객체를 만들고 이를 영속상태로 만들어 준 뒤 트랜잭션을 커밋해주면, 우리가 원하는 데이터를 객체지향스럽게 데이터베이스에 기록 할 수 있음을 알게 되었습니다.&lt;/p&gt;

&lt;p&gt;그런데 왜 굳이 바로 데이터베이스에 접근하지 않고 영속성 컨텍스트에 올린 뒤에 데이터베이스에 접근 하는 것일까요?&lt;/p&gt;

&lt;p&gt;그것은 바로 영속성 컨텍스트를 사용하면 여러가지 데이터를 효율적으로 관리할 수 있는 이점들이 있기 때문입니다.&lt;/p&gt;

&lt;p&gt;그러면 어떠한 이점들이 있길래 굳이 한번의 과정을 추가한 것일까요?&lt;/p&gt;

&lt;p&gt;이러한 이점들은 다음 게시물에서 알아보도록 하겠습니다.&lt;/p&gt;</content><author><name>이민재</name><email>lmj938@naver.com</email></author><category term="java" /><summary type="html">영속성 컨텍스트란? 영속성 컨텍스트는 쉽게 풀이하면 “엔티티를 영구 저장하는 환경” 이라는 뜻입니다.</summary></entry><entry><title type="html">[Programmers] 보석쇼핑 (Python3)</title><link href="http://localhost:4000/programmers/%EB%B3%B4%EC%84%9D-%EC%87%BC%ED%95%91(Python3)/" rel="alternate" type="text/html" title="[Programmers] 보석쇼핑 (Python3)" /><published>2022-04-26T00:00:00+00:00</published><updated>2022-04-26T00:00:00+00:00</updated><id>http://localhost:4000/programmers/%EB%B3%B4%EC%84%9D%20%EC%87%BC%ED%95%91(Python3)</id><content type="html" xml:base="http://localhost:4000/programmers/%EB%B3%B4%EC%84%9D-%EC%87%BC%ED%95%91(Python3)/">&lt;h2 id=&quot;문제설명&quot;&gt;문제설명&lt;/h2&gt;
&lt;p&gt;[본 문제는 정확성과 효율성 테스트 각각 점수가 있는 문제입니다.]&lt;/p&gt;

&lt;p&gt;개발자 출신으로 세계 최고의 갑부가 된 어피치는 스트레스를 받을 때면 이를 풀기 위해 오프라인 매장에 쇼핑을 하러 가곤 합니다.&lt;br /&gt;
어피치는 쇼핑을 할 때면 매장 진열대의 특정 범위의 물건들을 모두 싹쓸이 구매하는 습관이 있습니다.&lt;br /&gt;
어느 날 스트레스를 풀기 위해 보석 매장에 쇼핑을 하러 간 어피치는 이전처럼 진열대의 특정 범위의 보석을 모두 구매하되 특별히 아래 목적을 달성하고 싶었습니다.&lt;br /&gt;
진열된 모든 종류의 보석을 적어도 1개 이상 포함하는 가장 짧은 구간을 찾아서 구매&lt;/p&gt;

&lt;p&gt;예를 들어 아래 진열대는 4종류의 보석(RUBY, DIA, EMERALD, SAPPHIRE) 8개가 진열된 예시입니다.&lt;/p&gt;

&lt;p&gt;진열대 번호12345678&lt;br /&gt;
보석 이름DIA RUBY RUBY DIA DIA EMERALD SAPPHIRE DIA&lt;br /&gt;
진열대의 3번부터 7번까지 5개의 보석을 구매하면 모든 종류의 보석을 적어도 하나 이상씩 포함하게 됩니다.&lt;/p&gt;

&lt;p&gt;진열대의 3, 4, 6, 7번의 보석만 구매하는 것은 중간에 특정 구간(5번)이 빠지게 되므로 어피치의 쇼핑 습관에 맞지 않습니다.&lt;/p&gt;

&lt;p&gt;진열대 번호 순서대로 보석들의 이름이 저장된 배열 gems가 매개변수로 주어집니다. 이때 모든 보석을 하나 이상 포함하는 가장 짧은 구간을 찾아서 return 하도록 solution 함수를 완성해주세요.&lt;br /&gt;
가장 짧은 구간의 시작 진열대 번호와 끝 진열대 번호를 차례대로 배열에 담아서 return 하도록 하며, 만약 가장 짧은 구간이 여러 개라면 시작 진열대 번호가 가장 작은 구간을 return 합니다.&lt;/p&gt;

&lt;p&gt;[제한사항]&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;gems 배열의 크기는 1 이상 100,000 이하입니다.&lt;/li&gt;
  &lt;li&gt;gems 배열의 각 원소는 진열대에 나열된 보석을 나타냅니다.&lt;/li&gt;
  &lt;li&gt;gems 배열에는 1번 진열대부터 진열대 번호 순서대로 보석이름이 차례대로 저장되어 있습니다.&lt;/li&gt;
  &lt;li&gt;gems 배열의 각 원소는 길이가 1 이상 10 이하인 알파벳 대문자로만 구성된 문자열입니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;입출력-예&quot;&gt;입출력 예&lt;/h2&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;gems&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;result&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;[“DIA”, “RUBY”, “RUBY”, “DIA”, “DIA”, “EMERALD”, “SAPPHIRE”, “DIA”]&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;[3, 7]&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;[“AA”, “AB”, “AC”, “AA”, “AC”]&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;[1, 3]&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;[“XYZ”, “XYZ”, “XYZ”]&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;[1, 1]&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;[“ZZZ”, “YYY”, “NNNN”, “YYY”, “BBB”]&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;[1, 5]&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&quot;입출력-예에-대한-설명&quot;&gt;입출력 예에 대한 설명&lt;/h2&gt;

&lt;h3 id=&quot;입출력-예-1&quot;&gt;입출력 예 #1&lt;/h3&gt;
&lt;p&gt;문제 예시와 같습니다.&lt;/p&gt;

&lt;h3 id=&quot;입출력-예-2&quot;&gt;입출력 예 #2&lt;/h3&gt;
&lt;p&gt;3종류의 보석(AA, AB, AC)을 모두 포함하는 가장 짧은 구간은 [1, 3], [2, 4]가 있습니다.&lt;br /&gt;
시작 진열대 번호가 더 작은 [1, 3]을 return 해주어야 합니다.&lt;/p&gt;

&lt;h3 id=&quot;입출력-예-3&quot;&gt;입출력 예 #3&lt;/h3&gt;
&lt;p&gt;1종류의 보석(XYZ)을 포함하는 가장 짧은 구간은 [1, 1], [2, 2], [3, 3]이 있습니다.&lt;br /&gt;
시작 진열대 번호가 가장 작은 [1, 1]을 return 해주어야 합니다.&lt;/p&gt;

&lt;h3 id=&quot;입출력-예-4&quot;&gt;입출력 예 #4&lt;/h3&gt;
&lt;p&gt;4종류의 보석(ZZZ, YYY, NNNN, BBB)을 모두 포함하는 구간은 [1, 5]가 유일합니다.&lt;br /&gt;
그러므로 [1, 5]를 return 해주어야 합니다.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;collections&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Counter&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;solution&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gems&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;num&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gems&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ret&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;
    
    &lt;span class=&quot;n&quot;&gt;left&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;counter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Counter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;right&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gems&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)):&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;counter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gems&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;right&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;right&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;counter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;right&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;counter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;num&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;counter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gems&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;counter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gems&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;del&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;counter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gems&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;left&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;ret&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;right&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;sorted&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ret&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]))[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;문제설명-1&quot;&gt;문제설명&lt;/h2&gt;
&lt;p&gt;이 문제는 이중 for문 으로도 풀 수 있지만 효율성을 통과하려면 투포인터를 사용해주어야한다.&lt;br /&gt;
이처럼 어떤 범위나 구간내의 정보를 바탕으로 문제를 해결하는 문제는 반드시 투포인터로 left와 right를 점차 변경시켜가며 구간안에 있는 값들을 판별하거나 처리해주면 반드시 O(N) 시간내로 문제를 해결 할 수 있기 때문에 이러한 문제에 효율성 조건이 있다면 반드시 투포인터 문제로 풀이한다.&lt;/p&gt;</content><author><name>이민재</name><email>lmj938@naver.com</email></author><category term="programmers" /><summary type="html">문제설명 [본 문제는 정확성과 효율성 테스트 각각 점수가 있는 문제입니다.]</summary></entry></feed>